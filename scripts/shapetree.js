var blues =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./webapp/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@shexjs/core/lib/RdfTerm.js":
/*!**************************************************!*\
  !*** ./node_modules/@shexjs/core/lib/RdfTerm.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n *\n * isIRI, isBlank, getLiteralType, getLiteralValue\n */\n\nvar RdfTerm = (function () {\n\n  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,\n    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i,\n    dotSegments = /(?:^|\\/)\\.\\.?(?:$|[\\/#?])/;\n\n  const RdfLangString = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\";\n  const XsdString = \"http://www.w3.org/2001/XMLSchema#string\";\n\n  // N3.js:lib/N3Parser.js<0.4.5>:576 with\n  //   s/this\\./Parser./g\n  //   s/token/iri/\n  // ### `_resolveIRI` resolves a relative IRI token against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative.\n  function resolveRelativeIRI (base, iri) {\n\n    if (absoluteIRI.test(iri))\n      return iri\n\n    switch (iri[0]) {\n    // An empty relative IRI indicates the base IRI\n    case undefined: return base;\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      let m = base.match(schemeAuthority);\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? m[1] : m[0]) + _removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default: {\n      return _removeDotSegments(base.replace(/[^\\/?]*(?:\\?.*)?$/, '') + iri);\n    }\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.\n  function _removeDotSegments (iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!dotSegments.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return result + '/' + iri.substr(i + 1);\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  function internalTerm (node) { // !!rdfjsTermToInternal\n    switch (node.termType) {\n    case (\"NamedNode\"):\n      return node.value;\n    case (\"BlankNode\"):\n      return \"_:\" + node.value;\n    case (\"Literal\"):\n      return \"\\\"\" + node.value + \"\\\"\" + (\n        node.datatypeString === RdfLangString\n          ? \"@\" + node.language\n          : node.datatypeString === XsdString\n          ? \"\"\n          : \"^^\" + node.datatypeString\n      );\n    default: throw Error(\"unknown RDFJS node type: \" + JSON.stringify(node))\n    }\n  }\n\n  function internalTriple (triple) { // !!rdfjsTripleToInternal\n    return {\n      subject: internalTerm(triple.subject),\n      predicate: internalTerm(triple.predicate),\n      object: internalTerm(triple.object)\n    };\n  }\n\n  function externalTerm (node, factory) { // !!intermalTermToRdfjs\n    if (isIRI(node)) {\n      return factory.namedNode(node);\n    } else if (isBlank(node)) {\n      return factory.blankNode(node.substr(2));\n    } else if (isLiteral(node)) {\n      let dtOrLang = getLiteralLanguage(node) ||\n          (getLiteralType(node) === XsdString\n           ? null // seems to screw up N3.js\n           : factory.namedNode(getLiteralType(node)))\n      return factory.literal(getLiteralValue(node), dtOrLang)\n    } else {\n      throw Error(\"Unknown internal term type: \" + JSON.stringify(node));\n    }\n  }\n\n  function externalTriple (triple, factory) { // !!rename internalTripleToRdjs\n    return factory.quad(\n      externalTerm(triple.subject, factory),\n      externalTerm(triple.predicate, factory),\n      externalTerm(triple.object, factory)\n    );\n  }\n\n  function intermalTermToTurtle (node, base, prefixes) {\n    if (isIRI(node)) {\n      // if (node === RDF_TYPE) // only valid in Turtle predicates\n      //   return \"a\";\n\n      // Escape special characters\n      if (escape.test(node))\n        node = node.replace(escapeAll, characterReplacer);\n      var pref = Object.keys(prefixes).find(pref => node.startsWith(prefixes[pref]));\n      if (pref) {\n        var rest = node.substr(prefixes[pref].length);\n        if (rest.indexOf(\"\\\\\") === -1) // could also say no more than n of these: [...]\n          return pref + \":\" + rest.replace(/([~!$&'()*+,;=/?#@%])/g, '\\\\' + \"$1\");\n      }\n      if (node.startsWith(base)) {\n        return \"<\" + node.substr(base.length) + \">\";\n      } else {\n        return \"<\" + node + \">\";\n      }\n    } else if (isBlank(node)) {\n      return node;\n    } else if (isLiteral(node)) {\n      var value = getLiteralValue(node);\n      var type = getLiteralType(node);\n      var language = getLiteralLanguage(node);\n      // Escape special characters\n      if (escape.test(value))\n        value = value.replace(escapeAll, characterReplacer);\n      // Write the literal, possibly with type or language\n      if (language)\n        return '\"' + value + '\"@' + language;\n      else if (type)\n        return '\"' + value + '\"^^' + this._encodeIriOrBlankNode(type);\n      else\n        return '\"' + value + '\"';\n    } else {\n      throw Error(\"Unknown internal term type: \" + JSON.stringify(node));\n    }\n  }\n\n  // Tests whether the given entity (triple object) represents an IRI in the N3 library\n  function isIRI (entity) {\n    if (typeof entity !== 'string')\n      return false;\n    else if (entity.length === 0)\n      return true;\n    else {\n      var firstChar = entity[0];\n      return firstChar !== '\"' && firstChar !== '_';\n    }\n  }\n\n  // Tests whether the given entity (triple object) represents a literal in the N3 library\n  function isLiteral (entity) {\n    return typeof entity === 'string' && entity[0] === '\"';\n  }\n\n  // Tests whether the given entity (triple object) represents a blank node in the N3 library\n  function isBlank (entity) {\n    return typeof entity === 'string' && entity.substr(0, 2) === '_:';\n  }\n\n  // Tests whether the given entity represents the default graph\n  function isDefaultGraph (entity) {\n    return !entity;\n  }\n\n  // Tests whether the given triple is in the default graph\n  function inDefaultGraph (triple) {\n    return !triple.graph;\n  }\n\n  // Gets the string value of a literal in the N3 library\n  function getLiteralValue (literal) {\n    var match = /^\"([^]*)\"/.exec(literal);\n    if (!match)\n      throw new Error(literal + ' is not a literal');\n    return match[1];\n  }\n\n  // Gets the type of a literal in the N3 library\n  function getLiteralType (literal) {\n    var match = /^\"[^]*\"(?:\\^\\^([^\"]+)|(@)[^@\"]+)?$/.exec(literal);\n    if (!match)\n      throw new Error(literal + ' is not a literal');\n    return match[1] || (match[2] ? RdfLangString : XsdString);\n  }\n\n  // Gets the language of a literal in the N3 library\n  function getLiteralLanguage (literal) {\n    var match = /^\"[^]*\"(?:@([^@\"]+)|\\^\\^[^\"]+)?$/.exec(literal);\n    if (!match)\n      throw new Error(literal + ' is not a literal');\n    return match[1] ? match[1].toLowerCase() : '';\n  }\n\n\n// rdf:type predicate (for 'a' abbreviation)\nvar RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    RDF_TYPE   = RDF_PREFIX + 'type';\n\n// Characters in literals that require escaping\nvar escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapeReplacements = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n  // Replaces a character by its escaped version\n  function characterReplacer (character) {\n    // Replace a single character by its escaped version\n    var result = escapeReplacements[character];\n    if (result === undefined) {\n      // Replace a single character with its 4-bit unicode escape sequence\n      if (character.length === 1) {\n        result = character.charCodeAt(0).toString(16);\n        result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n      }\n      // Replace a surrogate pair with its 8-bit unicode escape sequence\n      else {\n        result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                  character.charCodeAt(1) + 0x2400).toString(16);\n        result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n      }\n    }\n    return result;\n  }\n\n  return {\n    RdfLangString: RdfLangString,\n    XsdString: XsdString,\n    resolveRelativeIRI: resolveRelativeIRI,\n    isIRI: isIRI,\n    isLiteral: isLiteral,\n    isBlank: isBlank,\n    isDefaultGraph: isDefaultGraph,\n    inDefaultGraph: inDefaultGraph,\n    getLiteralValue: getLiteralValue,\n    getLiteralType: getLiteralType,\n    getLiteralLanguage: getLiteralLanguage,\n    internalTerm: internalTerm,\n    internalTriple: internalTriple,\n    externalTerm: externalTerm,\n    externalTriple: externalTriple,\n    intermalTermToTurtle: intermalTermToTurtle,\n  }\n})();\n\nif (true)\n  module.exports = RdfTerm; // node environment\n\n\n//# sourceURL=webpack://blues/./node_modules/@shexjs/core/lib/RdfTerm.js?");

/***/ }),

/***/ "./node_modules/@shexjs/core/lib/ShExUtil.js":
/*!***************************************************!*\
  !*** ./node_modules/@shexjs/core/lib/ShExUtil.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// **ShExUtil** provides ShEx utility functions\n\nvar ShExUtil = (function () {\nvar RdfTerm = __webpack_require__(/*! ./RdfTerm */ \"./node_modules/@shexjs/core/lib/RdfTerm.js\");\n// var util = require('util');\nconst Hierarchy = __webpack_require__(/*! hierarchy-closure */ \"./node_modules/hierarchy-closure/hierarchy-closure.js\")\n\nconst SX = {};\nSX._namespace = \"http://www.w3.org/ns/shex#\";\n[\"Schema\", \"@context\", \"imports\", \"startActs\", \"start\", \"shapes\",\n \"ShapeDecl\", \"ShapeOr\", \"ShapeAnd\", \"shapeExprs\", \"nodeKind\",\n \"NodeConstraint\", \"iri\", \"bnode\", \"nonliteral\", \"literal\", \"datatype\", \"length\", \"minlength\", \"maxlength\", \"pattern\", \"flags\", \"mininclusive\", \"minexclusive\", \"maxinclusive\", \"maxexclusive\", \"totaldigits\", \"fractiondigits\", \"values\",\n \"ShapeNot\", \"shapeExpr\",\n \"Shape\", \"abstract\", \"closed\", \"extra\", \"expression\", \"extends\", \"restricts\", \"semActs\",\n \"ShapeRef\", \"reference\", \"ShapeExternal\",\n \"EachOf\", \"OneOf\", \"expressions\", \"min\", \"max\", \"annotation\",\n \"TripleConstraint\", \"inverse\", \"negated\", \"predicate\", \"valueExpr\",\n \"Inclusion\", \"include\", \"Language\", \"languageTag\",\n \"IriStem\", \"LiteralStem\", \"LanguageStem\", \"stem\",\n \"IriStemRange\", \"LiteralStemRange\", \"LanguageStemRange\", \"exclusion\",\n \"Wildcard\", \"SemAct\", \"name\", \"code\",\n \"Annotation\", \"object\"].forEach(p => {\n  SX[p] = SX._namespace+p;\n});\nconst RDF = {};\nRDF._namespace = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\n[\"type\", \"first\", \"rest\", \"nil\"].forEach(p => {\n  RDF[p] = RDF._namespace+p;\n});\nconst XSD = {}\nXSD._namespace = \"http://www.w3.org/2001/XMLSchema#\";\n[\"anyURI\"].forEach(p => {\n  XSD[p] = XSD._namespace+p;\n});\nconst OWL = {}\nOWL._namespace = \"http://www.w3.org/2002/07/owl#\";\n[\"Thing\"].forEach(p => {\n  OWL[p] = OWL._namespace+p;\n});\n\nconst Missed = {}; // singleton\nvar UNBOUNDED = -1;\n\nfunction extend (base) {\n  if (!base) base = {};\n  for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)\n    for (var name in arg)\n      base[name] = arg[name];\n  return base;\n}\n\n    function isTerm (t) {\n      return typeof t !== \"object\" || \"value\" in t && Object.keys(t).reduce((r, k) => {\n        return r === false ? r : [\"value\", \"type\", \"language\"].indexOf(k) !== -1;\n      }, true);\n    }\n\n  function isShapeRef (expr) {\n    return typeof expr === \"string\" // test for JSON-LD @ID\n  }\n  let isInclusion = isShapeRef;\n\nvar ShExUtil = {\n\n  SX: SX,\n  RDF: RDF,\n  version: function () {\n    return \"0.5.0\";\n  },\n\n  Visitor: function () {\n    // function expect (l, r) { var ls = JSON.stringify(l), rs = JSON.stringify(r); if (ls !== rs) throw Error(ls+\" !== \"+rs); }\n    var _ShExUtil = this;\n    function visitMap (map, val) {\n      var ret = {};\n      Object.keys(map).forEach(function (item) {\n        ret[item] = val(map[item]);\n      });\n      return ret;\n    }\n    var r = {\n      runtimeError: function (e) {\n        throw e;\n      },\n\n      visitSchema: function (schema) {\n        var ret = { type: \"Schema\" };\n        _ShExUtil._expect(schema, \"type\", \"Schema\");\n        this._maybeSet(schema, ret, \"Schema\",\n                       [\"@context\", \"prefixes\", \"base\", \"imports\", \"startActs\", \"start\", \"shapes\"],\n                       [\"_base\", \"_prefixes\", \"_index\", \"_sourceMap\"]\n                      );\n        return ret;\n      },\n\n      visitPrefixes: function (prefixes) {\n        return prefixes === undefined ?\n          undefined :\n          visitMap(prefixes, function (val) {\n            return val;\n          });\n      },\n\n      visitIRI: function (i) {\n        return i;\n      },\n\n      visitImports: function (imports) {\n        var _Visitor = this;\n        return imports.map(function (imp) {\n          return _Visitor.visitIRI(imp);\n        });\n      },\n\n      visitStartActs: function (startActs) {\n        var _Visitor = this;\n        return startActs === undefined ?\n          undefined :\n          startActs.map(function (act) {\n            return _Visitor.visitSemAct(act);\n          });\n      },\n      visitSemActs: function (semActs) {\n        var _Visitor = this;\n        if (semActs === undefined)\n          return undefined;\n        var ret = []\n        Object.keys(semActs).forEach(function (label) {\n          ret.push(_Visitor.visitSemAct(semActs[label], label));\n        });\n        return ret;\n      },\n      visitSemAct: function (semAct, label) {\n        var ret = { type: \"SemAct\" };\n        _ShExUtil._expect(semAct, \"type\", \"SemAct\");\n\n        this._maybeSet(semAct, ret, \"SemAct\",\n                       [\"name\", \"code\"]);\n        return ret;\n      },\n\n      visitShapes: function (shapes) {\n        var _Visitor = this;\n        if (shapes === undefined)\n          return undefined;\n        return shapes.map(\n          shapeExpr =>\n            _Visitor.visitShapeDecl(shapeExpr)\n        );\n      },\n\n      visitProductions999: function (productions) { // !! DELETE\n        var _Visitor = this;\n        if (productions === undefined)\n          return undefined;\n        var ret = {}\n        Object.keys(productions).forEach(function (label) {\n          ret[label] = _Visitor.visitExpression(productions[label], label);\n        });\n        return ret;\n      },\n\n      visitShapeDecl: function (decl, label) {\n        return decl.type === \"ShapeDecl\" ?\n          this._maybeSet(decl, { type: \"ShapeDecl\" }, \"ShapeDecl\",\n                         [\"id\", \"abstract\", \"restricts\", \"shapeExpr\"]) :\n          this.visitShapeExpr(decl, label);\n      },\n\n      visitShapeExpr: function (expr, label) {\n        if (isShapeRef(expr))\n          return this.visitShapeRef(expr)\n        var r =\n            expr.type === \"Shape\" ? this.visitShape(expr, label) :\n            expr.type === \"NodeConstraint\" ? this.visitNodeConstraint(expr, label) :\n            expr.type === \"ShapeAnd\" ? this.visitShapeAnd(expr, label) :\n            expr.type === \"ShapeOr\" ? this.visitShapeOr(expr, label) :\n            expr.type === \"ShapeNot\" ? this.visitShapeNot(expr, label) :\n            expr.type === \"ShapeExternal\" ? this.visitShapeExternal(expr) :\n            null;// if (expr.type === \"ShapeRef\") r = 0; // console.warn(\"visitShapeExpr:\", r);\n        if (r === null)\n          throw Error(\"unexpected shapeExpr type: \" + expr.type);\n        else\n          return r;\n      },\n\n      // _visitShapeGroup: visit a grouping expression (shapeAnd, shapeOr)\n      _visitShapeGroup: function (expr, label) {\n        this._testUnknownAttributes(expr, [\"id\", \"shapeExprs\"], expr.type, this.visitShapeNot)\n        var _Visitor = this;\n        var r = { type: expr.type };\n        if (\"id\" in expr)\n          r.id = expr.id;\n        r.shapeExprs = expr.shapeExprs.map(function (nested) {\n          return _Visitor.visitShapeExpr(nested, label);\n        });\n        return r;\n      },\n\n      // _visitShapeNot: visit negated shape\n      visitShapeNot: function (expr, label) {\n        this._testUnknownAttributes(expr, [\"id\", \"shapeExpr\"], \"ShapeNot\", this.visitShapeNot)\n        var r = { type: expr.type };\n        if (\"id\" in expr)\n          r.id = expr.id;\n        r.shapeExpr = this.visitShapeExpr(expr.shapeExpr, label);\n        return r;\n      },\n\n      // ### `visitNodeConstraint` deep-copies the structure of a shape\n      visitShape: function (shape, label) {\n        var ret = { type: \"Shape\" };\n        _ShExUtil._expect(shape, \"type\", \"Shape\");\n\n        this._maybeSet(shape, ret, \"Shape\",\n                       [ \"id\",\n                         \"abstract\", \"extends\",\n                         \"closed\",\n                         \"expression\", \"extra\", \"semActs\", \"annotations\"]);\n        return ret;\n      },\n\n      _visitShapeExprList: function (ext) {\n        var _Visitor = this;\n        return ext.map(function (t) {\n          return _Visitor.visitShapeExpr(t, undefined);\n        });\n      },\n\n      // ### `visitNodeConstraint` deep-copies the structure of a shape\n      visitNodeConstraint: function (shape, label) {\n        var ret = { type: \"NodeConstraint\" };\n        _ShExUtil._expect(shape, \"type\", \"NodeConstraint\");\n\n        this._maybeSet(shape, ret, \"NodeConstraint\",\n                       [ \"id\",\n                         // \"abstract\", \"extends\", \"restricts\", -- futureWork\n                         \"nodeKind\", \"datatype\", \"pattern\", \"flags\", \"length\",\n                         \"reference\", \"minlength\", \"maxlength\",\n                         \"mininclusive\", \"minexclusive\", \"maxinclusive\", \"maxexclusive\",\n                         \"totaldigits\", \"fractiondigits\", \"values\", \"annotations\", \"semActs\"]);\n        return ret;\n      },\n\n      visitShapeRef: function (reference) {\n        if (typeof reference !== \"string\") {\n          let ex = Exception(\"visitShapeRef expected a string, not \" + JSON.stringify(reference));\n          console.warn(ex);\n          throw ex;\n        }\n        return reference;\n      },\n\n      visitShapeExternal: function (expr) {\n        this._testUnknownAttributes(expr, [\"id\"], \"ShapeExternal\", this.visitShapeNot)\n        return extend(\"id\" in expr ? { id: expr.id } : {}, { type: \"ShapeExternal\" });\n      },\n\n      // _visitGroup: visit a grouping expression (someOf or eachOf)\n      _visitGroup: function (expr, type) {\n        var _Visitor = this;\n        var r = Object.assign(\n          // pre-declare an id so it sorts to the top\n          \"id\" in expr ? { id: null } : { },\n          { type: expr.type }\n        );\n        r.expressions = expr.expressions.map(function (nested) {\n          return _Visitor.visitExpression(nested);\n        });\n        return this._maybeSet(expr, r, \"expr\",\n                              [\"id\", \"min\", \"max\", \"onShapeExpression\", \"annotations\", \"semActs\"], [\"expressions\"]);\n      },\n\n      visitTripleConstraint: function (expr) {\n        return this._maybeSet(expr,\n                              Object.assign(\n                                // pre-declare an id so it sorts to the top\n                                \"id\" in expr ? { id: null } : { },\n                                { type: \"TripleConstraint\" }\n                              ),\n                              \"TripleConstraint\",\n                              [\"id\", \"inverse\", \"predicate\", \"valueExpr\",\n                               \"min\", \"max\", \"onShapeExpression\", \"annotations\", \"semActs\"])\n      },\n\n      visitExpression: function (expr) {\n        if (typeof expr === \"string\")\n          return this.visitInclusion(expr);\n        var r = expr.type === \"TripleConstraint\" ? this.visitTripleConstraint(expr) :\n          expr.type === \"OneOf\" ? this.visitOneOf(expr) :\n          expr.type === \"EachOf\" ? this.visitEachOf(expr) :\n          null;\n        if (r === null)\n          throw Error(\"unexpected expression type: \" + expr.type);\n        else\n          return r;\n      },\n\n      visitValues: function (values) {\n        var _Visitor = this;\n        return values.map(function (t) {\n          return isTerm(t) || t.type === \"Language\" ?\n            t :\n            _Visitor.visitStemRange(t);\n        });\n      },\n\n      visitStemRange: function (t) {\n        var _Visitor = this; // console.log(Error(t.type).stack);\n        // _ShExUtil._expect(t, \"type\", \"IriStemRange\");\n              if (!(\"type\" in t))\n                _Visitor.runtimeError(Error(\"expected \"+JSON.stringify(t)+\" to have a 'type' attribute.\"));\n        var stemRangeTypes = [\"IriStem\", \"LiteralStem\", \"LanguageStem\", \"IriStemRange\", \"LiteralStemRange\", \"LanguageStemRange\"];\n              if (stemRangeTypes.indexOf(t.type) === -1)\n                _Visitor.runtimeError(Error(\"expected type attribute '\"+t.type+\"' to be in '\"+stemRangeTypes+\"'.\"));\n        var stem;\n        if (isTerm(t)) {\n          _ShExUtil._expect(t.stem, \"type\", \"Wildcard\");\n          stem = { type: t.type, stem: { type: \"Wildcard\" } };\n        } else {\n          stem = { type: t.type, stem: t.stem };\n        }\n        if (t.exclusions) {\n          stem.exclusions = t.exclusions.map(function (c) {\n            return _Visitor.visitExclusion(c);\n          });\n        }\n        return stem;\n      },\n\n      visitExclusion: function (c) {\n        if (!isTerm(c)) {\n          // _ShExUtil._expect(c, \"type\", \"IriStem\");\n                    if (!(\"type\" in c))\n                      _Visitor.runtimeError(Error(\"expected \"+JSON.stringify(c)+\" to have a 'type' attribute.\"));\n                    var stemTypes = [\"IriStem\", \"LiteralStem\", \"LanguageStem\"];\n                    if (stemTypes.indexOf(c.type) === -1)\n                      _Visitor.runtimeError(Error(\"expected type attribute '\"+c.type+\"' to be in '\"+stemTypes+\"'.\"));\n          return { type: c.type, stem: c.stem };\n        } else {\n          return c;\n        }\n      },\n\n      visitInclusion: function (inclusion) {\n        if (typeof inclusion !== \"string\") {\n          let ex = Exception(\"visitInclusion expected a string, not \" + JSON.stringify(inclusion));\n          console.warn(ex);\n          throw ex;\n        }\n        return inclusion;\n      },\n\n      _maybeSet: function (obj, ret, context, members, ignore) {\n        var _Visitor = this;\n        this._testUnknownAttributes(obj, ignore ? members.concat(ignore) : members, context, this._maybeSet)\n        members.forEach(function (member) {\n          var methodName = \"visit\" + member.charAt(0).toUpperCase() + member.slice(1);\n          if (member in obj) {\n            var f = _Visitor[methodName];\n            if (typeof f !== \"function\") {\n              throw Error(methodName + \" not found in Visitor\");\n            }\n            var t = f.call(_Visitor, obj[member]);\n            if (t !== undefined) {\n              ret[member] = t;\n            }\n          }\n        });\n        return ret;\n      },\n      _visitValue: function (v) {\n        return v;\n      },\n      _visitList: function (l) {\n        return l.slice();\n      },\n      _testUnknownAttributes: function (obj, expected, context, captureFrame) {\n        var unknownMembers = Object.keys(obj).reduce(function (ret, k) {\n          return k !== \"type\" && expected.indexOf(k) === -1 ? ret.concat(k) : ret;\n        }, []);\n        if (unknownMembers.length > 0) {\n          var e = Error(\"unknown propert\" + (unknownMembers.length > 1 ? \"ies\" : \"y\") + \": \" +\n                        unknownMembers.map(function (p) {\n                          return \"\\\"\" + p + \"\\\"\";\n                        }).join(\",\") +\n                        \" in \" + context + \": \" + JSON.stringify(obj));\n          Error.captureStackTrace(e, captureFrame);\n          throw e;\n        }\n      }\n\n    };\n    r.visitBase = r.visitStart = r.visitVirtual = r.visitClosed = r[\"visit@context\"] = r._visitValue;\n    r.visitRestricts = r.visitExtends = r._visitShapeExprList;\n    r.visitExtra = r.visitAnnotations = r._visitList;\n    r.visitAbstract = r.visitInverse = r.visitPredicate = r._visitValue;\n    r.visitName = r.visitId = r.visitCode = r.visitMin = r.visitMax = r._visitValue;\n\n    r.visitType = r.visitNodeKind = r.visitDatatype = r.visitPattern = r.visitFlags = r.visitLength = r.visitMinlength = r.visitMaxlength = r.visitMininclusive = r.visitMinexclusive = r.visitMaxinclusive = r.visitMaxexclusive = r.visitTotaldigits = r.visitFractiondigits = r._visitValue;\n    r.visitOneOf = r.visitEachOf = r._visitGroup;\n    r.visitShapeAnd = r.visitShapeOr = r._visitShapeGroup;\n    r.visitInclude = r._visitValue;\n    r.visitValueExpr = r.visitOnShapeExpression = r.visitShapeExpr;\n    return r;\n  },\n\n  // tests\n  // console.warn(\"HERE:\", ShExJtoAS({\"type\":\"Schema\",\"shapes\":[{\"id\":\"http://all.example/S1\",\"type\":\"Shape\",\"expression\":\n  //  { \"id\":\"http://all.example/S1e\", \"type\":\"EachOf\",\"expressions\":[ ] },\n  // // { \"id\":\"http://all.example/S1e\",\"type\":\"TripleConstraint\",\"predicate\":\"http://all.example/p1\"},\n  // \"extra\":[\"http://all.example/p3\",\"http://all.example/p1\",\"http://all.example/p2\"]\n  // }]}).shapes['http://all.example/S1']);\n\n  ShExJtoAS: function (schema) {\n    var _ShExUtil = this;\n    schema._prefixes = schema.prefixes || {  };\n    schema._index = this.index(schema);\n    return schema;\n  },\n\n  AStoShExJ: function (schema, abbreviate) {\n    schema[\"@context\"] = schema[\"@context\"] || \"http://www.w3.org/ns/shex.jsonld\";\n    return schema;\n  },\n\n  ShExRVisitor: function (knownShapeExprs) {\n    var v = ShExUtil.Visitor();\n    var knownExpressions = {};\n    var oldVisitShapeExpr = v.visitShapeExpr,\n        oldVisitValueExpr = v.visitValueExpr,\n        oldVisitExpression = v.visitExpression;\n    v.keepShapeExpr = oldVisitShapeExpr;\n\n    v.visitShapeExpr = v.visitValueExpr = function (expr, label) {\n      if (typeof expr === \"string\")\n        return expr;\n      if (\"id\" in expr) {\n        if (knownShapeExprs.indexOf(expr.id) !== -1 || Object.keys(expr).length === 1)\n          return expr.id;\n        delete expr.id;\n      }\n      return oldVisitShapeExpr.call(this, expr, label);\n    };\n\n    v.visitExpression = function (expr) {\n      if (typeof expr === \"string\") // shortcut for recursive references e.g. 1Include1 and ../doc/TODO.md\n        return expr;\n      if (\"id\" in expr) {\n        if (expr.id in knownExpressions) {\n          knownExpressions[expr.id].refCount++;\n          return expr.id;\n        }\n      }\n      var ret = oldVisitExpression.call(this, expr);\n      // Everything from RDF has an ID, usually a BNode.\n      knownExpressions[expr.id] = { refCount: 1, expr: ret };\n      return ret;\n    }\n\n    v.cleanIds = function () {\n      for (var k in knownExpressions) {\n        var known = knownExpressions[k];\n        if (known.refCount === 1 && RdfTerm.isBlank(known.expr.id))\n          delete known.expr.id;\n      };\n    }\n\n    return v;\n  },\n\n\n  // tests\n  // var shexr = ShExUtil.ShExRtoShExJ({ \"type\": \"Schema\", \"shapes\": [\n  //   { \"id\": \"http://a.example/S1\", \"type\": \"Shape\",\n  //     \"expression\": {\n  //       \"type\": \"TripleConstraint\", \"predicate\": \"http://a.example/p1\",\n  //       \"valueExpr\": {\n  //         \"type\": \"ShapeAnd\", \"shapeExprs\": [\n  //           { \"type\": \"NodeConstraint\", \"nodeKind\": \"bnode\" },\n  //           { \"id\": \"http://a.example/S2\", \"type\": \"Shape\",\n  //             \"expression\": {\n  //               \"type\": \"TripleConstraint\", \"predicate\": \"http://a.example/p2\" } }\n  //           //            \"http://a.example/S2\"\n  //         ] } } },\n  //   { \"id\": \"http://a.example/S2\", \"type\": \"Shape\",\n  //     \"expression\": {\n  //       \"type\": \"TripleConstraint\", \"predicate\": \"http://a.example/p2\" } }\n  // ] });\n  // console.warn(\"HERE:\", shexr.shapes[0].expression.valueExpr);\n  // ShExUtil.ShExJtoAS(shexr);\n  // console.warn(\"THERE:\", shexr.shapes[\"http://a.example/S1\"].expression.valueExpr);\n\n\n  ShExRtoShExJ: function (schema) {\n    // compile a list of known shapeExprs\n    var knownShapeExprs = [];\n    if (\"shapes\" in schema)\n      knownShapeExprs = knownShapeExprs.concat(schema.shapes.map(sh => { return sh.id; }));\n\n    // normalize references to those shapeExprs\n    var v = this.ShExRVisitor(knownShapeExprs);\n    if (\"start\" in schema)\n      schema.start = v.visitShapeExpr(schema.start);\n    if (\"shapes\" in schema)\n      schema.shapes = schema.shapes.map(sh => {\n        return sh.type === SX.ShapeDecl ?\n          {\n            type: \"ShapeDecl\",\n            id: sh.id,\n            abstract: sh.abstract,\n            shapeExpr: v.visitShapeExpr(sh.shapeExpr)\n          } :\n          v.keepShapeExpr(sh);\n      });\n\n    // remove extraneous BNode IDs\n    v.cleanIds();\n    return schema;\n  },\n\n  valGrep: function (obj, type, f) {\n    var _ShExUtil = this;\n    var ret = [];\n    for (var i in obj) {\n      var o = obj[i];\n      if (typeof o === \"object\") {\n        if (\"type\" in o && o.type === type)\n          ret.push(f(o));\n        ret.push.apply(ret, _ShExUtil.valGrep(o, type, f));\n      }\n    }\n    return ret;\n  },\n\n  n3jsToTurtle: function (res) {\n    function termToLex (node) {\n      return typeof node === \"object\" ? (\"\\\"\" + node.value + \"\\\"\" + (\n        \"type\" in node ? \"^^<\" + node.type + \">\" :\n          \"language\" in node ? \"@\" + node.language :\n          \"\"\n      )) :\n      RdfTerm.isIRI(node) ? \"<\" + node + \">\" :\n      RdfTerm.isBlank(node) ? node :\n      \"???\";\n    }\n    return this.valGrep(res, \"TestedTriple\", function (t) {\n      return [\"subject\", \"predicate\", \"object\"].map(k => {\n        return termToLex(t[k]);\n      }).join(\" \")+\" .\";\n    });\n  },\n\n  valToN3js: function (res) {\n    return this.valGrep(res, \"TestedTriple\", function (t) {\n      var ret = JSON.parse(JSON.stringify(t));\n      if (typeof t.object === \"object\")\n        ret.object = (\"\\\"\" + t.object.value + \"\\\"\" + (\n          \"type\" in t.object ? \"^^\" + t.object.type :\n            \"language\" in t.object ? \"@\" + t.object.language :\n            \"\"\n        ));\n      return ret;\n    });\n  },\n\n  n3jsToTurtle: function (n3js) {\n    function termToLex (node) {\n      if (RdfTerm.isIRI(node))\n        return \"<\" + node + \">\";\n      if (RdfTerm.isBlank(node))\n        return node;\n      var t = RdfTerm.getLiteralType(node);\n      if (t && t !== \"http://www.w3.org/2001/XMLSchema#string\")\n        return \"\\\"\" + RdfTerm.getLiteralValue(node) + \"\\\"\" +\n        \"^^<\" + t + \">\";\n      return node;\n    }\n    return n3js.map(function (t) {\n      return [\"subject\", \"predicate\", \"object\"].map(k => {\n        return termToLex(t[k]);\n      }).join(\" \")+\" .\";\n    });\n  },\n\n  /** create indexes for schema\n   */\n  index: function (schema) {\n    let index = {\n      shapeExprs: new Map(),\n      tripleExprs: new Map()\n    };\n    let v = ShExUtil.Visitor();\n\n    let oldVisitExpression = v.visitExpression;\n    v.visitExpression = function (expression) {\n      if (typeof expression === \"object\" && \"id\" in expression)\n        index.tripleExprs[expression.id] = expression;\n      return oldVisitExpression.call(v, expression);\n    };\n\n    let oldVisitShapeExpr = v.visitShapeExpr;\n    v.visitShapeExpr = v.visitValueExpr = function (shapeExpr, label) {\n      if (typeof shapeExpr === \"object\" && \"id\" in shapeExpr)\n        index.shapeExprs[shapeExpr.id] = shapeExpr;\n      return oldVisitShapeExpr.call(v, shapeExpr, label);\n    };\n\n    let oldVisitShapeDecl = v.visitShapeDecl;\n    v.visitShapeDecl = v.visitValueExpr = function (shapeExpr, label) {\n      if (typeof shapeExpr === \"object\" && \"id\" in shapeExpr)\n        index.shapeExprs[shapeExpr.id] = shapeExpr;\n      return oldVisitShapeDecl.call(v, shapeExpr, label);\n    };\n\n    v.visitSchema(schema);\n    return index;\n  },\n\n  /* canonicalize: move all tripleExpression references to their first expression.\n   *\n   */\n  canonicalize: function (schema, trimIRI) {\n    var ret = JSON.parse(JSON.stringify(schema));\n    ret[\"@context\"] = ret[\"@context\"] || \"http://www.w3.org/ns/shex.jsonld\";\n    delete ret._prefixes;\n    delete ret._base;\n    let index = ret._index || this.index(schema);\n    delete ret._index;\n    let sourceMap = ret._sourceMap;\n    delete ret._sourceMap;\n    // Don't delete ret.productions as it's part of the AS.\n    var v = ShExUtil.Visitor();\n    var knownExpressions = [];\n    var oldVisitInclusion = v.visitInclusion, oldVisitExpression = v.visitExpression;\n    v.visitInclusion = function (inclusion) {\n      if (knownExpressions.indexOf(inclusion) === -1 &&\n          inclusion in index.tripleExprs) {\n        knownExpressions.push(inclusion)\n        return oldVisitExpression.call(v, index.tripleExprs[inclusion]);\n      }\n      return oldVisitInclusion.call(v, inclusion);\n    };\n    v.visitExpression = function (expression) {\n      if (typeof expression === \"object\" && \"id\" in expression) {\n        if (knownExpressions.indexOf(expression.id) === -1) {\n          knownExpressions.push(expression.id)\n          return oldVisitExpression.call(v, index.tripleExprs[expression.id]);\n        }\n        return expression.id; // Inclusion\n      }\n      return oldVisitExpression.call(v, expression);\n    };\n    if (trimIRI) {\n      v.visitIRI = function (i) {\n        return i.replace(trimIRI, \"\");\n      }\n      if (\"imports\" in ret)\n        ret.imports = v.visitImports(ret.imports);\n    }\n    if (\"shapes\" in ret) {\n      ret.shapes = Object.keys(index.shapeExprs).sort().map(k => {\n        if (\"extra\" in index.shapeExprs[k])\n          index.shapeExprs[k].extra.sort();\n        return v.visitShapeDecl(index.shapeExprs[k]);\n      });\n    }\n    return ret;\n  },\n\n  BiDiClosure: function () {\n    return {\n      needs: {},\n      neededBy: {},\n      inCycle: [],\n      test: function () {\n        function expect (l, r) { var ls = JSON.stringify(l), rs = JSON.stringify(r); if (ls !== rs) throw Error(ls+\" !== \"+rs); }\n        // this.add(1, 2); expect(this.needs, { 1:[2]                     }); expect(this.neededBy, { 2:[1]                     });\n        // this.add(3, 4); expect(this.needs, { 1:[2], 3:[4]              }); expect(this.neededBy, { 2:[1], 4:[3]              });\n        // this.add(2, 3); expect(this.needs, { 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 2:[1], 3:[2,1], 4:[3,2,1] });\n\n        this.add(2, 3); expect(this.needs, { 2:[3]                     }); expect(this.neededBy, { 3:[2]                     });\n        this.add(1, 2); expect(this.needs, { 1:[2,3], 2:[3]            }); expect(this.neededBy, { 3:[2,1], 2:[1]            });\n        this.add(1, 3); expect(this.needs, { 1:[2,3], 2:[3]            }); expect(this.neededBy, { 3:[2,1], 2:[1]            });\n        this.add(3, 4); expect(this.needs, { 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 3:[2,1], 2:[1], 4:[3,2,1] });\n        this.add(6, 7); expect(this.needs, { 6:[7]                    , 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6]                    , 3:[2,1], 2:[1], 4:[3,2,1] });\n        this.add(5, 6); expect(this.needs, { 5:[6,7], 6:[7]           , 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6,5], 6:[5]           , 3:[2,1], 2:[1], 4:[3,2,1] });\n        this.add(5, 7); expect(this.needs, { 5:[6,7], 6:[7]           , 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6,5], 6:[5]           , 3:[2,1], 2:[1], 4:[3,2,1] });\n        this.add(7, 8); expect(this.needs, { 5:[6,7,8], 6:[7,8], 7:[8], 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6,5], 6:[5], 8:[7,6,5], 3:[2,1], 2:[1], 4:[3,2,1] });\n        this.add(4, 5);\n        expect(this.needs,    { 1:[2,3,4,5,6,7,8], 2:[3,4,5,6,7,8], 3:[4,5,6,7,8], 4:[5,6,7,8], 5:[6,7,8], 6:[7,8], 7:[8] });\n        expect(this.neededBy, { 2:[1], 3:[2,1], 4:[3,2,1], 5:[4,3,2,1], 6:[5,4,3,2,1], 7:[6,5,4,3,2,1], 8:[7,6,5,4,3,2,1] });\n      },\n      add: function (needer, needie, negated) {\n        var r = this;\n        if (!(needer in r.needs))\n          r.needs[needer] = [];\n        if (!(needie in r.neededBy))\n          r.neededBy[needie] = [];\n\n        // // [].concat.apply(r.needs[needer], [needie], r.needs[needie]). emitted only last element\n        r.needs[needer] = r.needs[needer].concat([needie], r.needs[needie]).\n          filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; });\n        // // [].concat.apply(r.neededBy[needie], [needer], r.neededBy[needer]). emitted only last element\n        r.neededBy[needie] = r.neededBy[needie].concat([needer], r.neededBy[needer]).\n          filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; });\n\n        if (needer in this.neededBy) this.neededBy[needer].forEach(function (e) {\n          r.needs[e] = r.needs[e].concat([needie], r.needs[needie]).\n            filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; });\n        });\n\n        if (needie in this.needs) this.needs[needie].forEach(function (e) {\n          r.neededBy[e] = r.neededBy[e].concat([needer], r.neededBy[needer]).\n            filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; })\n        });\n        // this.neededBy[needie].push(needer);\n\n        if (r.needs[needer].indexOf(needer) !== -1)\n          r.inCycle = r.inCycle.concat(r.needs[needer]);\n      },\n      trim: function () {\n        function _trim (a) {\n          // filter(function (el, ord, l) { return l.indexOf(el) === ord; })\n          for (var i = a.length-1; i > -1; --i)\n            if (a.indexOf(a[i]) < i)\n              a.splice(i, i+1);\n        }\n        for (k in this.needs)\n          _trim(this.needs[k]);\n        for (k in this.neededBy)\n          _trim(this.neededBy[k]);\n      },\n      foundIn: {},\n      addIn: function (tripleExpr, shapeExpr) {\n        this.foundIn[tripleExpr] = shapeExpr;\n      }\n    }\n  },\n  /** @@TODO tests\n   * options:\n   *   no: don't do anything; just report nestable shapes\n   *   transform: function to change shape labels\n   */\n  nestShapes: function (schema, options = {}) {\n    var _ShExUtil = this;\n    const index = schema._index || this.index(schema);\n    if (!('no' in options)) { options.no = false }\n\n    let shapeLabels = Object.keys(index.shapeExprs || [])\n    let shapeReferences = {}\n    shapeLabels.forEach(label => {\n      let shape = index.shapeExprs[label]\n      noteReference(label, null) // just note the shape so we have a complete list at the end\n      shape = _ShExUtil.skipDecl(shape)\n      if (shape.type === 'Shape') {\n        if ('extends' in shape) {\n          shape.extends.forEach(\n            parent => {\n              if (parent.type === 'ShapeRef') { // !!! assumes simple reference, not e.g. AND\n                noteReference(parent.reference, shape)\n              }\n            }\n          )\n        }\n        if ('expression' in shape) {\n          (_ShExUtil.simpleTripleConstraints(shape) || []).forEach(tc => {\n            let target = _ShExUtil.getValueType(tc.valueExpr, true)\n            noteReference(target, {type: 'tc', shapeLabel: label, tc: tc})\n          })\n        }\n      } else if (shape.type === 'NodeConstraint') {\n        // can't have any refs to other shapes\n      } else {\n        throw Error('nestShapes currently only supports Shapes and NodeConstraints')\n      }\n    })\n    let nestables = Object.keys(shapeReferences).filter(\n      label => shapeReferences[label].length === 1\n        && shapeReferences[label][0].type === 'tc' // no inheritance support yet\n        && _ShExUtil.skipDecl(index.shapeExprs[label]).type === 'Shape' // Don't nest e.g. valuesets for now\n    ).filter(\n      nestable => !('noNestPattern' in options)\n        || !nestable.match(RegExp(options.noNestPattern))\n    ).reduce((acc, label) => {\n      acc[label] = {\n        referrer: shapeReferences[label][0].shapeLabel,\n        predicate: shapeReferences[label][0].tc.predicate\n      }\n      return acc\n    }, {})\n    if (!options.no) {\n      let oldToNew = {}\n\n      if (options.rename) {\n      if (!('transform' in options)) {\n        options.transform = (function () {\n          let map = shapeLabels.reduce((acc, k, idx) => {\n            acc[k] = '_:transformed' + idx\n            return acc\n          }, {})\n          return function (id, shapeExpr) {\n            return map[id]\n          }\n        })()\n      }\n      Object.keys(nestables).forEach(oldName => {\n        let shapeExpr = index.shapeExprs[oldName]\n        let newName = options.transform(oldName, shapeExpr)\n        oldToNew[oldName] = newName\n        shapeLabels[shapeLabels.indexOf(oldName)] = newName\n        nestables[newName] = nestables[oldName]\n        nestables[newName].was = oldName\n        delete nestables[oldName]\n        index.shapeExprs[newName] = index.shapeExprs[oldName]\n        delete index.shapeExprs[oldName]\n        if (shapeReferences[oldName].length !== 1) { throw Error('assertion: ' + oldName + ' doesn\\'t have one reference: [' + shapeReferences[oldName] + ']') }\n        let ref = shapeReferences[oldName][0]\n        if (ref.type === 'tc') {\n          if (ref.tc.valueExpr.type === 'ShapeRef') {\n            ref.tc.valueExpr.reference = newName\n          } else {\n            throw Error('assertion: rename not implemented for TripleConstraint expr: ' + ref.tc.valueExpr)\n            // _ShExUtil.setValueType(ref, newName)\n          }\n        } else if (ref.type === 'Shape') {\n          throw Error('assertion: rename not implemented for Shape: ' + ref)\n        } else {\n          throw Error('assertion: ' + ref.type + ' not TripleConstraint or Shape')\n        }\n      })\n\n      Object.keys(nestables).forEach(k => {\n        let n = nestables[k]\n        if (n.referrer in oldToNew) {\n          n.newReferrer = oldToNew[n.referrer]\n        }\n      })\n\n      // Restore old order for more concise diffs.\n      let shapesCopy = {}\n      shapeLabels.forEach(label => shapesCopy[label] = index.shapeExprs[label])\n      index.shapeExprs = shapesCopy\n      } else {\n        Object.keys(nestables).forEach(oldName => {\n          shapeReferences[oldName][0].tc.valueExpr = index.shapeExprs[oldName].shapeExpr\n          delete index.shapeExprs[oldName]\n        })\n      }\n    }\n    // console.dir(nestables)\n    // console.dir(shapeReferences)\n    return nestables\n\n    function noteReference (id, reference) {\n      if (!(id in shapeReferences)) {\n        shapeReferences[id] = []\n      }\n      if (reference) {\n        shapeReferences[id].push(reference)\n      }\n    }\n  },\n\n  /** @@TODO tests\n   *\n   */\n  getPredicateUsage: function (schema, untyped = {}) {\n    var _ShExUtil = this;\n\n    // populate shapeHierarchy\n    let shapeHierarchy = Hierarchy.create()\n    Object.keys(schema.shapes).forEach(label => {\n      let shapeExpr = _ShExUtil.skipDecl(schema.shapes[label])\n      if (shapeExpr.type === 'Shape') {\n        (shapeExpr.extends || []).forEach(\n          superShape => shapeHierarchy.add(superShape.reference, label)\n        )\n      }\n    })\n    Object.keys(schema.shapes).forEach(label => {\n      if (!(label in shapeHierarchy.parents))\n        shapeHierarchy.parents[label] = []\n    })\n\n    let predicates = { } // IRI->{ uses: [shapeLabel], commonType: shapeExpr }\n    Object.keys(schema.shapes).forEach(shapeLabel => {\n      let shapeExpr = _ShExUtil.skipDecl(schema.shapes[shapeLabel])\n      if (shapeExpr.type === 'Shape') {\n        let tcs = _ShExUtil.simpleTripleConstraints(shapeExpr) || []\n        tcs.forEach(tc => {\n          let newType = _ShExUtil.getValueType(tc.valueExpr)\n          if (!(tc.predicate in predicates)) {\n            predicates[tc.predicate] = {\n              uses: [shapeLabel],\n              commonType: newType,\n              polymorphic: false\n            }\n            if (typeof newType === 'object') {\n              untyped[tc.predicate] = {\n                shapeLabel,\n                predicate: tc.predicate,\n                newType,\n                references: []\n              }\n            }\n          } else {\n            predicates[tc.predicate].uses.push(shapeLabel)\n            let curType = predicates[tc.predicate].commonType\n            if (typeof curType === 'object' || curType === null) {\n              // another use of a predicate with no commonType\n              // console.warn(`${shapeLabel} ${tc.predicate}:${newType} uses untypable predicate`)\n              untyped[tc.predicate].references.push({ shapeLabel, newType })\n            } else if (typeof newType === 'object') {\n              // first use of a predicate with no detectable commonType\n              predicates[tc.predicate].commonType = null\n              untyped[tc.predicate] = {\n                shapeLabel,\n                predicate: tc.predicate,\n                curType,\n                newType,\n                references: []\n              }\n            } else if (curType === newType) {\n              ; // same type again\n            } else if (shapeHierarchy.parents[curType] && shapeHierarchy.parents[curType].indexOf(newType) !== -1) {\n              predicates[tc.predicate].polymorphic = true; // already covered by current commonType\n            } else {\n              let idx = shapeHierarchy.parents[newType] ? shapeHierarchy.parents[newType].indexOf(curType) : -1\n              if (idx === -1) {\n                let intersection = shapeHierarchy.parents[curType]\n                    ? shapeHierarchy.parents[curType].filter(\n                      lab => -1 !== shapeHierarchy.parents[newType].indexOf(lab)\n                    )\n                    : []\n                if (intersection.length === 0) {\n                  untyped[tc.predicate] = {\n                    shapeLabel,\n                    predicate: tc.predicate,\n                    curType,\n                    newType,\n                    references: []\n                  }\n                  // console.warn(`${shapeLabel} ${tc.predicate} : ${newType} isn\\'t related to ${curType}`)\n                  predicates[tc.predicate].commonType = null\n                } else {\n                  predicates[tc.predicate].commonType = intersection[0]\n                  predicates[tc.predicate].polymorphic = true\n                }\n              } else {\n                predicates[tc.predicate].commonType = shapeHierarchy.parents[newType][idx]\n                predicates[tc.predicate].polymorphic = true\n              }\n            }\n          }\n        })\n      }\n    })\n    return predicates\n  },\n\n  /** @@TODO tests\n   *\n   */\n  simpleTripleConstraints: function (shape) {\n    if (!('expression' in shape)) {\n      return []\n    }\n    if (shape.expression.type === 'TripleConstraint') {\n      return [ shape.expression ]\n    }\n    if (shape.expression.type === 'EachOf' &&\n        !(shape.expression.expressions.find(\n          expr => expr.type !== 'TripleConstraint'\n        ))) {\n          return shape.expression.expressions\n        }\n    throw Error('can\\'t (yet) express ' + JSON.stringify(shape))\n  },\n\n  skipDecl: function (shapeExpr) {\n    return shapeExpr.type === 'ShapeDecl' ? shapeExpr.shapeExpr : shapeExpr\n  },\n\n  getValueType: function (valueExpr) {\n    if (typeof valueExpr === 'string') { return valueExpr }\n    if (valueExpr.reference) { return valueExpr.reference }\n    if (valueExpr.nodeKind === 'iri') { return OWL.Thing } // !! push this test to callers\n    if (valueExpr.datatype) { return valueExpr.datatype }\n    // if (valueExpr.extends && valueExpr.extends.length === 1) { return valueExpr.extends[0] }\n    return valueExpr // throw Error('no value type for ' + JSON.stringify(valueExpr))\n  },\n\n  /** getDependencies: find which shappes depend on other shapes by inheritance\n   * or inclusion.\n   * TODO: rewrite in terms of Visitor.\n   */\n  getDependencies: function (schema, ret) {\n    ret = ret || this.BiDiClosure();\n    (schema.shapes || []).forEach(function (shape) {\n      function _walkShapeExpression (shapeExpr, negated) {\n        if (typeof shapeExpr === \"string\") { // ShapeRef\n          ret.add(shape.id, shapeExpr);\n        } else if (shapeExpr.type === \"ShapeOr\" || shapeExpr.type === \"ShapeAnd\") {\n          shapeExpr.shapeExprs.forEach(function (expr) {\n            _walkShapeExpression(expr, negated);\n          });\n        } else if (shapeExpr.type === \"ShapeNot\") {\n          _walkShapeExpression(shapeExpr.shapeExpr, negated ^ 1); // !!! test negation\n        } else if (shapeExpr.type === \"Shape\") {\n          _walkShape(shapeExpr, negated);\n        } else if (shapeExpr.type === \"NodeConstraint\") {\n          // no impact on dependencies\n        } else if (shapeExpr.type === \"ShapeExternal\") {\n        } else\n          throw Error(\"expected Shape{And,Or,Ref,External} or NodeConstraint in \" + JSON.stringify(shapeExpr));\n      }\n      \n      function _walkShape (shape, negated) {\n        function _walkTripleExpression (tripleExpr, negated) {\n          function _exprGroup (exprs, negated) {\n            exprs.forEach(function (nested) {\n              _walkTripleExpression(nested, negated) // ?? negation allowed?\n            });\n          }\n\n          function _walkTripleConstraint (tc, negated) {\n            if (tc.valueExpr)\n              _walkShapeExpression(tc.valueExpr, negated);\n            if (negated && ret.inCycle.indexOf(shape.id) !== -1) // illDefined/negatedRefCycle.err\n              throw Error(\"Structural error: \" + shape.id + \" appears in negated cycle\");\n          }\n\n          if (typeof tripleExpr === \"string\") { // Inclusion\n            ret.add(shape.id, tripleExpr);\n          } else {\n            if (\"id\" in tripleExpr)\n              ret.addIn(tripleExpr.id, shape.id)\n            if (tripleExpr.type === \"TripleConstraint\") {\n              _walkTripleConstraint(tripleExpr, negated);\n            } else if (tripleExpr.type === \"OneOf\" || tripleExpr.type === \"EachOf\") {\n              _exprGroup(tripleExpr.expressions);\n            } else {\n              throw Error(\"expected {TripleConstraint,OneOf,EachOf,Inclusion} in \" + tripleExpr);\n            }\n          }\n        }\n\n        ([\"extends\", \"restricts\"]).forEach(attr => {\n        if (shape[attr] && shape[attr].length > 0)\n          shape[attr].forEach(function (i) {\n            ret.add(shape.id, i);\n          });\n        })\n        if (shape.expression)\n          _walkTripleExpression(shape.expression, negated);\n      }\n      if (shape.type === \"ShapeDecl\")\n        shape = shape.shapeExpr;\n      _walkShapeExpression(shape, 0); // 0 means false for bitwise XOR\n    });\n    return ret;\n  },\n\n  /** partition: create subset of a schema with only desired shapes and\n   * their dependencies.\n   *\n   * @schema: input schema\n   * @partition: shape name or array of desired shape names\n   * @deps: (optional) dependency tree from getDependencies.\n   *        map(shapeLabel -> [shapeLabel])\n   */\n  partition: function (schema, includes, deps, cantFind) {\n    const inputIndex = schema._index || this.index(schema)\n    const outputIndex = { shapeExprs: new Map(), tripleExprs: new Map() };\n    includes = includes instanceof Array ? includes : [includes];\n\n    // build dependency tree if not passed one\n    deps = deps || this.getDependencies(schema);\n    cantFind = cantFind || function (what, why) {\n      throw new Error(\"Error: can't find shape \" +\n                      (why ?\n                       why + \" dependency \" + what :\n                       what));\n    };\n    var partition = {};\n    for (var k in schema)\n      partition[k] = k === \"shapes\" ? [] : schema[k];\n    includes.forEach(function (i) {\n      if (i in outputIndex.shapeExprs) {\n        // already got it.\n      } else if (i in inputIndex.shapeExprs) {\n        const adding = inputIndex.shapeExprs[i];\n        partition.shapes.push(adding);\n        outputIndex.shapeExprs[adding.id] = adding;\n        if (i in deps.needs)\n          deps.needs[i].forEach(function (n) {\n            // Turn any needed TE into an SE.\n            if (n in deps.foundIn)\n              n = deps.foundIn[n];\n\n            if (n in outputIndex.shapeExprs) {\n            } else if (n in inputIndex.shapeExprs) {\n              const needed = inputIndex.shapeExprs[n];\n              partition.shapes.push(needed);\n              outputIndex.shapeExprs[needed.id] = needed;\n            } else\n              cantFind(n, i);\n          });\n      } else {\n        cantFind(i, \"supplied\");\n      }\n    });\n    return partition;\n  },\n\n\n  /** @@TODO flatten: return copy of input schema with all shape and value class\n   * references substituted by a copy of their referent.\n   *\n   * @schema: input schema\n   */\n  flatten: function (schema, deps, cantFind) {\n    var v = this.Visitor();\n    return v.visitSchema(schema);\n  },\n\n  // @@ put predicateUsage here\n\n  emptySchema: function () {\n    return {\n      type: \"Schema\"\n    };\n  },\n  merge: function (left, right, overwrite, inPlace) {\n    var ret = inPlace ? left : this.emptySchema();\n\n    function mergeArray (attr) {\n      Object.keys(left[attr] || {}).forEach(function (key) {\n        if (!(attr in ret))\n          ret[attr] = {};\n        ret[attr][key] = left[attr][key];\n      });\n      Object.keys(right[attr] || {}).forEach(function (key) {\n        if (!(attr  in left) || !(key in left[attr]) || overwrite) {\n          if (!(attr in ret))\n            ret[attr] = {};\n          ret[attr][key] = right[attr][key];\n        }\n      });\n    }\n\n    function mergeMap (attr) {\n      (left[attr] || new Map()).forEach(function (value, key, map) {\n        if (!(attr in ret))\n          ret[attr] = new Map();\n        ret[attr].set(key, left[attr].get(key));\n      });\n      (right[attr] || new Map()).forEach(function (value, key, map) {\n        if (!(attr  in left) || !(left[attr].has(key)) || overwrite) {\n          if (!(attr in ret))\n            ret[attr] = new Map();\n          ret[attr].set(key, right[attr].get(key));\n        }\n      });\n    }\n\n    // base\n    if (\"_base\" in left)\n      ret._base = left._base;\n    if (\"_base\" in right)\n      if (!(\"_base\" in left) || overwrite)\n        ret._base = right._base;\n\n    mergeArray(\"_prefixes\");\n\n    mergeMap(\"_sourceMap\");\n\n    if (\"imports\" in right)\n      if (!(\"imports\" in left) || overwrite)\n        ret.imports = right.imports;\n\n    // startActs\n    if (\"startActs\" in left)\n      ret.startActs = left.startActs;\n    if (\"startActs\" in right)\n      if (!(\"startActs\" in left) || overwrite)\n        ret.startActs = right.startActs;\n\n    // start\n    if (\"start\" in left)\n      ret.start = left.start;\n    if (\"start\" in right)\n      if (!(\"start\" in left) || overwrite)\n        ret.start = right.start;\n\n    let lindex = left._index || this.index(left);\n\n    // shapes\n    if (!inPlace)\n      (left.shapes || []).forEach(function (lshape) {\n        if (!(\"shapes\" in ret))\n          ret.shapes = [];\n        ret.shapes.push(lshape);\n      });\n    (right.shapes || []).forEach(function (rshape) {\n      if (!(\"shapes\"  in left) || !(rshape.id in lindex.shapeExprs) || overwrite) {\n        if (!(\"shapes\" in ret))\n          ret.shapes = [];\n        ret.shapes.push(rshape)\n      }\n    });\n\n    if (left._index || right._index)\n      ret._index = this.index(ret); // inefficient; could build above\n\n    return ret;\n  },\n\n  absolutizeResults: function (parsed, base) {\n    // !! duplicate of Validation-test.js:84: var referenceResult = parseJSONFile(resultsFile...)\n    function mapFunction (k, obj) {\n      // resolve relative URLs in results file\n      if ([\"shape\", \"reference\", \"node\", \"subject\", \"predicate\", \"object\"].indexOf(k) !== -1 &&\n          RdfTerm.isIRI(obj[k])) {\n        obj[k] = RdfTerm.resolveRelativeIRI(base, obj[k]);\n      }}\n\n    function resolveRelativeURLs (obj) {\n      Object.keys(obj).forEach(function (k) {\n        if (typeof obj[k] === \"object\") {\n          resolveRelativeURLs(obj[k]);\n        }\n        if (mapFunction) {\n          mapFunction(k, obj);\n        }\n      });\n    }\n    resolveRelativeURLs(parsed);\n    return parsed;\n  },\n\n  getProofGraph: function (res, db, dataFactory) {\n    function _dive1 (solns) {\n      if (solns.type === \"NodeTest\" || solns.type === \"NodeConstraintTest\") {\n      } else if (solns.type === \"SolutionList\" ||\n          solns.type === \"ShapeAndResults\") {\n        solns.solutions.forEach(s => {\n          if (s.solution) // no .solution for <S> {}\n            _dive1(s.solution);\n        });\n      } else if (solns.type === \"ShapeOrResults\") {\n        _dive1(solns.solution);\n      } else if (solns.type === \"ShapeTest\") {\n        if (\"solution\" in solns)\n          _dive1(solns.solution);\n      } else if (solns.type === \"OneOfSolutions\" ||\n                 solns.type === \"EachOfSolutions\") {\n        solns.solutions.forEach(s => {\n          _dive1(s);\n        });\n      } else if (solns.type === \"OneOfSolution\" ||\n                 solns.type === \"EachOfSolution\") {\n        solns.expressions.forEach(s => {\n          _dive1(s);\n        });\n      } else if (solns.type === \"TripleConstraintSolutions\") {\n        solns.solutions.map(s => {\n          if (s.type !== \"TestedTriple\")\n            throw Error(\"unexpected result type: \" + s.type);\n          var s2 = s;\n          if (typeof s2.object === \"object\")\n            s2.object = \"\\\"\" + s2.object.value.replace(/\"/g, \"\\\\\\\"\") + \"\\\"\"\n            + (s2.object.language ? (\"@\" + s2.object.language) : \n               s2.object.type ? (\"^^\" + s2.object.type) :\n               \"\");\n          db.addQuad(RdfTerm.externalTriple(s2, dataFactory))\n          if (\"referenced\" in s) {\n            _dive1(s.referenced);\n          }\n        });\n      } else {\n        throw Error(\"unexpected expr type \"+solns.type+\" in \" + JSON.stringify(solns));\n      }\n    }\n    _dive1(res);\n    return db;\n  },\n\n  validateSchema: function (schema) { // obselete, but may need other validations in the future.\n    var _ShExUtil = this;\n    var visitor = this.Visitor();\n    var currentLabel = currentExtra = null;\n    var currentNegated = false;\n    var dependsOn = { };\n    var inTE = false;\n    var oldVisitShape = visitor.visitShape;\n    var negativeDeps = Hierarchy.create();\n    var positiveDeps = Hierarchy.create();\n    let index = schema.index || this.index(schema);\n\n    visitor.visitShape = function (shape, label) {\n      var lastExtra = currentExtra;\n      currentExtra = shape.extra;\n      var ret = oldVisitShape.call(visitor, shape, label);\n      currentExtra = lastExtra;\n      return ret;\n    }\n\n    var oldVisitShapeNot = visitor.visitShapeNot;\n    visitor.visitShapeNot = function (shapeNot, label) {\n      var lastNegated = currentNegated;\n      currentNegated ^= true;\n      var ret = oldVisitShapeNot.call(visitor, shapeNot, label);\n      currentNegated = lastNegated;\n      return ret;\n    }\n\n    var oldVisitTripleConstraint = visitor.visitTripleConstraint;\n    visitor.visitTripleConstraint = function (expr) {\n      var lastNegated = currentNegated;\n      if (currentExtra && currentExtra.indexOf(expr.predicate) !== -1)\n        currentNegated ^= true;\n      inTE = true;\n      var ret = oldVisitTripleConstraint.call(visitor, expr);\n      inTE = false;\n      currentNegated = lastNegated;\n      return ret;\n    };\n\n    var oldVisitShapeRef = visitor.visitShapeRef;\n    visitor.visitShapeRef = function (shapeRef) {\n      if (!(shapeRef in index.shapeExprs))\n        throw firstError(Error(\"Structural error: reference to \" + JSON.stringify(shapeRef) + \" not found in schema shape expressions:\\n\" + dumpKeys(index.shapeExprs) + \".\"), shapeRef);\n      if (!inTE && shapeRef === currentLabel)\n        throw firstError(Error(\"Structural error: circular reference to \" + currentLabel + \".\"), shapeRef);\n      (currentNegated ? negativeDeps : positiveDeps).add(currentLabel, shapeRef)\n      return oldVisitShapeRef.call(visitor, shapeRef);\n    }\n\n    var oldVisitInclusion = visitor.visitInclusion;\n    visitor.visitInclusion = function (inclusion) {\n      var refd;\n      if (!(refd = index.tripleExprs[inclusion]))\n        throw firstError(Error(\"Structural error: included shape \" + inclusion + \" not found in schema triple expressions:\\n\" + dumpKeys(index.tripleExprs) + \".\"), inclusion);\n      // if (refd.type !== \"Shape\")\n      //   throw Error(\"Structural error: \" + inclusion + \" is not a simple shape.\");\n      return oldVisitInclusion.call(visitor, inclusion);\n    };\n\n    (schema.shapes || []).forEach(function (shape) {\n      currentLabel = shape.id;\n      visitor.visitShapeDecl(shape, shape.id);\n    });\n    let circs = Object.keys(negativeDeps.children).filter(\n      k => negativeDeps.children[k].filter(\n        k2 => k2 in negativeDeps.children && negativeDeps.children[k2].indexOf(k) !== -1\n          || k2 in positiveDeps.children && positiveDeps.children[k2].indexOf(k) !== -1\n      ).length > 0\n    );\n    if (circs.length)\n      throw firstError(Error(\"Structural error: circular negative dependencies on \" + circs.join(',') + \".\"), circs[0]);\n\n    function dumpKeys (obj) {\n      return obj ? Object.keys(obj).map(\n        u => u.substr(0, 2) === '_:' ? u : '<' + u + '>'\n      ).join(\"\\n        \") : '- none defined -'\n    }\n\n    function firstError (e, obj) {\n      if (\"_sourceMap\" in schema)\n        e.location = (schema._sourceMap.get(obj) || [undefined])[0];\n      return e;\n    }\n  },\n\n  /** isWellDefined: assert that schema is well-defined.\n   *\n   * @schema: input schema\n   * @@TODO\n   */\n  isWellDefined: function (schema) {\n    this.validateSchema(schema);\n    // var deps = this.getDependencies(schema);\n    return schema;\n  },\n\n  walkVal: function (val, cb) {\n    var _ShExUtil = this;\n    if (val.type === \"NodeTest\") {\n      return null;\n    } else if (val.type === \"ShapeTest\") {\n      return \"solution\" in val ? _ShExUtil.walkVal(val.solution, cb) : null;\n    } else if (val.type === \"ShapeOrResults\") {\n      return _ShExUtil.walkVal(val.solution || val.solutions, cb);\n    } else if (val.type === \"ShapeAndResults\") {\n      return val.solutions.reduce((ret, exp) => {\n        var n = _ShExUtil.walkVal(exp, cb);\n        if (n)\n          Object.keys(n).forEach(k => {\n            if (k in ret)\n              ret[k] = ret[k].concat(n[k]);\n            else\n              ret[k] = n[k];\n          })\n        return ret;\n      }, {});\n    } else if (val.type === \"EachOfSolutions\" || val.type === \"OneOfSolutions\") {\n      return val.solutions.reduce((ret, sln) => {\n        sln.expressions.forEach(exp => {\n          var n = _ShExUtil.walkVal(exp, cb);\n          if (n)\n            Object.keys(n).forEach(k => {\n              if (k in ret)\n                ret[k] = ret[k].concat(n[k]);\n              else\n                ret[k] = n[k];\n            })\n        });\n        return ret;\n      }, {});\n    } else if (val.type === \"OneOfSolutions\") {\n      return val.solutions.reduce((ret, sln) => {\n        Object.assign(ret, _ShExUtil.walkVal(sln, cb));\n        return ret;\n      }, {});\n    } else if (val.type === \"TripleConstraintSolutions\") {\n      if (\"solutions\" in val) {\n        var ret = {};\n        var vals = [];\n        ret[val.predicate] = vals;\n        val.solutions.forEach(sln => {\n          var toAdd = [];\n          if (chaseList(sln.referenced, toAdd)) {\n            vals = vals.concat(toAdd);\n          } else {\n            var newElt = cb(sln);\n            if (\"referenced\" in sln) {\n              var t = _ShExUtil.walkVal(sln.referenced, cb);\n              if (t)\n                newElt.nested = t;\n            }\n            vals.push(newElt);\n          }\n          function chaseList (li) {\n            if (!li) return false;\n            if (li.node === RDF.nil) return true;\n            if (\"solution\" in li && \"solutions\" in li.solution &&\n                li.solution.solutions.length === 1 &&\n                \"expressions\" in li.solution.solutions[0] &&\n                li.solution.solutions[0].expressions.length === 2 &&\n                \"predicate\" in li.solution.solutions[0].expressions[0] &&\n                li.solution.solutions[0].expressions[0].predicate === RDF.first &&\n                li.solution.solutions[0].expressions[1].predicate === RDF.rest) {\n              var expressions = li.solution.solutions[0].expressions;\n              var ent = expressions[0];\n              var rest = expressions[1].solutions[0];\n              var member = ent.solutions[0];\n              var newElt = cb(member);\n              if (\"referenced\" in member) {\n                var t = _ShExUtil.walkVal(member.referenced, cb);\n                if (t)\n                  newElt.nested = t;\n              }\n              vals.push(newElt);\n              return rest.object === RDF.nil ?\n                true :\n                chaseList(rest.referenced.type === \"ShapeOrResults\" // heuristic for `nil  OR @<list>` idiom\n                          ? rest.referenced.solution\n                          : rest.referenced);\n            }\n          }\n        });\n        return vals.length ? ret : null;\n      } else {\n        return null;\n      }\n    } else if (val.type === \"NodeConstraintTest\") {\n      return null;\n    } else if (val.type === \"Recursion\") {\n      return null;\n    } else {\n      // console.log(val);\n      throw Error(\"unknown shapeExpression type in \" + JSON.stringify(val));\n    }\n    return val;\n  },\n\n  /**\n   * Convert val results to a property tree.\n   * @exports\n   * @returns {@code {p1:[{p2: v2},{p3: v3}]}}\n   */\n  valToValues: function (val) {\n    return this.walkVal (val, function (sln) {\n      return { ldterm: sln.object };\n    });\n  },\n\n  valToExtension: function (val, lookfor) {\n    var map = this.walkVal (val, function (sln) {\n      return { extensions: sln.extensions };\n    });\n    function extensions (obj) {\n      var list = [];\n      var crushed = {};\n      function crush (elt) {\n        if (crushed === null)\n          return elt;\n        if (elt.constructor === Array) {\n          crushed = null;\n          return elt;\n        }\n        for (k in elt) {\n          if (k in crushed) {\n            crushed = null\n            return elt;\n          }\n          crushed[k] = elt[k];\n        }\n        return elt;\n      }\n      for (var k in obj) {\n        if (k === \"extensions\") {\n          if (obj[k])\n            list.push(crush(obj[k][lookfor]));\n        } else if (k === \"nested\") {\n          var nested = extensions(obj[k]);\n          if (nested.constructor === Array)\n            nested.forEach(crush);\n          else\n            crush(nested);\n          list = list.concat(nested);\n        } else {\n          list.push(crush(extensions(obj[k])));\n        }\n      }\n      return list.length === 1 ? list[0] :\n        crushed ? crushed :\n        list;\n    }\n    return extensions(map);\n  },\n\n  valuesToSchema: function (values) {\n    // console.log(JSON.stringify(values, null, \"  \"));\n    var v = values;\n    var t = values[RDF.type][0].ldterm;\n    if (t === SX.Schema) {\n      /* Schema { \"@context\":\"http://www.w3.org/ns/shex.jsonld\"\n       *           startActs:[SemAct+]? start:(shapeExpr|labeledShapeExpr)?\n       *           shapes:[labeledShapeExpr+]? }\n       */\n      var ret = {\n        \"@context\": \"http://www.w3.org/ns/shex.jsonld\",\n        type: \"Schema\"\n      }\n      if (SX.startActs in v)\n        ret.startActs = v[SX.startActs].map(e => {\n          var ret = {\n            type: \"SemAct\",\n            name: e.nested[SX.name][0].ldterm\n          };\n          if (SX.code in e.nested)\n            ret.code = e.nested[SX.code][0].ldterm.value;\n          return ret;\n        });\n      if (SX.imports in v)\n        ret.imports = v[SX.imports].map(e => {\n          return e.ldterm;\n        });\n      if (values[SX.start])\n        ret.start = extend({id: values[SX.start][0].ldterm}, shapeExpr(values[SX.start][0].nested));\n      var shapes = values[SX.shapes];\n      if (shapes) {\n        ret.shapes = shapes.map(v => { // @@ console.log(v.nested);\n          var t = v.nested[RDF.type][0].ldterm;\n          var obj = t === SX.ShapeDecl ?\n              {\n                type: SX.ShapeDecl,\n                abstract: !!v.nested[SX[\"abstract\"]][0].ldterm.value,\n                shapeExpr: shapeExpr(v.nested[SX.shapeExpr][0].nested)\n              } :\n              shapeExpr(v.nested);\n          return extend({id: v.ldterm}, obj);\n        });\n      }\n      // console.log(ret);\n      return ret;\n    } else {\n      throw Error(\"unknown schema type in \" + JSON.stringify(values));\n    }\n    function findType (v, elts, f) {\n      var t = v[RDF.type][0].ldterm.substr(SX._namespace.length);\n      var elt = elts[t];\n      if (!elt)\n        return Missed;\n      if (elt.nary) {\n        var ret = {\n          type: t,\n        };\n        ret[elt.prop] = v[SX[elt.prop]].map(e => {\n          return valueOf(e);\n        });\n        return ret;\n      } else {\n        var ret = {\n          type: t\n        };\n        if (elt.prop) {\n          ret[elt.prop] = valueOf(v[SX[elt.prop]][0]);\n        }\n        return ret;\n      }\n\n      function valueOf (x) {\n        return elt.expr && \"nested\" in x ? extend({ id: x.ldterm, }, f(x.nested)) : x.ldterm;\n      }\n    }\n    function shapeExpr (v) {\n      // shapeExpr = ShapeOr | ShapeAnd | ShapeNot | NodeConstraint | Shape | ShapeRef | ShapeExternal;\n      var elts = { \"ShapeAnd\"     : { nary: true , expr: true , prop: \"shapeExprs\" },\n                   \"ShapeOr\"      : { nary: true , expr: true , prop: \"shapeExprs\" },\n                   \"ShapeNot\"     : { nary: false, expr: true , prop: \"shapeExpr\"  },\n                   \"ShapeRef\"     : { nary: false, expr: false, prop: \"reference\"  },\n                   \"ShapeExternal\": { nary: false, expr: false, prop: null         } };\n      var ret = findType(v, elts, shapeExpr);\n      if (ret !== Missed)\n        return ret;\n\n      var t = v[RDF.type][0].ldterm;\n      if (t === SX.ShapeDecl) {\n        var ret = { type: \"ShapeDecl\" };\n        [\"abstract\"].forEach(a => {\n          if (SX[a] in v)\n            ret[a] = !!v[SX[a]][0].ldterm.value;\n        });\n        if (SX.shapeExpr in v) {\n          ret.shapeExpr =\n            \"nested\" in v[SX.shapeExpr][0] ?\n            extend({id: v[SX.shapeExpr][0].ldterm}, shapeExpr(v[SX.shapeExpr][0].nested)) :\n            v[SX.shapeExpr][0].ldterm;\n        }\n        return ret;\n      } else if (t === SX.Shape) {\n        var ret = { type: \"Shape\" };\n        [\"closed\"].forEach(a => {\n          if (SX[a] in v)\n            ret[a] = !!v[SX[a]][0].ldterm.value;\n        });\n        [\"extra\", \"extends\", \"restricts\"].forEach(a => {\n          if (SX[a] in v)\n            ret[a] = v[SX[a]].map(e => { return e.ldterm; });\n        });\n        if (SX.expression in v) {\n          ret.expression =\n            \"nested\" in v[SX.expression][0] ?\n            extend({id: v[SX.expression][0].ldterm}, tripleExpr(v[SX.expression][0].nested)) :\n            v[SX.expression][0].ldterm;\n        }\n        if (SX.annotation in v)\n          ret.annotations = v[SX.annotation].map(e => {\n            return {\n              type: \"Annotation\",\n              predicate: e.nested[SX.predicate][0].ldterm,\n              object: e.nested[SX.object][0].ldterm\n            };\n          });\n        if (SX.semActs in v)\n          ret.semActs = v[SX.semActs].map(e => {\n            var ret = {\n              type: \"SemAct\",\n              name: e.nested[SX.name][0].ldterm\n            };\n            if (SX.code in e.nested)\n              ret.code = e.nested[SX.code][0].ldterm.value;\n            return ret;\n          });\n        return ret;\n      } else if (t === SX.NodeConstraint) {\n        var ret = { type: \"NodeConstraint\" };\n        if (SX.values in v)\n          ret.values = v[SX.values].map(v1 => { return objectValue(v1); });\n        if (SX.nodeKind in v)\n          ret.nodeKind = v[SX.nodeKind][0].ldterm.substr(SX._namespace.length);\n        [\"length\", \"minlength\", \"maxlength\", \"mininclusive\", \"maxinclusive\", \"minexclusive\", \"maxexclusive\", \"totaldigits\", \"fractiondigits\"].forEach(a => {\n          if (SX[a] in v)\n            ret[a] = parseFloat(v[SX[a]][0].ldterm.value);\n        });\n        if (SX.pattern in v)\n          ret.pattern = v[SX.pattern][0].ldterm.value;\n        if (SX.flags in v)\n          ret.flags = v[SX.flags][0].ldterm.value;\n        if (SX.datatype in v)\n          ret.datatype = v[SX.datatype][0].ldterm;\n        return ret;\n      } else {\n        throw Error(\"unknown shapeExpr type in \" + JSON.stringify(v));\n      }\n\n    }\n\n    function objectValue (v, expectString) {\n      if (\"nested\" in v) {\n        var t = v.nested[RDF.type][0].ldterm;\n        if ([SX.IriStem, SX.LiteralStem, SX.LanguageStem].indexOf(t) !== -1) {\n          var ldterm = v.nested[SX.stem][0].ldterm.value;\n          return {\n            type: t.substr(SX._namespace.length),\n            stem: ldterm\n          };\n        } else if ([SX.Language].indexOf(t) !== -1) {\n          return {\n            type: \"Language\",\n            languageTag: v.nested[SX.languageTag][0].ldterm.value\n          };\n        } else if ([SX.IriStemRange, SX.LiteralStemRange, SX.LanguageStemRange].indexOf(t) !== -1) {\n          var st = v.nested[SX.stem][0];\n          var stem = st;\n          if (typeof st === \"object\") {\n            if (typeof st.ldterm === \"object\") {\n              stem = st.ldterm;\n            } else if (st.ldterm.startsWith(\"_:\")) {\n              stem = { type: \"Wildcard\" };\n            }\n          }\n          var ret = {\n            type: t.substr(SX._namespace.length),\n            stem: stem.type !== \"Wildcard\" ? stem.value : stem\n          };\n          if (SX.exclusion in v.nested) {\n            // IriStemRange:\n            // * [{\"ldterm\":\"http://a.example/v1\"},{\"ldterm\":\"http://a.example/v3\"}] <-- no value\n            // * [{\"ldterm\":\"_:b836\",\"nested\":{a:[{\"ldterm\":sx:IriStem}],\n            //                                 sx:stem:[{\"ldterm\":{\"value\":\"http://a.example/v1\"}}]}},\n            //    {\"ldterm\":\"_:b838\",\"nested\":{a:[{\"ldterm\":sx:IriStem}],\n            //                                 sx:stem:[{\"ldterm\":{\"value\":\"http://a.example/v3\"}}]}}]\n\n            // LiteralStemRange:\n            // * [{\"ldterm\":{\"value\":\"v1\"}},{\"ldterm\":{\"value\":\"v3\"}}]\n            // * [{\"ldterm\":\"_:b866\",\"nested\":{a:[{\"ldterm\":sx:LiteralStem}],\n            //                                 sx:stem:[{\"ldterm\":{\"value\":\"v1\"}}]}},\n            //    {\"ldterm\":\"_:b868\",\"nested\":{a:[{\"ldterm\":sx:LiteralStem}],\n            //                                 sx:stem:[{\"ldterm\":{\"value\":\"v3\"}}]}}]\n\n            // LanguageStemRange:\n            // * [{\"ldterm\":{\"value\":\"fr-be\"}},{\"ldterm\":{\"value\":\"fr-ch\"}}]\n            // * [{\"ldterm\":\"_:b851\",\"nested\":{a:[{\"ldterm\":sx:LanguageStem}],\n            //                                 sx:stem:[{\"ldterm\":{\"value\":\"fr-be\"}}]}},\n            //    {\"ldterm\":\"_:b853\",\"nested\":{a:[{\"ldterm\":sx:LanguageStem}],\n            //                                 sx:stem:[{\"ldterm\":{\"value\":\"fr-ch\"}}]}}]\n            ret.exclusions = v.nested[SX.exclusion].map(v1 => {\n              return objectValue(v1, t !== SX.IriStemRange);\n            });\n          }\n          return ret;\n        } else {\n          throw Error(\"unknown objectValue type in \" + JSON.stringify(v));\n        }\n      } else {\n        return expectString ? v.ldterm.value : v.ldterm;\n      }\n    }\n\n    function tripleExpr (v) {\n      // tripleExpr = EachOf | OneOf | TripleConstraint | Inclusion ;\n      var elts = { \"EachOf\"   : { nary: true , expr: true , prop: \"expressions\" },\n                   \"OneOf\"    : { nary: true , expr: true , prop: \"expressions\" },\n                   \"Inclusion\": { nary: false, expr: false, prop: \"include\"     } };\n      var ret = findType(v, elts, tripleExpr);\n      if (ret !== Missed) {\n        minMaxAnnotSemActs(v, ret);\n        return ret;\n      }\n\n      var t = v[RDF.type][0].ldterm;\n      if (t === SX.TripleConstraint) {\n        var ret = {\n          type: \"TripleConstraint\",\n          predicate: v[SX.predicate][0].ldterm\n        };\n        [\"inverse\"].forEach(a => {\n          if (SX[a] in v)\n            ret[a] = !!v[SX[a]][0].ldterm.value;\n        });\n        if (SX.valueExpr in v)\n          ret.valueExpr = extend({id: v[SX.valueExpr][0].ldterm}, \"nested\" in v[SX.valueExpr][0] ? shapeExpr(v[SX.valueExpr][0].nested) : {});\n        minMaxAnnotSemActs(v, ret);\n        return ret;\n      } else {\n        throw Error(\"unknown tripleExpr type in \" + JSON.stringify(v));\n      }\n    }\n    function minMaxAnnotSemActs (v, ret) {\n      if (SX.min in v)\n        ret.min = parseInt(v[SX.min][0].ldterm.value);\n      if (SX.max in v) {\n        ret.max = parseInt(v[SX.max][0].ldterm.value);\n        if (isNaN(ret.max))\n          ret.max = UNBOUNDED;\n      }\n      if (SX.annotation in v)\n        ret.annotations = v[SX.annotation].map(e => {\n          return {\n            type: \"Annotation\",\n            predicate: e.nested[SX.predicate][0].ldterm,\n            object: e.nested[SX.object][0].ldterm\n          };\n        });\n      if (SX.semActs in v)\n        ret.semActs = v[SX.semActs].map(e => {\n          var ret = {\n            type: \"SemAct\",\n            name: e.nested[SX.name][0].ldterm\n          };\n          if (SX.code in e.nested)\n            ret.code = e.nested[SX.code][0].ldterm.value;\n          return ret;\n        });\n      return ret;\n    }\n  },\n\n  valToSimple: function (val) {\n    var _ShExUtil = this;\n    function _join (list) {\n      return list.reduce((ret, elt) => {\n        Object.keys(elt).forEach(k => {\n          if (k in ret) {\n            ret[k] = Array.from(new Set(ret[k].concat(elt[k])));\n          } else {\n            ret[k] = elt[k];\n          }\n        });\n        return ret;\n      }, {});\n    }\n    if (val.type === \"TripleConstraintSolutions\") {\n      if (\"solutions\" in val) {\n        return val.solutions.reduce((ret, sln) => {\n          if (!(\"referenced\" in sln))\n            return {};\n          var toAdd = {};\n          if (chaseList(sln.referenced, toAdd)) {\n            return _join(ret, toAdd);\n          } else {\n            return _join(ret, _ShExUtil.valToSimple(sln.referenced));\n          }\n          function chaseList (li) {\n            if (!li) return false;\n            if (li.node === RDF.nil) return true;\n            if (\"solution\" in li && \"solutions\" in li.solution &&\n                li.solution.solutions.length === 1 &&\n                \"expressions\" in li.solution.solutions[0] &&\n                li.solution.solutions[0].expressions.length === 2 &&\n                \"predicate\" in li.solution.solutions[0].expressions[0] &&\n                li.solution.solutions[0].expressions[0].predicate === RDF.first &&\n                li.solution.solutions[0].expressions[1].predicate === RDF.rest) {\n              var expressions = li.solution.solutions[0].expressions;\n              var ent = expressions[0];\n              var rest = expressions[1].solutions[0];\n              var member = ent.solutions[0];\n              var newElt = { ldterm: member.object };\n              if (\"referenced\" in member) {\n                var t = _ShExUtil.valToSimple(member.referenced);\n                if (t)\n                  newElt.nested = t;\n              }\n              toAdd = _join(toAdd, newElt);\n              return rest.object === RDF.nil ?\n                true :\n                chaseList(rest.referenced);\n            }\n          }\n        }, []);\n      } else {\n        return [];\n      }\n    } else if ([\"TripleConstraintSolutions\"].indexOf(val.type) !== -1) {\n      return {  };\n    } else if (val.type === \"NodeTest\") {\n      var thisNode = {  };\n      thisNode[n3ify(val.node)] = [val.shape];\n      return thisNode;\n    } else if (val.type === \"ShapeTest\") {\n      var thisNode = {  };\n      thisNode[n3ify(val.node)] = [val.shape];\n      return \"solution\" in val ? _join([thisNode].concat(_ShExUtil.valToSimple(val.solution))) : thisNode;\n    } else if (val.type === \"Recursion\") {\n      return {  };\n    } else if (\"solutions\" in val) {\n      // [\"SolutionList\", \"EachOfSolutions\", \"OneOfSolutions\", \"ShapeAndResults\", \"ShapeOrResults\"].indexOf(val.type) !== -1\n      return _join(val.solutions.map(sln => {\n        return _ShExUtil.valToSimple(sln);\n      }));\n    } else if (\"expressions\" in val) {\n      return _join(val.expressions.map(sln => {\n        return _ShExUtil.valToSimple(sln);\n      }));\n    } else {\n      // console.log(val);\n      throw Error(\"unknown shapeExpression type in \" + JSON.stringify(val));\n    }\n    return val;\n  },\n\n  simpleToShapeMap: function (x) {\n    return Object.keys(x).reduce((ret, k) => {\n      x[k].forEach(s => {\n        ret.push({node: k, shape: s });\n      });\n      return ret;\n    }, []);\n  },\n\n  absolutizeShapeMap: function (parsed, base) {\n    return parsed.map(elt => {\n      return Object.assign(elt, {\n        node: RdfTerm.resolveRelativeIRI(base, elt.node),\n        shape: RdfTerm.resolveRelativeIRI(base, elt.shape)\n      });\n    });\n  },\n\n  errsToSimple: function (val, node, shape) {\n    var _ShExUtil = this;\n    if (val.type === \"FailureList\") {\n      return val.errors.reduce((ret, e) => {\n        return ret.concat(_ShExUtil.errsToSimple(e));\n      }, []);\n    } else if (val.type === \"Failure\") {\n      return [\"validating \" + val.node + \" as \" + val.shape + \":\"].concat(errorList(val.errors).reduce((ret, e) => {\n        var nested = _ShExUtil.errsToSimple(e).map(s => \"  \" + s);\n        return ret.length > 0 ? ret.concat([\"  OR\"]).concat(nested) : nested.map(s => \"  \" + s);\n      }, []));\n    } else if (val.type === \"TypeMismatch\") {\n      var nested = val.errors.constructor === Array ?\n          val.errors.reduce((ret, e) => {\n            return ret.concat((typeof e === \"string\" ? [e] : _ShExUtil.errsToSimple(e)).map(s => \"  \" + s));\n          }, []) :\n          \"  \" + (typeof e === \"string\" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));\n      return [\"validating \" + n3ify(val.triple.object) + \":\"].concat(nested);\n    } else if (val.type === \"RestrictionError\") {\n      var nested = val.errors.constructor === Array ?\n          val.errors.reduce((ret, e) => {\n            return ret.concat((typeof e === \"string\" ? [e] : _ShExUtil.errsToSimple(e)).map(s => \"  \" + s));\n          }, []) :\n          \"  \" + (typeof e === \"string\" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));\n      return [\"validating restrictions on \" + n3ify(val.focus) + \":\"].concat(nested);\n    } else if (val.type === \"ShapeAndFailure\") {\n      return val.errors.constructor === Array ?\n          val.errors.reduce((ret, e) => {\n            return ret.concat((typeof e === \"string\" ? [e] : _ShExUtil.errsToSimple(e)).map(s => \"  \" + s));\n          }, []) :\n          \"  \" + (typeof e === \"string\" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));\n    } else if (val.type === \"ShapeOrFailure\") {\n      return val.errors.constructor === Array ?\n          val.errors.reduce((ret, e) => {\n            return ret.concat(\" OR \" + (typeof e === \"string\" ? [e] : _ShExUtil.errsToSimple(e)));\n          }, []) :\n          \" OR \" + (typeof e === \"string\" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));\n    } else if (val.type === \"ShapeNotFailure\") {\n      return [\"Node \" + val.errors.node + \" expected to NOT pass \" + val.errors.shape];\n    } else if (val.type === \"ExcessTripleViolation\") {\n      return [\"validating \" + n3ify(val.triple.object) + \": exceeds cardinality\"];\n    } else if (val.type === \"ClosedShapeViolation\") {\n      return [\"ClosedShapeError: unexpected: {\"].concat(\n        val.unexpectedTriples.map(t => {\n          return \"  \" + t.subject + \" \" + t.predicate + \" \" + n3ify(t.object) + \" .\"\n        })\n      ).concat([\"}\"]);\n    } else if (val.type === \"NodeConstraintViolation\") {\n      var w = __webpack_require__(/*! ../lib/ShExWriter */ \"./node_modules/@shexjs/core/lib/ShExWriter.js\")();\n      w._write(w._writeNodeConstraint(val.shapeExpr).join(\"\"));\n      var txt;\n      w.end((err, res) => {\n        txt = res;\n      });\n      return [\"NodeConstraintError: expected to match \" + txt];\n    } else if (val.type === \"MissingProperty\") {\n      return [\"Missing property: \" + val.property];\n    } else if (val.type === \"NegatedProperty\") {\n      return [\"Unexpected property: \" + val.property];\n    } else if (val.type === \"AbstractShapeFailure\") {\n      return [\"Abstract Shape: \" + val.shape];\n    } else if (val.constructor === Array) {\n      return val.reduce((ret, e) => {\n        var nested = _ShExUtil.errsToSimple(e).map(s => \"  \" + s);\n        return ret.length ? ret.concat([\"AND\"]).concat(nested) : nested;\n      }, []);\n    } else {\n      debugger; // console.log(val);\n      throw Error(\"unknown shapeExpression type in \" + JSON.stringify(val));\n    }\n    function errorList (errors) {\n      return errors.reduce(function (acc, e) {\n        var attrs = Object.keys(e);\n        return acc.concat(\n          (attrs.length === 1 && attrs[0] === \"errors\")\n            ? errorList(e.errors)\n            : e);\n      }, []);\n    }\n  },\n\n  resolveRelativeIRI: RdfTerm.resolveRelativeIRI,\n\n  resolvePrefixedIRI: function (prefixedIri, prefixes) {\n    var colon = prefixedIri.indexOf(\":\");\n    if (colon === -1)\n      return null;\n    var prefix = prefixes[prefixedIri.substr(0, colon)];\n    return prefix === undefined ? null : prefix + prefixedIri.substr(colon+1);\n  },\n\n  parsePassedNode: function (passedValue, meta, deflt, known, reportUnknown) {\n    if (passedValue === undefined || passedValue.length === 0)\n      return known && known(meta.base) ? meta.base : deflt ? deflt() : this.NotSupplied;\n    if (passedValue[0] === \"_\" && passedValue[1] === \":\")\n      return passedValue;\n    if (passedValue[0] === \"\\\"\") {\n      var m = passedValue.match(/^\"((?:[^\"\\\\]|\\\\\")*)\"(?:@(.+)|\\^\\^(?:<(.*)>|([^:]*):(.*)))?$/);\n      if (!m)\n        throw Error(\"malformed literal: \" + passedValue);\n      var lex = m[1], lang = m[2], rel = m[3], pre = m[4], local = m[5];\n      // Turn the literal into an N3.js atom.\n      var quoted = \"\\\"\"+lex+\"\\\"\";\n      if (lang !== undefined)\n        return quoted + \"@\" + lang;\n      if (pre !== undefined) {\n        if (!(pre in meta.prefixes))\n          throw Error(\"error parsing node \"+passedValue+\" no prefix for \\\"\" + pre + \"\\\"\");\n        return quoted + \"^^\" + meta.prefixes[pre] + local;\n      }\n      if (rel !== undefined)\n        return quoted + \"^^\" + RdfTerm.resolveRelativeIRI(meta.base, rel);\n      return quoted;\n    }\n    if (!meta)\n      return known(passedValue) ? passedValue : this.UnknownIRI;\n    var relIRI = passedValue[0] === \"<\" && passedValue[passedValue.length-1] === \">\";\n    if (relIRI)\n      passedValue = passedValue.substr(1, passedValue.length-2);\n    var t = RdfTerm.resolveRelativeIRI(meta.base || \"\", passedValue); // fall back to base-less mode\n    if (known(t))\n      return t;\n    if (!relIRI) {\n      var t2 = this.resolvePrefixedIRI(passedValue, meta.prefixes);\n      if (t2 !== null && known(t2))\n        return t2;\n    }\n    return reportUnknown ? reportUnknown(t) : this.UnknownIRI;\n  },\n\n  executeQueryPromise: function (query, endpoint) {\n    var rows;\n\n    var queryURL = endpoint + \"?query=\" + encodeURIComponent(query);\n    return fetch(queryURL, {\n      headers: {\n        'Accept': 'application/sparql-results+json'\n      }}).then(resp => resp.json()).then(t => {\n        var selects = t.head.vars;\n        return t.results.bindings.map(row => {\n          return selects.map(sel => {\n            var elt = row[sel];\n            switch (elt.type) {\n            case \"uri\": return elt.value;\n            case \"bnode\": return \"_:\" + elt.value;\n            case \"literal\":\n              var datatype = elt.datatype;\n              var lang = elt[\"xml:lang\"];\n              return \"\\\"\" + elt.value + \"\\\"\" + (\n                datatype ? \"^^\" + datatype :\n                  lang ? \"@\" + lang :\n                  \"\");\n            default: throw \"unknown XML results type: \" + elt.prop(\"tagName\");\n            }\n            return row[sel];\n          })\n        });\n      })// .then(x => new Promise(resolve => setTimeout(() => resolve(x), 1000)));\n  },\n\n  executeQuery: function (query, endpoint) {\n    var rows, t, j;\n    var queryURL = endpoint + \"?query=\" + encodeURIComponent(query);\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", queryURL, false);\n    xhr.setRequestHeader('Accept', 'application/sparql-results+json');\n    xhr.send();\n    // var selectsBlock = query.match(/SELECT\\s*(.*?)\\s*{/)[1];\n    // var selects = selectsBlock.match(/\\?[^\\s?]+/g);\n    var t = JSON.parse(xhr.responseText);\n    var selects = t.head.vars;\n    return t.results.bindings.map(row => {\n      return selects.map(sel => {\n        var elt = row[sel];\n        switch (elt.type) {\n        case \"uri\": return elt.value;\n        case \"bnode\": return \"_:\" + elt.value;\n        case \"literal\":\n          var datatype = elt.datatype;\n          var lang = elt[\"xml:lang\"];\n          return \"\\\"\" + elt.value + \"\\\"\" + (\n            datatype ? \"^^\" + datatype :\n              lang ? \"@\" + lang :\n              \"\");\n        default: throw \"unknown XML results type: \" + elt.prop(\"tagName\");\n        }\n        return row[sel];\n      })\n    });\n\n/* TO ADD? XML results format parsed with jquery:\n        $(data).find(\"sparql > results > result\").\n          each((_, row) => {\n            rows.push($(row).find(\"binding > *:nth-child(1)\").\n              map((idx, elt) => {\n                elt = $(elt);\n                var text = elt.text();\n                switch (elt.prop(\"tagName\")) {\n                case \"uri\": return text;\n                case \"bnode\": return \"_:\" + text;\n                case \"literal\":\n                  var datatype = elt.attr(\"datatype\");\n                  var lang = elt.attr(\"xml:lang\");\n                  return \"\\\"\" + text + \"\\\"\" + (\n                    datatype ? \"^^\" + datatype :\n                    lang ? \"@\" + lang :\n                      \"\");\n                default: throw \"unknown XML results type: \" + elt.prop(\"tagName\");\n                }\n              }).get());\n          });\n*/\n  },\n\n  makeN3DB: function (db, queryTracker) {\n\n    function getSubjects () { return db.getSubjects().map(RdfTerm.internalTerm); }\n    function getPredicates () { return db.getPredicates().map(RdfTerm.internalTerm); }\n    function getObjects () { return db.getObjects().map(RdfTerm.internalTerm); }\n    function getQuads () { return db.getQuads.apply(db, arguments).map(RdfTerm.internalTriple); }\n\n    function getNeighborhood (point, shapeLabel/*, shape */) {\n      // I'm guessing a local DB doesn't benefit from shape optimization.\n      var startTime;\n      if (queryTracker) {\n        startTime = new Date();\n        queryTracker.start(false, point, shapeLabel);\n      }\n      var outgoing = db.getQuads(point, null, null, null).map(RdfTerm.internalTriple);\n      if (queryTracker) {\n        var time = new Date();\n        queryTracker.end(outgoing, time - startTime);\n        startTime = time;\n      }\n      if (queryTracker) {\n        queryTracker.start(true, point, shapeLabel);\n      }\n      var incoming = db.getQuads(null, null, point, null).map(RdfTerm.internalTriple);\n      if (queryTracker) {\n        queryTracker.end(incoming, new Date() - startTime);\n      }\n      return {\n        outgoing: outgoing,\n        incoming: incoming\n      };\n    }\n\n    return {\n      // size: db.size,\n      getNeighborhood: getNeighborhood,\n      getSubjects: getSubjects,\n      getPredicates: getPredicates,\n      getObjects: getObjects,\n      getQuads: getQuads,\n      get size() { return db.size; },\n      // getQuads: function (s, p, o, graph, shapeLabel) {\n      //   // console.log(Error(s + p + o).stack)\n      //   if (queryTracker)\n      //     queryTracker.start(!!s, s ? s : o, shapeLabel);\n      //   var quads = db.getQuads(s, p, o, graph)\n      //   if (queryTracker)\n      //     queryTracker.end(quads, new Date() - startTime);\n      //   return quads;\n      // }\n    }\n  },\n  /** emulate N3Store().getQuads() with additional parm.\n   */\n  makeQueryDB: function (endpoint, queryTracker) {\n    var _ShExUtil = this;\n\n    function getQuads(s, p, o, g) {\n      return mapQueryToTriples(\"SELECT \" + [\n        (s?\"\":\"?s\"), (p?\"\":\"?p\"), (o?\"\":\"?o\"),\n        \"{\",\n        (s?s:\"?s\"), (p?p:\"?s\"), (o?o:\"?s\"),\n        \"}\"].join(\" \"), s, o)\n    }\n\n    function mapQueryToTriples (query, s, o) {\n      var rows = _ShExUtil.executeQuery(query, endpoint);\n      var triples = rows.map(row =>  {\n        return s ? {\n          subject: s,\n          predicate: row[0],\n          object: row[1]\n        } : {\n          subject: row[0],\n          predicate: row[1],\n          object: o\n        };\n      });\n      return triples;\n    }\n\n    function getTripleConstraints (tripleExpr) {\n      var visitor = _ShExUtil.Visitor();\n      var ret = {\n        out: [],\n        inc: []\n      };\n      visitor.visitTripleConstraint = function (expr) {\n        ret[expr.inverse ? \"inc\" : \"out\"].push(expr);\n        return expr;\n      };\n\n      if (tripleExpr)\n        visitor.visitExpression(tripleExpr);\n      return ret;\n    }\n\n    function getNeighborhood (point, shapeLabel, shape) {\n      // I'm guessing a local DB doesn't benefit from shape optimization.\n      var startTime;\n      var tcs = getTripleConstraints(shape.expression);\n      var pz = tcs.out.map(t => t.predicate);\n      pz = pz.filter((p, idx) => pz.lastIndexOf(p) === idx);\n      if (queryTracker) {\n        startTime = new Date();\n        queryTracker.start(false, point, shapeLabel);\n      }\n      var outgoing = (tcs.out.length > 0 || shape.closed)\n          ? mapQueryToTriples(\n            shape.closed\n              ? `SELECT ?p ?o { <${point}> ?p ?o }`\n              : \"SELECT ?p ?o {\\n\" +\n              pz.map(\n                p => `  {<${point}> <${p}> ?o BIND(<${p}> AS ?p)}`\n              ).join(\" UNION\\n\") +\n              \"\\n}\",\n            point, null\n          )\n          : [];\n      if (queryTracker) {\n        var time = new Date();\n        queryTracker.end(outgoing, time - startTime);\n        startTime = time;\n      }\n      if (queryTracker) {\n        queryTracker.start(true, point, shapeLabel);\n      }\n      var incoming = tcs.inc.length > 0\n          ? mapQueryToTriples(`SELECT ?s ?p { ?s ?p <${point}> }`, null, point)\n          : []\n      if (queryTracker) {\n        queryTracker.end(incoming, new Date() - startTime);\n      }\n      return  {\n        outgoing: outgoing,\n        incoming: incoming\n      };\n    }\n\n    return {\n      getNeighborhood: getNeighborhood,\n      getQuads: getQuads,\n      getSubjects: function () { return [\"!Query DB can't index subjects\"] },\n      getPredicates: function () { return [\"!Query DB can't index predicates\"] },\n      getObjects: function () { return [\"!Query DB can't index objects\"] },\n      get size() { return undefined; }\n    };\n  },\n\n  /** Directly construct a DB from triples.\n   */\n  makeTriplesDB: function (queryTracker) {\n    var _ShExUtil = this;\n    var incoming = [];\n    var outgoing = [];\n\n    function getTriplesByIRI(s, p, o, g) {\n      return incoming.concat(outgoing).filter(\n        t =>\n          (!s || s === t.subject) &&\n          (!p || p === t.predicate) &&\n          (!s || s === t.object)\n      );\n    }\n\n    function getNeighborhood (point, shapeLabel, shape) {\n      return {\n        outgoing: outgoing,\n        incoming: incoming\n      };\n    }\n\n    return {\n      getNeighborhood: getNeighborhood,\n      getTriplesByIRI: getTriplesByIRI,\n      getSubjects: function () { return [\"!Triples DB can't index subjects\"] },\n      getPredicates: function () { return [\"!Triples DB can't index predicates\"] },\n      getObjects: function () { return [\"!Triples DB can't index objects\"] },\n      get size() { return undefined; },\n      addIncomingTriples: function (tz) { Array.prototype.push.apply(incoming, tz); },\n      addOutgoingTriples: function (tz) { Array.prototype.push.apply(outgoing, tz); }\n    };\n  },\n\n  NotSupplied: \"-- not supplied --\", UnknownIRI: \"-- not found --\",\n\n  // Expect property p with value v in object o\n  _expect: function (o, p, v) {\n    if (!(p in o))\n      this._error(\"expected \"+JSON.stringify(o)+\" to have a .\"+p);\n    if (arguments.length > 2 && o[p] !== v)\n      this._error(\"expected \"+o[o]+\" to equal .\"+v);\n  },\n\n  _error: function (str) {\n    throw new Error(str);\n  },\n\n  /**\n   * unescape numerics and allowed single-character escapes.\n   * throws: if there are any unallowed sequences\n   */\n  unescapeText: function (string, replacements) {\n    var regex = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\(.)/g;\n    try {\n      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {\n        var charCode;\n        if (unicode4) {\n          charCode = parseInt(unicode4, 16);\n          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n          return String.fromCharCode(charCode);\n        }\n        else if (unicode8) {\n          charCode = parseInt(unicode8, 16);\n          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n          if (charCode < 0xFFFF) return String.fromCharCode(charCode);\n          return String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n        }\n        else {\n          var replacement = replacements[escapedChar];\n          if (!replacement) throw new Error(\"no replacement found for '\" + escapedChar + \"'\");\n          return replacement;\n        }\n      });\n      return string;\n    }\n    catch (error) { console.warn(error); return ''; }\n  },\n\n};\n\n\nfunction n3ify (ldterm) {\n  if (typeof ldterm !== \"object\")\n    return ldterm;\n  var ret = \"\\\"\" + ldterm.value + \"\\\"\";\n  if (\"language\" in ldterm)\n    return ret + \"@\" + ldterm.language;\n  if (\"type\" in ldterm)\n    return ret + \"^^\" + ldterm.type;\n  return ret;\n}\n\n// Add the ShExUtil functions to the given object or its prototype\nfunction AddShExUtil(parent, toPrototype) {\n  for (var name in ShExUtil)\n    if (!toPrototype)\n      parent[name] = ShExUtil[name];\n    else\n      parent.prototype[name] = ApplyToThis(ShExUtil[name]);\n\n  return parent;\n}\n\n// Returns a function that applies `f` to the `this` object\nfunction ApplyToThis(f) {\n  return function (a) { return f(this, a); };\n}\n\nreturn AddShExUtil(AddShExUtil);\n})();\n\nif (true)\n  module.exports = ShExUtil; // node environment\n\n\n//# sourceURL=webpack://blues/./node_modules/@shexjs/core/lib/ShExUtil.js?");

/***/ }),

/***/ "./node_modules/@shexjs/core/lib/ShExValidator.js":
/*!********************************************************!*\
  !*** ./node_modules/@shexjs/core/lib/ShExValidator.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {/* ShExValidator - javascript module to validate a graph with respect to Shape Expressions\n *\n * Status: 1/2 tested, no known bugs.\n *\n * TODO:\n *   constraint violation reporting.\n */\n\nvar ShExValidator = (function () {\nvar UNBOUNDED = -1;\n\n// interface constants\nvar Start = { term: \"START\" }\nvar InterfaceOptions = {\n  \"or\": {\n    \"oneOf\": \"exactly one disjunct must pass\",\n    \"someOf\": \"one or more disjuncts must pass\",\n    \"firstOf\": \"disjunct evaluation stops after one passes\"\n  },\n  \"partition\": {\n    \"greedy\": \"each triple constraint consumes all triples matching predicate and object\",\n    \"exhaustive\": \"search all mappings of triples to triple constriant\"\n  }\n};\n\nvar VERBOSE = \"VERBOSE\" in process.env;\n// **ShExValidator** provides ShEx utility functions\n\nvar ProgramFlowError = { type: \"ProgramFlowError\", errors: { type: \"UntrackedError\" } };\n\nvar RdfTerm = __webpack_require__(/*! ./RdfTerm */ \"./node_modules/@shexjs/core/lib/RdfTerm.js\");\nlet ShExUtil = __webpack_require__(/*! ./ShExUtil */ \"./node_modules/@shexjs/core/lib/ShExUtil.js\");\nvar ShExWriter = __webpack_require__(/*! ../lib/ShExWriter */ \"./node_modules/@shexjs/core/lib/ShExWriter.js\");\nconst Hierarchy = __webpack_require__(/*! hierarchy-closure */ \"./node_modules/hierarchy-closure/hierarchy-closure.js\")\n\nfunction getLexicalValue (term) {\n  return RdfTerm.isIRI(term) ? term :\n    RdfTerm.isLiteral(term) ? RdfTerm.getLiteralValue(term) :\n    term.substr(2); // bnodes start with \"_:\"\n}\n\n\nvar XSD = \"http://www.w3.org/2001/XMLSchema#\";\nvar integerDatatypes = [\n  XSD + \"integer\",\n  XSD + \"nonPositiveInteger\",\n  XSD + \"negativeInteger\",\n  XSD + \"long\",\n  XSD + \"int\",\n  XSD + \"short\",\n  XSD + \"byte\",\n  XSD + \"nonNegativeInteger\",\n  XSD + \"unsignedLong\",\n  XSD + \"unsignedInt\",\n  XSD + \"unsignedShort\",\n  XSD + \"unsignedByte\",\n  XSD + \"positiveInteger\"\n];\n\nvar decimalDatatypes = [\n  XSD + \"decimal\",\n].concat(integerDatatypes);\n\nvar numericDatatypes = [\n  XSD + \"float\",\n  XSD + \"double\"\n].concat(decimalDatatypes);\n\nvar numericParsers = {};\nnumericParsers[XSD + \"integer\"] = function (label, parseError) {\n  if (!(label.match(/^[+-]?[0-9]+$/))) {\n    parseError(\"illegal integer value '\" + label + \"'\");\n  }\n  return parseInt(label);\n};\nnumericParsers[XSD + \"decimal\"] = function (label, parseError) {\n  if (!(label.match(/^[+-]?(?:[0-9]*\\.[0-9]+|[0-9]+)$/))) { // XSD has no pattern for decimal?\n    parseError(\"illegal decimal value '\" + label + \"'\");\n  }\n  return parseFloat(label);\n};\nconst DECIMAL_REGEX = /^[+\\-]?(?:[0-9]+(?:\\.[0-9]*)?|\\.[0-9]+)(?:[eE][+\\-]?[0-9]+)?$/;\nnumericParsers[XSD + \"float\"  ] = function (label, parseError) {\n  if (label === \"NaN\") return NaN;\n  if (label === \"INF\") return Infinity;\n  if (label === \"-INF\") return -Infinity;\n  if (!(label.match(DECIMAL_REGEX))) { // XSD has no pattern for float?\n    parseError(\"illegal float value '\" + label + \"'\");\n  }\n  return parseFloat(label);\n};\nnumericParsers[XSD + \"double\" ] = function (label, parseError) {\n  if (label === \"NaN\") return NaN;\n  if (label === \"INF\") return Infinity;\n  if (label === \"-INF\") return -Infinity;\n  if (!(label.match(DECIMAL_REGEX))) {\n    parseError(\"illegal double value '\" + label + \"'\");\n  }\n  return Number(label);\n};\n\ntestRange = function (value, datatype, parseError) {\n  const ranges = {\n    //    integer            -1 0 1 +1 | \"\" -1.0 +1.0 1e0 NaN INF\n    //    decimal            -1 0 1 +1 -1.0 +1.0 | \"\" 1e0 NaN INF\n    //    float              -1 0 1 +1 -1.0 +1.0 1e0 1E0 NaN INF -INF | \"\" +INF\n    //    double             -1 0 1 +1 -1.0 +1.0 1e0 1E0 NaN INF -INF | \"\" +INF\n    //    nonPositiveInteger -1 0 +0 -0 | 1 +1 1a a1\n    //    negativeInteger    -1 | 0 +0 -0 1\n    //    long               -1 0 1 +1 |\n    //    int                -1 0 1 +1 |\n    //    short              -32768 0 32767 | -32769 32768\n    //    byte               -128 0 127 | \"\" -129 128\n    //    nonNegativeInteger 0 -0 +0 1 +1 | -1\n    //    unsignedLong       0 1 | -1\n    //    unsignedInt        0 1 | -1\n    //    unsignedShort      0 65535 | -1 65536\n    //    unsignedByte       0 255 | -1 256\n    //    positiveInteger    1 | -1 0\n    //    string             \"\" \"a\" \"0\"\n    //    boolean            true false 0 1 | \"\" TRUE FALSE tRuE fAlSe -1 2 10 01\n    //    dateTime           \"2012-01-02T12:34:56.78Z\" | \"\" \"2012-01-02T\" \"2012-01-02\"\n    integer:            { min: -Infinity           , max: Infinity },\n    decimal:            { min: -Infinity           , max: Infinity },\n    float:              { min: -Infinity           , max: Infinity },\n    double:             { min: -Infinity           , max: Infinity },\n    nonPositiveInteger: { min: -Infinity           , max: 0        },\n    negativeInteger:    { min: -Infinity           , max: -1       },\n    long:               { min: -9223372036854775808, max: 9223372036854775807 },\n    int:                { min: -2147483648         , max: 2147483647 },\n    short:              { min: -32768              , max: 32767    },\n    byte:               { min: -128                , max: 127      },\n    nonNegativeInteger: { min: 0                   , max: Infinity },\n    unsignedLong:       { min: 0                   , max: 18446744073709551615 },\n    unsignedInt:        { min: 0                   , max: 4294967295 },\n    unsignedShort:      { min: 0                   , max: 65535    },\n    unsignedByte:       { min: 0                   , max: 255      },\n    positiveInteger:    { min: 1                   , max: Infinity }\n  }\n  var parms = ranges[datatype.substr(XSD.length)];\n  if (!parms) throw Error(\"unexpected datatype: \" + datatype);\n  if (value < parms.min) {\n    parseError(\"\\\"\" + value + \"\\\"^^<\" + datatype + \"> is less than the min:\", parms.min);\n  } else if (value > parms.max) {\n    parseError(\"\\\"\" + value + \"\\\"^^<\" + datatype + \"> is greater than the max:\", parms.min);\n  }\n};\n\n/*\nfunction intSubType (spec, label, parseError) {\n  var ret = numericParsers[XSD + \"integer\"](label, parseError);\n  if (\"min\" in spec && ret < spec.min)\n    parseError(\"illegal \" + XSD + spec.type + \" value '\" + label + \"' should not be < \" + spec.min);\n  if (\"max\" in spec && ret > spec.max)\n    parseError(\"illegal \" + XSD + spec.type + \" value '\" + label + \"' should not be > \" + spec.max);\n  return ret;\n}\n[{type: \"nonPositiveInteger\", max: 0},\n {type: \"negativeInteger\", max: -1},\n {type: \"long\", min: -9223372036854775808, max: 9223372036854775807}, // beyond IEEE double\n {type: \"int\", min: -2147483648, max: 2147483647},\n {type: \"short\", min: -32768, max: 32767},\n {type: \"byte\", min: -128, max: 127},\n {type: \"nonNegativeInteger\", min: 0},\n {type: \"unsignedLong\", min: 0, max: 18446744073709551615},\n {type: \"unsignedInt\", min: 0, max: 4294967295},\n {type: \"unsignedShort\", min: 0, max: 65535},\n {type: \"unsignedByte\", min: 0, max: 255},\n {type: \"positiveInteger\", min: 1}].forEach(function (i) {\n   numericParsers[XSD + i.type ] = function (label, parseError) {\n     return intSubType(i, label, parseError);\n   };\n });\n*/\n\nvar stringTests = {\n  length   : function (v, l) { return v.length === l; },\n  minlength: function (v, l) { return v.length  >= l; },\n  maxlength: function (v, l) { return v.length  <= l; }\n};\n\nvar numericValueTests = {\n  mininclusive  : function (n, m) { return n >= m; },\n  minexclusive  : function (n, m) { return n >  m; },\n  maxinclusive  : function (n, m) { return n <= m; },\n  maxexclusive  : function (n, m) { return n <  m; }\n};\n\nvar decimalLexicalTests = {\n  totaldigits   : function (v, d) {\n    var m = v.match(/[0-9]/g);\n    return m && m.length <= d;\n  },\n  fractiondigits: function (v, d) {\n    var m = v.match(/^[+-]?[0-9]*\\.?([0-9]*)$/);\n    return m && m[1].length <= d;\n  }\n};\n\n        function ldify (term) {\n          if (term[0] !== \"\\\"\")\n            return term;\n          var ret = { value: RdfTerm.getLiteralValue(term) };\n          var dt = RdfTerm.getLiteralType(term);\n          if (dt &&\n              dt !== \"http://www.w3.org/2001/XMLSchema#string\" &&\n              dt !== \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\")\n            ret.type = dt;\n          var lang = RdfTerm.getLiteralLanguage(term)\n          if (lang)\n            ret.language = lang;\n          return ret;\n        }\n\n    function isTerm (t) {\n      return typeof t !== \"object\" || \"value\" in t && Object.keys(t).reduce((r, k) => {\n        return r === false ? r : [\"value\", \"type\", \"language\"].indexOf(k) !== -1;\n      }, true);\n    }\n\n/* ShExValidator_constructor - construct an object for validating a schema.\n *\n * schema: a structure produced by a ShEx parser or equivalent.\n * options: object with controls for\n *   lax(true): boolean: whine about missing types in schema.\n *   diagnose(false): boolean: makde validate return a structure with errors.\n */\nfunction ShExValidator_constructor(schema, options) {\n  if (!(this instanceof ShExValidator_constructor))\n    return new ShExValidator_constructor(schema, options);\n  let index = schema._index || ShExUtil.index(schema)\n  this.type = \"ShExValidator\";\n  options = options || {};\n  this.options = options;\n  this.options.or = this.options.or || \"someOf\";\n  this.options.partition = this.options.partition || \"exhaustive\";\n  if (!(\"noCache\" in options && options.noCache))\n    this.known = {};\n\n  var _ShExValidator = this;\n  this.schema = schema;\n  this._expect = this.options.lax ? noop : expect; // report errors on missing types.\n  this._optimize = {}; // optimizations:\n    // hasRepeatedGroups: whether there are patterns like (:p1 ., :p2 .)*\n  this.reset = function () {  }; // included in case we need it later.\n  // var regexModule = this.options.regexModule || require(\"../lib/regex/nfax-val-1err\");\n  var regexModule = this.options.regexModule || __webpack_require__(/*! ../lib/regex/threaded-val-nerr */ \"./node_modules/@shexjs/core/lib/regex/threaded-val-nerr.js\");\n\n  /* getAST - compile a traditional regular expression abstract syntax tree.\n   * Tested but not used at present.\n   */\n  this.getAST = function () {\n    return {\n      type: \"AST\",\n      shapes: schema.shapes.reduce(function (ret, shape) {\n        ret[shape.id] = {\n          type: \"ASTshape\",\n          expression: _compileShapeToAST(shape.expression, [], _ShExValidator.schema)\n        };\n        return ret;\n      }, {})\n    };\n  };\n\n  /* indexTripleConstraints - compile regular expression and index triple constraints\n   */\n  this.indexTripleConstraints = function (expression) {\n    // list of triple constraints from (:p1 ., (:p2 . | :p3 .))\n    var tripleConstraints = [];\n\n    if (expression)\n      indexTripleConstraints_dive(expression);\n    return tripleConstraints;\n\n    function indexTripleConstraints_dive (expr) {\n      if (typeof expr === \"string\") // Inclusion\n        return record(indexTripleConstraints_dive(index.tripleExprs[expr]));\n\n      else if (expr.type === \"TripleConstraint\") {\n        tripleConstraints.push(expr);\n        return record([tripleConstraints.length - 1]); // index of expr\n      }\n\n      else if (expr.type === \"OneOf\" || expr.type === \"EachOf\")\n        return record(expr.expressions.reduce(function (acc, nested) {\n          return acc.concat(indexTripleConstraints_dive(nested));\n        }, []));\n\n      else if (expr.type === \"NestedShape\")\n        return [];\n\n      else\n        runtimeError(\"unexpected expr type: \" + expr.type);\n\n      function record (tcs) {\n        if (typeof expr !== \"string\" && \"onShapeExpression\" in expr) // !ShapeRef\n          expr.scopedTripleConstraints = tcs;\n        return tcs;\n      }\n    };\n  };\n\n  /* emptyTracker - a tracker that does nothing\n   */\n  this.emptyTracker = function () {\n    var noop = x => x;\n    return {\n      recurse: noop,\n      known: noop,\n      enter: function (point, label) { ++this.depth; },\n      exit: function (point, label, ret) { --this.depth; },\n      depth: 0\n    };\n  };\n\n  /* validate - test point in db against the schema for labelOrShape\n   * depth: level of recurssion; for logging.\n   */\n  this.validate = function (db, point, label, tracker, seen, subGraph) {\n    // default to schema's start shape\n    if (typeof point === \"object\" && \"termType\" in point) {\n      point = RdfTerm.internalTerm(point)\n    }\n    if (typeof point === \"object\") {\n      var shapeMap = point;\n      if (this.options.results === \"api\") {\n        return shapeMap.map(pair => {\n          var time = new Date();\n          var res = this.validate(db, pair.node, pair.shape, label, tracker); // really tracker and seen\n          time = new Date() - time;\n          return {\n            node: pair.node,\n            shape: pair.shape,\n            status: \"errors\" in res ? \"nonconformant\" : \"conformant\",\n            appinfo: res,\n            elapsed: time\n          };\n        });\n      }\n      var results = shapeMap.reduce((ret, pair) => {\n        var res = this.validate(db, pair.node, pair.shape, label, tracker, subGraph); // really tracker and seen\n        return \"errors\" in res ?\n          { passes: ret.passes, failures: ret.failures.concat(res) } :\n          { passes: ret.passes.concat(res), failures: ret.failures } ;\n      }, {passes: [], failures: []});\n      if (false) { var _add, ret; }\n      if (results.failures.length > 0) {\n        return results.failures.length !== 1 ?\n          { type: \"FailureList\", errors: results.failures } :\n          results.failures [0];\n      } else {\n        return results.passes.length !== 1 ?\n          { type: \"SolutionList\", solutions: results.passes } :\n          results.passes [0];\n      }\n    }\n\n    var outside = tracker === undefined;\n    // logging stuff\n    if (!tracker)\n      tracker = this.emptyTracker();\n    if (!label || label === Start) {\n      if (!schema.start)\n        runtimeError(\"start production not defined\");\n    }\n\n    var shape = null;\n    if (label == Start) {\n      shape = schema.start;\n    } else if (!(\"shapes\" in this.schema) || this.schema.shapes.length === 0) {\n      runtimeError(\"shape \" + label + \" not found; no shapes in schema\");\n    } else if (label in index.shapeExprs) {\n      shape = index.shapeExprs[label]\n    } else {\n      runtimeError(\"shape \" + label + \" not found in:\\n\" + Object.keys(index.shapeExprs || []).map(s => \"  \" + s).join(\"\\n\"));\n    }\n    if (typeof label !== \"string\")\n      return this._validateShapeDecl(db, point, shape, Start, 0, tracker, seen);\n\n    if (seen === undefined)\n      seen = {};\n    var seenKey = point + \"@\" + (label === Start ? \"_: -start-\" : label);\n    if (!subGraph) {\n      if (seenKey in seen)\n        return tracker.recurse({\n          type: \"Recursion\",\n          node: ldify(point),\n          shape: label\n        });\n      if (\"known\" in this && seenKey in this.known)\n        return tracker.known(this.known[seenKey]);\n      seen[seenKey] = { point: point, shape: label };\n      tracker.enter(point, label);\n    }\n\n    function schemaExtensions (schema) {\n      var abstractness = {};\n      var extensions = Hierarchy.create();\n      makeSchemaVisitor().visitSchema(schema);\n      return extensions.children;\n\n      function makeSchemaVisitor (schema) {\n        var schemaVisitor = ShExUtil.Visitor();\n        var curLabel;\n        var curAbstract;\n        var oldVisitShapeDecl = schemaVisitor.visitShapeDecl;\n        schemaVisitor.visitShapeDecl = function (decl) {\n          curLabel = decl.id;\n          curAbstract = decl.abstract;\n          abstractness[decl.id] = decl.abstract;\n          return oldVisitShapeDecl.call(schemaVisitor, decl, decl.id);\n        };\n        var oldVisitShape = schemaVisitor.visitShape;\n        schemaVisitor.visitShape = function (shape) {\n          if (\"extends\" in shape) {\n            shape.extends.forEach(ext => {\n              var extendsVisitor = ShExUtil.Visitor();\n              extendsVisitor.visitShapeRef = function (parent) {\n                extensions.add(parent, curLabel);\n                // makeSchemaVisitor().visitSchema(schema);\n                return \"null\";\n              };\n              extendsVisitor.visitShapeExpr(ext);\n            })\n          }\n          return \"null\";\n        };\n        return schemaVisitor;\n      }\n    }\n    // Get derived shapes.\n    var candidates = [label];\n    if (!subGraph) {\n      candidates = candidates.concat(schemaExtensions(this.schema)[label] || []);\n      // Uniquify list.\n      for (var i = candidates.length - 1; i >= 0; --i) {\n        if (candidates.indexOf(candidates[i]) < i)\n          candidates.splice(i, 1);\n      }\n      // Filter out abstract shapes.\n      candidates = candidates.filter(l => !index.shapeExprs[l].abstract);\n    }\n    var results = candidates.reduce((ret, label) => {\n      var shapeExpr = index.shapeExprs[label];\n      var res = this._validateShapeDecl(db, point, shapeExpr, label, 0, tracker, seen, subGraph);\n      return \"errors\" in res ?\n        { passes: ret.passes, failures: ret.failures.concat(res) } :\n        { passes: ret.passes.concat(res), failures: ret.failures } ;\n\n    }, {passes: [], failures: []});\n    var ret;\n    if (results.passes.length > 0) {\n      ret = results.passes.length !== 1 ?\n        { type: \"SolutionList\", solutions: results.passes } :\n      results.passes [0];\n    } else if (results.failures.length > 0) {\n      ret = results.failures.length !== 1 ?\n        { type: \"FailureList\", errors: results.failures } :\n      results.failures [0];\n    } else {\n      ret = {\n        type: \"AbstractShapeFailure\",\n        shape: label,\n        errors: label + \" has no non-abstract children\"\n      };\n    }\n    if (!subGraph) {\n      tracker.exit(point, label, ret);\n      delete seen[seenKey];\n      // Don't cache EXTENDS validations as they aren't testing the neighborhood.\n      if (\"known\" in this)\n        this.known[seenKey] = ret;\n    }\n    if (\"startActs\" in schema && outside) {\n      ret.startActs = schema.startActs;\n    }\n    return ret;\n  }\n\n  this._validateShapeDecl = function (db, point, shapeExpr, shapeLabel, depth, tracker, seen, subgraph) {\n    var expr = shapeExpr.type === \"ShapeDecl\" ? shapeExpr.shapeExpr : shapeExpr;\n    return this._validateShapeExpr(db, point, expr, shapeLabel, depth, tracker, seen, subgraph);\n  }\n\n  this._validateShapeExpr = function (db, point, shapeExpr, shapeLabel, depth, tracker, seen, subgraph) {\n    if (point === \"\")\n      throw Error(\"validation needs a valid focus node\");\n    if (typeof shapeExpr === \"string\") { // ShapeRef\n      return this._validateShapeDecl(db, point, index.shapeExprs[shapeExpr], shapeExpr, depth, tracker, seen, subgraph);\n    } else if (shapeExpr.type === \"NodeConstraint\") {\n      var sub = this._errorsMatchingNodeConstraint(point, shapeExpr, null);\n      return sub.errors && sub.errors.length ? {\n        type: \"Failure\",\n        node: ldify(point),\n        shape: shapeLabel,\n        errors: sub.errors.map(function (error) { // !!! just sub.errors?\n          return {\n            type: \"NodeConstraintViolation\",\n            shapeExpr: shapeExpr,\n            error: error\n          };\n        })\n      } : {\n        type: \"NodeTest\",\n        node: ldify(point),\n        shape: shapeLabel,\n        shapeExpr: shapeExpr\n      };\n    } else if (shapeExpr.type === \"Shape\") {\n      return this._validateShape(db, point, shapeExpr, shapeLabel, depth, tracker, seen, subgraph);\n      // return this._validateShape(db, point, regexModule.compile(schema, shapeExpr, index),\n      //                            shapeExpr, shapeLabel, tracker, seen);\n    } else if (shapeExpr.type === \"ShapeExternal\") {\n      return this.options.validateExtern(db, point, shapeLabel, tracker, seen);\n    } else if (shapeExpr.type === \"ShapeOr\") {\n      var errors = [];\n      for (var i = 0; i < shapeExpr.shapeExprs.length; ++i) {\n        var nested = shapeExpr.shapeExprs[i];\n        var sub = this._validateShapeExpr(db, point, nested, shapeLabel, depth, tracker, seen, subgraph);\n        if (\"errors\" in sub)\n          errors.push(sub);\n        else\n          return { type: \"ShapeOrResults\", solution: sub };\n      }\n      return { type: \"ShapeOrFailure\", errors: errors };\n    } else if (shapeExpr.type === \"ShapeNot\") {\n      var sub = this._validateShapeExpr(db, point, shapeExpr.shapeExpr, shapeLabel, depth, tracker, seen, subgraph);\n      if (\"errors\" in sub)\n          return { type: \"ShapeNotResults\", solution: sub };\n        else\n          return { type: \"ShapeNotFailure\", errors: sub };\n    } else if (shapeExpr.type === \"ShapeAnd\") {\n      var passes = [];\n      for (var i = 0; i < shapeExpr.shapeExprs.length; ++i) {\n        var nested = shapeExpr.shapeExprs[i];\n        var sub = this._validateShapeExpr(db, point, nested, shapeLabel, depth, tracker, seen, subgraph);\n        if (\"errors\" in sub)\n          return { type: \"ShapeAndFailure\", errors: [sub] };\n        else\n          passes.push(sub);\n      }\n      return { type: \"ShapeAndResults\", solutions: passes };\n    } else\n      throw Error(\"expected one of Shape{Ref,And,Or} or NodeConstraint, got \" + JSON.stringify(shapeExpr));\n  }\n\n  this._validateShape = function (db, point, shape, shapeLabel, depth, tracker, seen, subgraph) {\n    var _ShExValidator = this;\n    var valParms = { db: db, shapeLabel: shapeLabel, depth: depth, tracker: tracker, seen: seen };\n\n    var extendedTCs = []; // TCs found in the extends\n    var constraintToExtends = []; // map from TC to list of extends\n    effectiveShapeExpression(shape, extendedTCs, constraintToExtends);\n      // var tempShape = new ShExWriter({simplifyParentheses: true})._writeShapeExpr(effectiveExpr).join('');\n      // console.log(JSON.stringify(effectiveExpr, null, 2))\n      // console.log(tempShape)\n      // var tempSchema = {type:\"Schema\", shapes: {}}; tempSchema.shapes[labelOrShape] = effectiveExpr;\n      // new ShEx.Writer().writeSchema(tempSchema, function (error, text, prefixes) { console.log(text) })\n\n\n    var ret = null;\n    var startAcionStorage = {}; // !!! need test to see this write to results structure.\n    if (\"startActs\" in schema && !this.semActHandler.dispatchAll(schema.startActs, null, startAcionStorage))\n      return {\n        type: \"Failure\",\n        node: ldify(point),\n        shape: shapeLabel,\n        errors: ['semact failure']\n      }; // some semAct aborted !! return real error\n    // @@ add to tracker: f(\"validating <\" + point + \"> as <\" + shapeLabel + \">\");\n\n    var fromDB  = (subgraph || db).getNeighborhood(point, shapeLabel, shape);\n    var outgoing = indexNeighborhood(fromDB.outgoing.sort(\n      (l, r) => l.predicate.localeCompare(r.predicate) || sparqlOrder(l.object, r.object)\n    ));\n    var incoming = indexNeighborhood(fromDB.incoming.sort(\n      (l, r) => l.predicate.localeCompare(r.predicate) || sparqlOrder(l.subject, r.subject)\n    ));\n    var outgoingLength = fromDB.outgoing.length;\n    var neighborhood = fromDB.outgoing.concat(fromDB.incoming);\n\n    var localTCs = this.indexTripleConstraints(shape.expression);\n    var constraintList = extendedTCs.concat(localTCs); // !! adds tcis to shape.expression\n    var tripleList = constraintList.reduce(function (ret, constraint, cNo) {\n\n      // subject and object depend on direction of constraint.\n      var searchSubject = constraint.inverse ? null : point;\n      var searchObject = constraint.inverse ? point : null;\n      var index = constraint.inverse ? incoming : outgoing;\n\n      // get triples matching predciate\n      var matchPredicate = index.byPredicate[constraint.predicate] ||\n        []; // empty list when no triple matches that constraint\n\n      // strip to triples matching value constraints (apart from @<someShape>)\n      var matchConstraints = _ShExValidator._triplesMatchingShapeExpr(\n        matchPredicate, constraint, valParms\n      );\n\n      matchConstraints.hits.forEach(function (evidence) {\n        var tNo = neighborhood.indexOf(evidence.triple);\n        ret.constraintList[tNo].push(cNo);\n        ret.results[cNo][tNo] = evidence.sub;\n      });\n      matchConstraints.misses.forEach(function (evidence) {\n        var tNo = neighborhood.indexOf(evidence.triple);\n        ret.misses[tNo] = {constraintNo: cNo, errors: evidence.errors};\n      });\n      return ret;\n    }, { misses: {}, results: _alist(constraintList.length), constraintList:_alist(neighborhood.length) }); // start with [[],[]...]\n\n    // @@ add to tracker: f(\"constraints by triple: \", JSON.stringify(tripleList.constraintList));\n\n    var extras = []; // triples accounted for by EXTRA\n    var misses = tripleList.constraintList.reduce(function (ret, constraints, ord) {\n      if (constraints.length === 0 &&   // matches no constraints\n          ord < outgoingLength &&       // not an incoming triple\n          ord in tripleList.misses) {   // predicate matched some constraint(s)\n        if (shape.extra !== undefined &&\n            shape.extra.indexOf(neighborhood[ord].predicate) !== -1) {\n          extras.push(ord);\n        } else {                                            // not declared extra\n          ret.push({                                        // so it's a missed triple.\n            tripleNo: ord,\n            constraintNo: tripleList.misses[ord].constraintNo,\n            errors: tripleList.misses[ord].errors\n          });\n        }\n      }\n      return ret;\n    }, []);\n\n    var xp = crossProduct(tripleList.constraintList);\n    var partitionErrors = [];\n    var regexEngine = regexModule.compile(schema, shape, index);\n    while (misses.length === 0 && xp.next() && ret === null) {\n      // caution: early continues\n\n      var usedTriples = []; // [{s1,p1,o1},{s2,p2,o2}] implicated triples -- used for messages\n      var constraintMatchCount = // [2,1,0,1] how many triples matched a constraint\n        _seq(neighborhood.length).map(function () { return 0; });\n      var tripleToConstraintMapping0 = xp.get(); // [0,1,0,3] mapping from triple to constraint\n      var tripleToConstraintMapping = []\n      var tripleToExtendsMapping = []\n      var extendsToTriples = _seq((shape.extends || []).length).map(() => [])\n      tripleToConstraintMapping0.forEach((cNo, tNo) => {\n        if (cNo < extendedTCs.length) {\n          constraintToExtends[cNo].forEach(extNo => {\n            extendsToTriples[extNo].push(neighborhood[tNo]);\n            tripleToExtendsMapping[tNo] = cNo;\n            tripleToConstraintMapping[tNo] = undefined;\n          })\n        } else {\n          tripleToExtendsMapping[tNo] = undefined;\n          tripleToConstraintMapping[tNo] = cNo;\n        }\n      });\n      // Triples not mapped to triple constraints are not allowed in closed shapes.\n      if (shape.closed) {\n        var unexpectedTriples = neighborhood.slice(0, outgoingLength).filter((t, i) => {\n          return tripleToExtendsMapping[i] === undefined && // didn't match an EXTENDS\n          tripleToConstraintMapping[i] === undefined && // didn't match a constraint\n          extras.indexOf(i) === -1; // wasn't in EXTRAs.\n        });\n        if (unexpectedTriples.length > 0) {\n          partitionErrors.push({\n            errors: [\n              {\n                type: \"ClosedShapeViolation\",\n                unexpectedTriples: unexpectedTriples\n              }\n            ]\n          });\n          continue; // closed shape violation.\n        }\n      }\n\n      // Set usedTriples and constraintMatchCount.\n      tripleToConstraintMapping.forEach(function (tpNumber, ord) {\n        if (tpNumber !== undefined) {\n          usedTriples.push(neighborhood[ord]);\n          ++constraintMatchCount[tpNumber];\n        }\n      });\n\n      // Pivot to triples by constraint.\n      function _constraintToTriples () {\n        return tripleToConstraintMapping.slice().\n          reduce(function (ret, cNo, tNo) {\n            if (cNo !== undefined)\n              ret[cNo].push({tNo: tNo, res: tripleList.results[cNo][tNo]});\n            return ret;\n          }, _seq(constraintList.length).map(() => [])); // [length][]\n      }\n      var constraintToTriplesMapping = _constraintToTriples(); // e.g. [[t0, t2], [t1, t3]]\n\n      tripleToConstraintMapping.slice().sort(function (a,b) { return a-b; }).filter(function (i) { // sort constraint numbers\n        return i !== undefined;\n      }).map(function (n) { return n + \" \"; }).join(\"\"); // e.g. 0 0 1 3 \n\n      var results = passScoped(shape, extendsToTriples, valParms);\n      if (results === null || !(\"errors\" in results)) {\n        var sub = regexEngine.match(db, point, constraintList, constraintToTriplesMapping, tripleToConstraintMapping, neighborhood, this.semActHandler, null);\n        if (!(\"errors\" in sub) && results) {\n          results = { type: \"ExtendedResults\", extensions: results };\n          if (Object.keys(sub).length > 0) // no empty objects from {}s.\n            results.local = sub;\n        } else {\n          results = sub;\n        }\n      }\n      if (\"errors\" in results) {\n        partitionErrors.push({\n          errors: results.errors\n        });\n        if (_ShExValidator.options.partition !== \"exhaustive\")\n          break;\n        else\n          continue;\n      }\n\n      // @@ add to tracker: f(\"post-regexp \" + usedTriples.join(\" \"));\n\n      var possibleRet = { type: \"ShapeTest\", node: ldify(point), shape: shapeLabel };\n      if (Object.keys(results).length > 0) // only include .solution for non-empty pattern\n        possibleRet.solution = results;\n      if (\"semActs\" in shape &&\n          !this.semActHandler.dispatchAll(shape.semActs, results, possibleRet)) {\n        // some semAct aborted\n        partitionErrors.push({\n          errors: [ { type: \"SemActFailure\", errors: [{ type: \"UntrackedSemActFailure\" }] } ]\n        });\n        if (_ShExValidator.options.partition !== \"exhaustive\")\n          break;\n        else\n          continue;\n      }\n      // @@ add to tracker: f(\"final \" + usedTriples.join(\" \"));\n\n      ret = possibleRet;\n      // alts.push(tripleToConstraintMapping);\n\n      function passScoped (expr, extendsToTriples, valParms) {\n        if (!(\"extends\" in expr))\n          return null;\n        var passes = [];\n        for (var eNo = 0; eNo < expr.extends.length; ++eNo) {\n          var extend = expr.extends[eNo];\n          var subgraph = ShExUtil.makeTriplesDB(null); // These triples were tracked earlier.\n          extendsToTriples[eNo].forEach(t => subgraph.addOutgoingTriples([t]));\n          var sub = _ShExValidator._errorsMatchingShapeExpr(point, extend, valParms, subgraph);\n          if (\"errors\" in sub)\n            return { type: \"ExtensionFailure\", errors: [sub] };\n          else\n            passes.push(sub);\n        }\n\n        return { type: \"ExtensionResults\", solutions: passes };\n      }\n\n    }\n    if (ret === null/* !! && this.options.diagnose */) {\n      var missErrors = misses.map(function (miss) {\n        var t = neighborhood[miss.tripleNo];\n        return {\n          type: \"TypeMismatch\",\n          triple: {type: \"TestedTriple\", subject: t.subject, predicate: t.predicate, object: ldify(t.object)},\n          constraint: constraintList[miss.constraintNo],\n          errors: miss.errors\n        };\n      });\n      ret = {\n        type: \"Failure\",\n        node: ldify(point),\n        shape: shapeLabel,\n        errors: missErrors.concat(partitionErrors.length === 1 ? partitionErrors[0].errors : partitionErrors) \n      };\n    }\n\n    if (VERBOSE) { // remove N3jsTripleToString\n      neighborhood.forEach(function (t) {\n        delete t.toString;\n      });\n    }\n    // @@ add to tracker: f(\"</\" + shapeLabel + \">\");\n    return addShapeAttributes(ret);\n\n    function addShapeAttributes (ret) {\n      if (\"annotations\" in shape)\n        ret.annotations = shape.annotations;\n      return ret;\n    }\n  };\n\n  this._triplesMatchingShapeExpr = function (triples, constraint, valParms) {\n    var _ShExValidator = this;\n    var misses = [];\n    var hits = [];\n    triples.forEach(function (triple) {\n      var value = constraint.inverse ? triple.subject : triple.object;\n      var sub;\n      var oldBindings = JSON.parse(JSON.stringify(_ShExValidator.semActHandler.results));\n      var errors = constraint.valueExpr === undefined ?\n          undefined :\n          (sub = _ShExValidator._errorsMatchingShapeExpr(value, constraint.valueExpr, valParms)).errors;\n      if (!errors && \"semActs\" in constraint &&\n          !_ShExValidator.semActHandler.dispatchAll(constraint.semActs, triple,\n                                    {\n                                      type: \"TestedTriple\", subject: triple.subject, predicate: triple.predicate, object: ldify(triple.object)\n                                    })) {\n        errors = [{ type: \"SemActFailure\", errors: [{ type: \"UntrackedSemActFailure\" }] }] // some semAct aborted\n      }\n      if (!errors) {\n        hits.push({triple: triple, sub: sub});\n      } else if (hits.indexOf(triple) === -1) {\n        _ShExValidator.semActHandler.results = JSON.parse(JSON.stringify(oldBindings));\n        misses.push({triple: triple, errors: errors});\n      }\n    });\n    return { hits: hits, misses: misses };\n  }\n  this._errorsMatchingShapeExpr = function (value, valueExpr, valParms, subgraph) {\n    var _ShExValidator = this;\n    if (typeof valueExpr === \"string\") { // ShapeRef\n      return _ShExValidator.validate(valParms.db, value, valueExpr, valParms.tracker, valParms.seen, subgraph);\n    } else if (valueExpr.type === \"NodeConstraint\") {\n      return this._errorsMatchingNodeConstraint(value, valueExpr, null);\n    } else if (valueExpr.type === \"Shape\") {\n      return _ShExValidator._validateShapeExpr(valParms.db, value, valueExpr, valParms.shapeLabel, valParms.depth, valParms.tracker, valParms.seen, subgraph)\n      return validateBySExpr(value, valueExpr);\n    } else if (valueExpr.type === \"ShapeOr\") {\n      var errors = [];\n      for (var i = 0; i < valueExpr.shapeExprs.length; ++i) {\n        var nested = valueExpr.shapeExprs[i];\n        var sub = _ShExValidator._errorsMatchingShapeExpr(value, nested, valParms, subgraph);\n        if (\"errors\" in sub)\n          errors.push(sub);\n        else\n          return { type: \"ShapeOrResults\", solution: sub };\n      }\n      return { type: \"ShapeOrFailure\", errors: errors };\n    } else if (valueExpr.type === \"ShapeAnd\") {\n      var passes = [];\n      for (var i = 0; i < valueExpr.shapeExprs.length; ++i) {\n        var nested = valueExpr.shapeExprs[i];\n        var sub = _ShExValidator._errorsMatchingShapeExpr(value, nested, valParms, subgraph);\n        if (\"errors\" in sub)\n          return { type: \"ShapeAndFailure\", errors: [sub] };\n        else\n          passes.push(sub);\n      }\n      return { type: \"ShapeAndResults\", solutions: passes };\n    } else if (valueExpr.type === \"ShapeNot\") {\n      var sub = _ShExValidator._errorsMatchingShapeExpr(value, valueExpr.shapeExpr, valParms, subgraph);\n      // return sub.errors && sub.errors.length ? {} : {\n      //   errors: [\"Error validating \" + value + \" as \" + JSON.stringify(valueExpr) + \": expected NOT to pass\"] };\n      var ret = Object.assign({\n        type: null,\n        focus: value\n      }, valueExpr);\n      if (sub.errors && sub.errors.length) {\n        ret.type = \"ShapeNotTest\";\n        // ret = {};\n      } else {\n        ret.type = \"ShapeNotFailure\";\n        ret.errors = [\"Error validating \" + value + \" as \" + JSON.stringify(valueExpr) + \": expected NOT to pass\"]\n      }\n      return ret;\n    } else {\n      throw Error(\"unknown value expression type '\" + valueExpr.type + \"'\");\n    }\n  };\n\n  /* _errorsMatchingNodeConstraint - return whether the value matches the value\n   * expression without checking shape references.\n   */\n  this._errorsMatchingNodeConstraint = function (value, valueExpr, recurse) {\n    var errors = [];\n    var label = RdfTerm.isLiteral(value) ? RdfTerm.getLiteralValue(value) :\n      RdfTerm.isBlank(value) ? value.substring(2) :\n      value;\n    var dt = RdfTerm.isLiteral(value) ? RdfTerm.getLiteralType(value) : null;\n    var numeric = integerDatatypes.indexOf(dt) !== -1 ? XSD + \"integer\" : numericDatatypes.indexOf(dt) !== -1 ? dt : undefined;\n\n    function validationError () {\n      var errorStr = Array.prototype.join.call(arguments, \"\");\n      errors.push(\"Error validating \" + value + \" as \" + JSON.stringify(valueExpr) + \": \" + errorStr);\n      return false;\n    }\n    // if (negated) ;\n    if (false) {} else {\n      if (\"nodeKind\" in valueExpr) {\n        if ([\"iri\", \"bnode\", \"literal\", \"nonliteral\"].indexOf(valueExpr.nodeKind) === -1) {\n          validationError(\"unknown node kind '\" + valueExpr.nodeKind + \"'\");\n        }\n        if (RdfTerm.isBlank(value)) {\n          if (valueExpr.nodeKind === \"iri\" || valueExpr.nodeKind === \"literal\") {\n            validationError(\"blank node found when \" + valueExpr.nodeKind + \" expected\");\n          }\n        } else if (RdfTerm.isLiteral(value)) {\n          if (valueExpr.nodeKind !== \"literal\") {\n            validationError(\"literal found when \" + valueExpr.nodeKind + \" expected\");\n          }\n        } else if (valueExpr.nodeKind === \"bnode\" || valueExpr.nodeKind === \"literal\") {\n          validationError(\"iri found when \" + valueExpr.nodeKind + \" expected\");\n        }\n      }\n\n      if (valueExpr.datatype  && valueExpr.values  ) validationError(\"found both datatype and values in \"   +tripleConstraint);\n\n      if (valueExpr.datatype) {\n        if (!RdfTerm.isLiteral(value)) {\n          validationError(\"mismatched datatype: \" + value + \" is not a literal with datatype \" + valueExpr.datatype);\n        }\n        else if (RdfTerm.getLiteralType(value) !== valueExpr.datatype) {\n          validationError(\"mismatched datatype: \" + RdfTerm.getLiteralType(value) + \" !== \" + valueExpr.datatype);\n        }\n        else if (numeric) {\n          testRange(numericParsers[numeric](label, validationError), valueExpr.datatype, validationError);\n        }\n        else if (valueExpr.datatype === XSD + \"boolean\") {\n          if (label !== \"true\" && label !== \"false\" && label !== \"1\" && label !== \"0\")\n            validationError(\"illegal boolean value: \" + label);\n        }\n        else if (valueExpr.datatype === XSD + \"dateTime\") {\n          if (!label.match(/^[+-]?\\d{4}-[01]\\d-[0-3]\\dT[0-5]\\d:[0-5]\\d:[0-5]\\d(\\.\\d+)?([+-][0-2]\\d:[0-5]\\d|Z)?$/))\n            validationError(\"illegal dateTime value: \" + label);\n        }\n      }\n\n      if (valueExpr.values) {\n        if (RdfTerm.isLiteral(value) && valueExpr.values.reduce((ret, v) => {\n          if (ret) return true;\n          var ld = ldify(value);\n          if (v.type === \"Language\") {\n            return v.languageTag === ld.language; // @@ use equals/normalizeTest\n          }\n          if (!(typeof v === \"object\" && \"value\" in v))\n            return false;\n          return v.value === ld.value &&\n            v.type === ld.type &&\n            v.language === ld.language;\n        }, false)) {\n          // literal match\n        } else if (valueExpr.values.indexOf(value) !== -1) {\n          // trivial match\n        } else {\n          if (!(valueExpr.values.some(function (valueConstraint) {\n            if (typeof valueConstraint === \"object\" && !(\"value\" in valueConstraint)) { // isTerm me -- strike \"value\" in\n              if (!(\"type\" in valueConstraint))\n                runtimeError(\"expected \"+JSON.stringify(valueConstraint)+\" to have a 'type' attribute.\");\n              var stemRangeTypes = [\n                \"Language\",\n                \"IriStem\",      \"LiteralStem\",      \"LanguageStem\",\n                \"IriStemRange\", \"LiteralStemRange\", \"LanguageStemRange\"\n              ];\n              if (stemRangeTypes.indexOf(valueConstraint.type) === -1)\n                runtimeError(\"expected type attribute '\"+valueConstraint.type+\"' to be in '\"+stemRangeTypes+\"'.\");\n\n              /* expect N3.js literals with {Literal,Language}StemRange\n               *       or non-literals with IriStemRange\n               */\n              function normalizedTest (val, ref, func) {\n                if (RdfTerm.isLiteral(val)) {\n                  if ([\"LiteralStem\", \"LiteralStemRange\"].indexOf(valueConstraint.type) !== -1) {\n                    return func(RdfTerm.getLiteralValue(val), ref);\n                  } else if ([\"LanguageStem\", \"LanguageStemRange\"].indexOf(valueConstraint.type) !== -1) {\n                    return func(RdfTerm.getLiteralLanguage(val) || null, ref);\n                  } else {\n                    return validationError(\"literal \" + val + \" not comparable with non-literal \" + ref);\n                  }\n                } else {\n                  if ([\"IriStem\", \"IriStemRange\"].indexOf(valueConstraint.type) === -1) {\n                    return validationError(\"nonliteral \" + val + \" not comparable with literal \" + JSON.stringify(ref));\n                  } else {\n                    return func(val, ref);\n                  }\n                }\n              }\n              function startsWith (val, ref) {\n                return normalizedTest(val, ref, (l, r) => {\n                  return (valueConstraint.type === \"LanguageStem\" ||\n                          valueConstraint.type === \"LanguageStemRange\") ?\n                    // rfc4647 basic filtering\n                    l !== null && (l === r || r === \"\" || l[r.length] === \"-\") :\n                    // simple substring\n                    l.startsWith(r);\n                });\n              }\n              function equals (val, ref) {\n                return normalizedTest(val, ref, (l, r) => { return l === r; });\n              }\n\n              if (!isTerm(valueConstraint.stem)) {\n                expect(valueConstraint.stem, \"type\", \"Wildcard\");\n                // match whatever but check exclusions below\n              } else {\n                if (!(startsWith(value, valueConstraint.stem))) {\n                  return false;\n                }\n              }\n              if (valueConstraint.exclusions) {\n                return !valueConstraint.exclusions.some(function (c) {\n                  if (!isTerm(c)) {\n                    if (!(\"type\" in c))\n                      runtimeError(\"expected \"+JSON.stringify(c)+\" to have a 'type' attribute.\");\n                    var stemTypes = [\"IriStem\", \"LiteralStem\", \"LanguageStem\"];\n                    if (stemTypes.indexOf(c.type) === -1)\n                      runtimeError(\"expected type attribute '\"+c.type+\"' to be in '\"+stemTypes+\"'.\");\n                    return startsWith(value, c.stem);\n                  } else {\n                    return equals(value, c);\n                  }\n                });\n              }\n              return true;\n            } else {\n              // ignore -- would have caught it above\n            }\n          }))) {\n            validationError(\"value \" + value + \" not found in set \" + JSON.stringify(valueExpr.values));\n          }\n        }\n      }\n    }\n\n    if (\"pattern\" in valueExpr) {\n      var regexp = \"flags\" in valueExpr ?\n\t  new RegExp(valueExpr.pattern, valueExpr.flags) :\n\t  new RegExp(valueExpr.pattern);\n      if (!(getLexicalValue(value).match(regexp)))\n        validationError(\"value \" + getLexicalValue(value) + \" did not match pattern \" + valueExpr.pattern);\n    }\n\n    Object.keys(stringTests).forEach(function (test) {\n      if (test in valueExpr && !stringTests[test](label, valueExpr[test])) {\n        validationError(\"facet violation: expected \" + test + \" of \" + valueExpr[test] + \" but got \" + value);\n      }\n    });\n\n    Object.keys(numericValueTests).forEach(function (test) {\n      if (test in valueExpr) {\n        if (numeric) {\n          if (!numericValueTests[test](numericParsers[numeric](label, validationError), valueExpr[test])) {\n            validationError(\"facet violation: expected \" + test + \" of \" + valueExpr[test] + \" but got \" + value);\n          }\n        } else {\n          validationError(\"facet violation: numeric facet \" + test + \" can't apply to \" + value);\n        }\n      }\n    });\n\n    Object.keys(decimalLexicalTests).forEach(function (test) {\n      if (test in valueExpr) {\n        if (numeric === XSD + \"integer\" || numeric === XSD + \"decimal\") {\n          if (!decimalLexicalTests[test](\"\"+numericParsers[numeric](label, validationError), valueExpr[test])) {\n            validationError(\"facet violation: expected \" + test + \" of \" + valueExpr[test] + \" but got \" + value);\n          }\n        } else {\n          validationError(\"facet violation: numeric facet \" + test + \" can't apply to \" + value);\n        }\n      }\n    });\n    var ret = {\n      type: null,\n      focus: value,\n      shapeExpr: valueExpr\n    };\n    if (errors.length) {\n      ret.type = \"NodeConstraintViolation\";\n      ret.errors = errors;\n    } else {\n      ret.type = \"NodeConstraintTest\";\n    }\n    return ret;\n  };\n\n  this.semActHandler = {\n    handlers: { },\n    results: { },\n    /**\n     * Store a semantic action handler.\n     *\n     * @param {string} name - semantic action's URL.\n     * @param {object} handler - handler function.\n     *\n     * The handler object has a dispatch function is invoked with:\n     * @param {string} code - text of the semantic action.\n     * @param {object} ctx - matched triple or results subset.\n     * @param {object} extensionStorage - place where the extension writes into the result structure.\n     * @return {bool} false if the extension failed or did not accept the ctx object.\n     */\n    register: function (name, handler) {\n      this.handlers[name] = handler;\n    },\n    /**\n     * Calls all semantic actions, allowing each to write to resultsArtifact.\n     *\n     * @param {array} semActs - list of semantic actions to invoke.\n     * @return {bool} false if any result was false.\n     */\n    dispatchAll: function (semActs, ctx, resultsArtifact) {\n      var _semActHanlder = this;\n      return semActs.reduce(function (ret, semAct) {\n        if (ret && semAct.name in _semActHanlder.handlers) {\n          var code = \"code\" in semAct ? semAct.code : _ShExValidator.options.semActs[semAct.name];\n          var existing = \"extensions\" in resultsArtifact && semAct.name in resultsArtifact.extensions;\n          var extensionStorage = existing ? resultsArtifact.extensions[semAct.name] : {};\n          ret = ret && _semActHanlder.handlers[semAct.name].dispatch(code, ctx, extensionStorage);\n          if (!existing && Object.keys(extensionStorage).length > 0) {\n            if (!(\"extensions\" in resultsArtifact))\n              resultsArtifact.extensions = {};\n            resultsArtifact.extensions[semAct.name] = extensionStorage;\n          }\n          return ret;\n        }\n        return ret;\n      }, true);\n    }\n  };\n\n  function effectiveShapeExpression (shape, tcs, constraintToExtends) {\n    if (\"extends\" in shape) {\n      shape.extends.forEach((se, extendsNo) => {\n        // build NestedShape.scopedTripleConstraints = indexes of the TCs in se\n        var ins = {}, outs = {};\n        // constraintToExtends[extendsNo] = [];\n        mergeEffectiveTripleConstraints(se, ins, outs);\n        [ins, outs].forEach(direction => {\n          Object.keys(direction).forEach(p => {\n            // constraintToExtends[extendsNo].push(tcs.length);\n            let tc = direction[p]\n            let cNo = tcs.indexOf(tc)\n            if (cNo === -1) {\n              cNo = tcs.length\n              tcs.push(tc)\n              constraintToExtends[cNo] = []\n            } else {\n              console.log(\"reuse\", tc)\n            }\n            constraintToExtends[cNo].push(extendsNo);\n          })\n        });\n      })\n    }\n    return;\n\n    /** mergeEffectiveTripleConstraints - turn a ShapeExpression with\n     * a projection te into TripleExpression with an optional SE'\n     * where shapes contributing to te are NOPs.\n\n     * @expr - shape expression to walk\n     * @ins - incoming arcs: map from IRI to {min, max, seen}\n     * @outs - outgoing arcs\n     */\n    function mergeEffectiveTripleConstraints (expr, ins, outs) {\n      var visitor = ShExUtil.Visitor();\n      var outerMin = 1;\n      var outerMax = 1;\n      var oldVisitOneOf = visitor.visitOneOf;\n\n      visitor.visitShapeRef = function (inclusion) {\n        return visitor.visitShapeDecl(index.shapeExprs[inclusion]);\n      };\n\n      visitor.visitShape = function (shape, label) {\n        if (\"extends\" in shape) {\n          shape.extends.forEach( // extension of an extension\n            se => mergeEffectiveTripleConstraints(se, ins, outs)\n          )\n        }\n        if (\"expression\" in shape) {\n          visitor.visitExpression(shape.expression);\n        }\n        return { type: \"Shape\" }; // NOP\n      }\n\n      visitor.visitOneOf = function (expr) {\n        var oldOuterMin = outerMin;\n        var oldOuterMax = outerMax;\n        outerMin = 0;\n        oldVisitOneOf.call(visitor, expr);\n        outerMin = oldOuterMin;\n        outerMax = oldOuterMax;\n      }\n\n      visitor.visitTripleConstraint = function (expr) {\n        idx = expr.inverse ? ins : outs; // pick an index\n        var min = \"min\" in expr ? expr.min : 1; min = min * outerMin;\n        var max = \"max\" in expr ? expr.max : 1; max = max * outerMax;\n        idx[expr.predicate] = {\n          type: \"TripleConstraint\",\n          predicate: expr.predicate,\n          min: expr.predicate in idx ? Math.max(idx[expr.predicate].min, min) : min,\n          max: expr.predicate in idx ? Math.min(idx[expr.predicate].max, max) : max,\n          seen: expr.predicate in idx ? idx[expr.predicate].seen + 1 : 1,\n          tcs: expr.predicate in idx ? idx[expr.predicate].tcs.concat([expr]) : [expr]\n        }\n        return expr;\n      };\n\n      visitor.visitShapeExpr(expr);\n    }\n  }\n}\n\n/* _compileShapeToAST - compile a shape expression to an abstract syntax tree.\n *\n * currently tested but not used.\n */\nfunction _compileShapeToAST (expression, tripleConstraints, schema) {\n\n  function Epsilon () {\n    this.type = \"Epsilon\";\n  }\n\n  function TripleConstraint (ordinal, predicate, inverse, negated, valueExpr) {\n    this.type = \"TripleConstraint\";\n    // this.ordinal = ordinal; @@ does 1card25\n    this.inverse = !!inverse;\n    this.negated = !!negated;\n    this.predicate = predicate;\n    if (valueExpr !== undefined)\n      this.valueExpr = valueExpr;\n  }\n\n  function Choice (disjuncts) {\n    this.type = \"Choice\";\n    this.disjuncts = disjuncts;\n  }\n\n  function EachOf (conjuncts) {\n    this.type = \"EachOf\";\n    this.conjuncts = conjuncts;\n  }\n\n  function SemActs (expression, semActs) {\n    this.type = \"SemActs\";\n    this.expression = expression;\n    this.semActs = semActs;\n  }\n\n  function KleeneStar (expression) {\n    this.type = \"KleeneStar\";\n    this.expression = expression;\n  }\n\n  function _compileExpression (expr, schema) {\n    var repeated, container;\n\n    /* _repeat: map expr with a min and max cardinality to a corresponding AST with Groups and Stars.\n       expr 1 1 => expr\n       expr 0 1 => Choice(expr, Eps)\n       expr 0 3 => Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps)\n       expr 2 5 => EachOf(expr, expr, Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps))\n       expr 0 * => KleeneStar(expr)\n       expr 1 * => EachOf(expr, KleeneStar(expr))\n       expr 2 * => EachOf(expr, expr, KleeneStar(expr))\n\n       @@TODO: favor Plus over Star if Epsilon not in expr.\n    */\n    function _repeat (expr, min, max) {\n      if (min === undefined) { min = 1; }\n      if (max === undefined) { max = 1; }\n\n      if (min === 1 && max === 1) { return expr; }\n\n      var opts = max === UNBOUNDED ?\n        new KleeneStar(expr) :\n        _seq(max - min).reduce(function (ret, elt, ord) {\n          return ord === 0 ?\n            new Choice([expr, new Epsilon]) :\n            new Choice([new EachOf([expr, ret]), new Epsilon]);\n        }, undefined);\n\n      var reqd = min !== 0 ?\n        new EachOf(_seq(min).map(function (ret) {\n          return expr; // @@ something with ret\n        }).concat(opts)) : opts;\n      return reqd;\n    }\n\n    if (typeof expr === \"string\") { // Inclusion\n      var included = schema._index.tripleExprs[expr].expression;\n      return _compileExpression(included, schema);\n    }\n\n    else if (expr.type === \"TripleConstraint\") {\n      // predicate, inverse, negated, valueExpr, annotations, semActs, min, max\n      var valueExpr = \"valueExprRef\" in expr ?\n        schema.valueExprDefns[expr.valueExprRef] :\n        expr.valueExpr;\n      var ordinal = tripleConstraints.push(expr)-1;\n      var tp = new TripleConstraint(ordinal, expr.predicate, expr.inverse, expr.negated, valueExpr);\n      repeated = _repeat(tp, expr.min, expr.max);\n      return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;\n    }\n\n    else if (expr.type === \"OneOf\") {\n      container = new Choice(expr.expressions.map(function (e) {\n        return _compileExpression(e, schema);\n      }));\n      repeated = _repeat(container, expr.min, expr.max);\n      return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;\n    }\n\n    else if (expr.type === \"EachOf\") {\n      container = new EachOf(expr.expressions.map(function (e) {\n        return _compileExpression(e, schema);\n      }));\n      repeated = _repeat(container, expr.min, expr.max);\n      return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;\n    }\n\n    else throw Error(\"unexpected expr type: \" + expr.type);\n  }\n\n  return expression ? _compileExpression(expression, schema) : new Epsilon();\n}\n\n// http://stackoverflow.com/questions/9422386/lazy-cartesian-product-of-arrays-arbitrary-nested-loops\nfunction crossProduct(sets) {\n  var n = sets.length, carets = [], args = null;\n\n  function init() {\n    args = [];\n    for (var i = 0; i < n; i++) {\n      carets[i] = 0;\n      args[i] = sets[i][0];\n    }\n  }\n\n  function next() {\n\n    // special case: crossProduct([]).next().next() returns false.\n    if (args !== null && args.length === 0)\n      return false;\n\n    if (args === null) {\n      init();\n      return true;\n    }\n    var i = n - 1;\n    carets[i]++;\n    if (carets[i] < sets[i].length) {\n      args[i] = sets[i][carets[i]];\n      return true;\n    }\n    while (carets[i] >= sets[i].length) {\n      if (i == 0) {\n        return false;\n      }\n      carets[i] = 0;\n      args[i] = sets[i][0];\n      carets[--i]++;\n    }\n    args[i] = sets[i][carets[i]];\n    return true;\n  }\n\n  return {\n    next: next,\n    do: function (block, _context) { // old API\n      return block.apply(_context, args);\n    },\n    // new API because\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments#Description\n    // cautions about functions over arguments.\n    get: function () { return args; }\n  };\n}\n\n/* N3jsTripleToString - simple toString function to make N3.js's triples\n * printable.\n */\nvar N3jsTripleToString = function () {\n  function fmt (n) {\n    return RdfTerm.isLiteral(n) ?\n      [ \"http://www.w3.org/2001/XMLSchema#integer\",\n        \"http://www.w3.org/2001/XMLSchema#float\",\n        \"http://www.w3.org/2001/XMLSchema#double\"\n      ].indexOf(RdfTerm.getLiteralType(n)) !== -1 ?\n      parseInt(RdfTerm.getLiteralValue(n)) :\n      n :\n    RdfTerm.isBlank(n) ?\n      n :\n      \"<\" + n + \">\";\n  }\n  return fmt(this.subject) + \" \" + fmt(this.predicate) + \" \" + fmt(this.object) + \" .\";\n};\n\n/* indexNeighborhood - index triples by predicate\n * returns: {\n *     byPredicate: Object: mapping from predicate to triples containing that\n *                  predicate.\n *\n *     candidates: [[1,3], [0,2]]: mapping from triple to the triple constraints\n *                 it matches.  It is initialized to []. Mappings that remain an\n *                 empty set indicate a triple which didn't matching anything in\n *                 the shape.\n *\n *     misses: list to recieve value constraint failures.\n *   }\n */\nfunction indexNeighborhood (triples) {\n  return {\n    byPredicate: triples.reduce(function (ret, t) {\n      var p = t.predicate;\n      if (!(p in ret))\n        ret[p] = [];\n      ret[p].push(t);\n\n      // If in VERBOSE mode, add a nice toString to N3.js's triple objects.\n      if (VERBOSE)\n        t.toString = N3jsTripleToString;\n\n      return ret;\n    }, {}),\n    candidates: _seq(triples.length).map(function () {\n      return [];\n    }),\n    misses: []\n  };\n}\n\n/* sparqlOrder - sort triples by subject following SPARQL partial ordering.\n */\nfunction sparqlOrder (l, r) {\n  var [lprec, rprec] = [l, r].map(\n    x => RdfTerm.isBlank(x) ? 1 : RdfTerm.isLiteral(x) ? 2 : 3\n  );\n  return lprec === rprec ? l.localeCompare(r) : lprec - rprec;\n}\n\n/* Return a list of n \"\"s.\n *\n * Note that Array(n) on its own returns a \"sparse array\" so Array(n).map(f)\n * never calls f.\n */\nfunction _seq (n) {\n  return n === 0 ?\n    [] :\n    Array(n).join(\" \").split(/ /); // hahaha, javascript, you suck.\n}\n\n/* Expect property p with value v in object o\n */\nfunction expect (o, p, v) {\n  if (!(p in o))\n    runtimeError(\"expected \"+JSON.stringify(o)+\" to have a '\"+p+\"' attribute.\");\n  if (arguments.length > 2 && o[p] !== v)\n    runtimeError(\"expected \"+p+\" attribute '\"+o[p]+\"' to equal '\"+v+\"'.\");\n}\n\nfunction noop () {  }\n\nfunction runtimeError () {\n  var errorStr = Array.prototype.join.call(arguments, \"\");\n  var e = new Error(errorStr);\n  Error.captureStackTrace(e, runtimeError);\n  throw e;\n}\n\n  function _alist (len) {\n    return _seq(len).map(() => [])\n  }\n\n  return {\n    construct: ShExValidator_constructor,\n    start: Start,\n    options: InterfaceOptions\n  };\n})();\n\n// Export the `ShExValidator` class as a whole.\nif (true)\n  module.exports = ShExValidator;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/@shexjs/core/lib/ShExValidator.js?");

/***/ }),

/***/ "./node_modules/@shexjs/core/lib/ShExWriter.js":
/*!*****************************************************!*\
  !*** ./node_modules/@shexjs/core/lib/ShExWriter.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// **ShExWriter** writes ShEx documents.\n\nvar ShExWriter = (function () {\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar UNBOUNDED = -1;\n\n// Matches a literal as represented in memory by the ShEx library\nvar ShExLiteralMatcher = /^\"([^]*)\"(?:\\^\\^(.+)|@([\\-a-z]+))?$/i;\n\n// rdf:type predicate (for 'a' abbreviation)\nvar RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    RDF_TYPE   = RDF_PREFIX + 'type';\n\n// Characters in literals that require escaping\nvar ESCAPE_1 = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    ESCAPE_g = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    ESCAPE_replacements = { '\\\\': '\\\\\\\\', '\"': '\\\\\"', '/': '\\\\/', '\\t': '\\\\t',\n                            '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f' };\n\nvar nodeKinds = {\n  'iri': \"IRI\",\n  'bnode': \"BNODE\",\n  'literal': \"LITERAL\",\n  'nonliteral': \"NONLITERAL\"\n};\nvar nonLitNodeKinds = {\n  'iri': \"IRI\",\n  'bnode': \"BNODE\",\n  'literal': \"LITERAL\",\n  'nonliteral': \"NONLITERAL\"\n};\n\n// ## Constructor\nfunction ShExWriter (outputStream, options) {\n  if (!(this instanceof ShExWriter))\n    return new ShExWriter(outputStream, options);\n\n  // Shift arguments if the first argument is not a stream\n  if (outputStream && typeof outputStream.write !== 'function')\n    options = outputStream, outputStream = null;\n  options = options || {};\n\n  // If no output stream given, send the output as string through the end callback\n  if (!outputStream) {\n    var output = '';\n    this._outputStream = {\n      write: function (chunk, encoding, done) { output += chunk; done && done(); },\n      end:   function (done) { done && done(null, output); },\n    };\n    this._endStream = true;\n  }\n  else {\n    this._outputStream = outputStream;\n    this._endStream = options.end === undefined ? true : !!options.end;\n  }\n\n  // Initialize writer, depending on the format\n  this._prefixIRIs = Object.create(null);\n  options.prefixes && this.addPrefixes(options.prefixes);\n\n  this._error = options.error || _throwError;\n  this.forceParens = !options.simplifyParentheses; // default to false\n  this._expect = options.lax ? noop : expect;\n}\n\nShExWriter.prototype = {\n  // ## Private methods\n\n  // ### `_write` writes the argument to the output stream\n  _write: function (string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  },\n\n  // ### `_writeSchema` writes the shape to the output stream\n  _writeSchema: function (schema, done) {\n    var _ShExWriter = this;\n    this._expect(schema, \"type\", \"Schema\");\n    _ShExWriter.addPrefixes(schema.prefixes);\n    if (schema.base)\n      _ShExWriter._write(\"BASE \" + this._encodeIriOrBlankNode(schema.base) + \"\\n\");\n\n    if (schema.imports)\n      schema.imports.forEach(function (imp) {\n        _ShExWriter._write(\"IMPORT \" + _ShExWriter._encodeIriOrBlankNode(imp) + \"\\n\");\n      });\n    if (schema.startActs)\n      schema.startActs.forEach(function (act) {\n        _ShExWriter._expect(act, \"type\", \"SemAct\");\n        _ShExWriter._write(\" %\"+\n                           _ShExWriter._encodePredicate(act.name)+\n                           (\"code\" in act ? \"{\"+escapeCode(act.code)+\"%\"+\"}\" : \"%\"));\n      });\n    if (schema.start)\n      _ShExWriter._write(\"start = \" + _ShExWriter._writeShapeExpr(schema.start, done, true, 0).join('') + \"\\n\")\n    if (\"shapes\" in schema)\n      schema.shapes.forEach(function (shapeExpr) {\n        let id = shapeExpr.id;\n        var abstract = \"\";\n        if (shapeExpr.type === \"ShapeDecl\") {\n          if (shapeExpr.abstract)\n            abstract = \"abstract \"\n          shapeExpr = shapeExpr.shapeExpr;\n        }\n        _ShExWriter._write(\n          abstract +\n          _ShExWriter._encodeShapeName(id, false) +\n            \" \" +\n            _ShExWriter._writeShapeExpr(shapeExpr, done, true, 0).join(\"\")+\"\\n\",\n          done\n        );\n      })\n  },\n\n  _writeShapeExpr: function (shapeExpr, done, forceBraces, parentPrec) {\n    var _ShExWriter = this;\n    var pieces = [];\n    if (typeof shapeExpr === \"string\") // ShapeRef\n      pieces.push(\"@\", _ShExWriter._encodeShapeName(shapeExpr));\n    // !!! []s for precedence!\n    else if (shapeExpr.type === \"ShapeDecl\")\n      pieces.push(_ShExWriter._writeShapeExpr(shapeExpr.shapeExpr, done, false, 3));\n    else if (shapeExpr.type === \"ShapeExternal\")\n      pieces.push(\"EXTERNAL\");\n    else if (shapeExpr.type === \"ShapeAnd\") {\n      if (parentPrec >= 3)\n        pieces.push(\"(\");\n      var lastAndElided = false;\n      shapeExpr.shapeExprs.forEach(function (expr, ord) {\n        if (ord > 0) { // && !!! grammar rules too weird here\n          /*\n            shapeAtom:\n                  nonLitNodeConstraint shapeOrRef?\n                | shapeDecl nonLitNodeConstraint?\n\n            nonLitInlineNodeConstraint:\n                  nonLiteralKind stringFacet*\n          */\n          function nonLitNodeConstraint (idx) {\n            let c = shapeExpr.shapeExprs[idx];\n            return c.type !== \"NodeConstraint\"\n              || (\"nodeKind\" in c && c.nodeKind === \"literal\")\n              || \"datatype\" in c\n              || \"values\" in c\n              ? false\n              : true;\n          }\n\n          function shapeOrRef (idx) {\n            let c = shapeExpr.shapeExprs[idx];\n            return c.type === \"Shape\" || c.type === \"ShapeRef\";\n          }\n\n          function shapeDecl (idx) {\n            let c = shapeExpr.shapeExprs[idx];\n            return c.type === \"Shape\";\n          }\n\n          let elideAnd = !lastAndElided\n              && (nonLitNodeConstraint(ord-1) && shapeOrRef(ord)\n                  || shapeDecl(ord-1) && nonLitNodeConstraint(ord))\n          if (!elideAnd) {\n            pieces.push(\" AND \");\n          }\n          lastAndElided = elideAnd;\n        }\n        pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr, done, false, 3));\n      });\n      if (parentPrec >= 3)\n        pieces.push(\")\");\n    } else if (shapeExpr.type === \"ShapeOr\") {\n      if (parentPrec >= 2)\n        pieces.push(\"(\");\n      shapeExpr.shapeExprs.forEach(function (expr, ord) {\n        if (ord > 0)\n          pieces.push(\" OR \");\n        pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr, done, forceBraces, 2));\n      });\n      if (parentPrec >= 2)\n        pieces.push(\")\");\n    } else if (shapeExpr.type === \"ShapeNot\") {\n      if (parentPrec >= 4)\n        pieces.push(\"(\");\n      pieces.push(\"NOT \");\n      pieces = pieces.concat(_ShExWriter._writeShapeExpr(shapeExpr.shapeExpr, done, forceBraces, 4));\n      if (parentPrec >= 4)\n        pieces.push(\")\");\n    } else if (shapeExpr.type === \"Shape\") {\n      pieces = pieces.concat(_ShExWriter._writeShape(shapeExpr, done, forceBraces));\n    } else if (shapeExpr.type === \"NodeConstraint\") {\n      pieces = pieces.concat(_ShExWriter._writeNodeConstraint(shapeExpr, done, forceBraces));\n    } else\n      throw Error(\"expected Shape{,And,Or,Ref} or NodeConstraint in \" + util.inspect(shapeExpr));\n    return pieces;\n  },\n\n  // ### `_writeShape` writes the shape to the output stream\n  _writeShape: function (shape, done, forceBraces) {\n    var _ShExWriter = this;\n    try {\n      var pieces = []; // guessing push/join is faster than concat\n      this._expect(shape, \"type\", \"Shape\");\n\n      if (shape.closed) pieces.push(\"CLOSED \");\n\n      [{keyword: \"extends\", marker: \"&\"}].forEach(pair => {\n         // pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr.valueExpr, done, true, 0));\n         if (shape[pair.keyword] && shape[pair.keyword].length > 0) {\n           shape[pair.keyword].forEach(function (i, ord) {\n             if (ord)\n               pieces.push(\" \")\n             pieces.push(pair.marker);\n             pieces = pieces.concat(_ShExWriter._writeShapeExpr(i, done, true, 0));\n           });\n           pieces.push(\" \");\n         }\n       });\n\n      if (shape.extra && shape.extra.length > 0) {\n        pieces.push(\"EXTRA \");\n        shape.extra.forEach(function (i, ord) {\n          pieces.push(_ShExWriter._encodeShapeName(i, false)+\" \");\n        });\n        pieces.push(\" \");\n      }\n      var empties = [\"values\", \"length\", \"minlength\", \"maxlength\", \"pattern\", \"flags\"];\n      pieces.push(\"{\\n\");\n\n      function _writeShapeActions (semActs) {\n        if (!semActs)\n          return;\n\n        semActs.forEach(function (act) {\n          _ShExWriter._expect(act, \"type\", \"SemAct\");\n          pieces.push(\" %\",\n                      _ShExWriter._encodePredicate(act.name),\n                      (\"code\" in act ? \"{\"+escapeCode(act.code)+\"%\"+\"}\" : \"%\"));\n        });\n      }\n\n      function _writeCardinality (min, max) {\n        if      (min === 0 && max === 1)         pieces.push(\"?\");\n        else if (min === 0 && max === UNBOUNDED) pieces.push(\"*\");\n        else if (min === undefined && max === undefined)                         ;\n        else if (min === 1 && max === UNBOUNDED) pieces.push(\"+\");\n        else\n          pieces.push(\"{\", min, \",\", (max === UNBOUNDED ? \"*\" : max), \"}\"); // by coincidence, both use the same character.\n      }\n\n      function _writeExpression (expr, indent, parentPrecedence) {\n        function _writeScopedShapeExpression (scopedShapeExpr) {\n          if (scopedShapeExpr) {\n            pieces.push(\" ON SHAPE EXPRESSION\\n\");\n            pieces = pieces.concat(\n              _ShExWriter._writeShapeExpr(scopedShapeExpr, done, true, 0).map(\n                line => indent + \"    \" + line\n              )\n            )\n          }\n        }\n\n        function _writeExpressionActions (semActs) {\n          if (semActs) {\n\n            semActs.forEach(function (act) {\n              _ShExWriter._expect(act, \"type\", \"SemAct\");\n              pieces.push(\"\\n\"+indent+\"   %\");\n              pieces.push(_ShExWriter._encodeValue(act.name));\n              if (\"code\" in act)\n                pieces.push(\"{\"+escapeCode(act.code)+\"%\"+\"}\");\n              else\n                pieces.push(\"%\");\n            });\n          }\n        }\n\n        function _exprGroup (exprs, separator, precedence, forceParens) {\n          var needsParens = precedence < parentPrecedence || forceParens;\n          if (needsParens) {\n            pieces.push(\"(\");\n          }\n          exprs.forEach(function (nested, ord) {\n            _writeExpression(nested, indent+\"  \", precedence)\n            if (ord < exprs.length - 1)\n              pieces.push(separator);\n          });\n          if (needsParens) {\n            pieces.push(\")\");\n          }\n        }\n\n        if (typeof expr === \"string\") {\n          pieces.push(\"&\");\n          pieces.push(_ShExWriter._encodeShapeName(expr, false));\n        } else {\n\n        if (\"id\" in expr) {\n          pieces.push(\"$\");\n          pieces.push(_ShExWriter._encodeIriOrBlankNode(expr.id, true));\n        }\n\n        if (expr.type === \"TripleConstraint\") {\n          if (expr.inverse)\n            pieces.push(\"^\");\n          if (expr.negated)\n            pieces.push(\"!\");\n          pieces.push(indent,\n                      _ShExWriter._encodePredicate(expr.predicate),\n                      \" \");\n\n          if (\"valueExpr\" in expr)\n            pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr.valueExpr, done, true, 0));\n          else\n            pieces.push(\". \");\n\n          _writeCardinality(expr.min, expr.max);\n          _writeScopedShapeExpression(expr.onShapeExpression);\n          _ShExWriter._annotations(pieces, expr.annotations, indent);\n          _writeExpressionActions(expr.semActs);\n        }\n\n        else if (expr.type === \"OneOf\") {\n          var needsParens = \"id\" in expr || \"min\" in expr || \"max\" in expr || \"onShapeExpression\" in expr || \"annotations\" in expr || \"semActs\" in expr;\n          _exprGroup(expr.expressions, \"\\n\"+indent+\"| \", 1, needsParens || _ShExWriter.forceParens);\n          _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt\n          _writeScopedShapeExpression(expr.onShapeExpression);\n          _ShExWriter._annotations(pieces, expr.annotations, indent);\n          _writeExpressionActions(expr.semActs);\n        }\n\n        else if (expr.type === \"EachOf\") {\n          var needsParens = \"id\" in expr || \"min\" in expr || \"max\" in expr || \"onShapeExpression\" in expr || \"annotations\" in expr || \"semActs\" in expr;\n          _exprGroup(expr.expressions, \";\\n\"+indent, 2, needsParens || _ShExWriter.forceParens);\n          _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt\n          _writeScopedShapeExpression(expr.onShapeExpression);\n          _ShExWriter._annotations(pieces, expr.annotations, indent);\n          _writeExpressionActions(expr.semActs);\n        }\n\n        else throw Error(\"unexpected expr type: \" + expr.type);\n        }\n      }\n\n      if (shape.expression) // t: 0, 0Extend1\n        _writeExpression(shape.expression, \"  \", 0);\n      pieces.push(\"\\n}\");\n      _writeShapeActions(shape.semActs);\n      _ShExWriter._annotations(pieces, shape.annotations, \"  \");\n\n      return pieces;\n    }\n    catch (error) { done && done(error); }\n  },\n\n  // ### `_writeShape` writes the shape to the output stream\n  _writeNodeConstraint: function (v, done) {\n    var _ShExWriter = this;\n    try {\n      _ShExWriter._expect(v, \"type\", \"NodeConstraint\");\n\n      var pieces = [];\n      if (v.nodeKind in nodeKinds)       pieces.push(nodeKinds[v.nodeKind], \" \");\n      else if (v.nodeKind !== undefined) _ShExWriter._error(\"unexpected nodeKind: \" + v.nodeKind); // !!!!\n\n      this._fillNodeConstraint(pieces, v, done);\n      this._annotations(pieces, v.annotations, \"  \");\n      return pieces;\n    }\n    catch (error) { done && done(error); }\n\n  },\n\n  _annotations: function (pieces, annotations, indent) {\n    var _ShExWriter = this;\n    if (annotations) {\n      annotations.forEach(function (a) {\n        _ShExWriter._expect(a, \"type\", \"Annotation\");\n        pieces.push(\"//\\n\"+indent+\"   \");\n        pieces.push(_ShExWriter._encodeValue(a.predicate));\n        pieces.push(\" \");\n        pieces.push(_ShExWriter._encodeValue(a.object));\n      });\n    }\n  },\n\n  _fillNodeConstraint: function (pieces, v, done) {\n    var _ShExWriter = this;\n    if (v.datatype  && v.values  ) _ShExWriter._error(\"found both datatype and values in \"   +expr);\n    if (v.datatype) {\n      pieces.push(_ShExWriter._encodeShapeName(v.datatype));\n    }\n\n    if (v.values) {\n      pieces.push(\"[\");\n\n      v.values.forEach(function (t, ord) {\n        if (ord > 0)\n          pieces.push(\" \");\n\n        if (!isTerm(t)) {\n//          expect(t, \"type\", \"IriStemRange\");\n              if (!(\"type\" in t))\n                runtimeError(\"expected \"+JSON.stringify(t)+\" to have a 'type' attribute.\");\n          var stemRangeTypes = [\"Language\", \"IriStem\", \"LiteralStem\", \"LanguageStem\", \"IriStemRange\", \"LiteralStemRange\", \"LanguageStemRange\"];\n              if (stemRangeTypes.indexOf(t.type) === -1)\n                runtimeError(\"expected type attribute '\"+t.type+\"' to be in '\"+stemRangeTypes+\"'.\");\n          if (t.type === \"Language\") {\n            pieces.push(\"@\" + t.languageTag);\n          } else if (!isTerm(t.stem)) {\n            expect(t.stem, \"type\", \"Wildcard\");\n            pieces.push(\".\");\n          } else {\n            pieces.push(langOrLiteral(t, t.stem) + \"~\");\n          }\n          if (t.exclusions) {\n            t.exclusions.forEach(function (c) {\n              pieces.push(\" - \");\n              if (!isTerm(c)) {\n//                expect(c, \"type\", \"IriStem\");\n                    if (!(\"type\" in c))\n                      runtimeError(\"expected \"+JSON.stringify(c)+\" to have a 'type' attribute.\");\n                    var stemTypes = [\"IriStem\", \"LiteralStem\", \"LanguageStem\"];\n                    if (stemTypes.indexOf(c.type) === -1)\n                      runtimeError(\"expected type attribute '\"+c.type+\"' to be in '\"+stemTypes+\"'.\");\n                pieces.push(langOrLiteral(t, c.stem) + \"~\");\n              } else {\n                pieces.push(langOrLiteral(t, c));\n              }\n            });\n          }\n          function langOrLiteral (t, c) {\n            return [\"LanguageStem\", \"LanguageStemRange\"].indexOf(t.type) !== -1 ? \"@\" + c :\n              [\"LiteralStem\", \"LiteralStemRange\"].indexOf(t.type) !== -1 ? '\"' + c.replace(ESCAPE_g, c) + '\"' :\n              _ShExWriter._encodeValue(c)\n          }\n        } else {\n          pieces.push(_ShExWriter._encodeValue(t));\n        }\n      });\n\n      pieces.push(\"]\");\n    }\n\n    if ('pattern' in v) {\n      var pattern = v.pattern.\n          replace(/\\//g, \"\\\\/\");\n      // if (ESCAPE_1.test(pattern))\n      //   pattern = pattern.replace(ESCAPE_g, characterReplacer);\n      var flags = 'flags' in v ? v.flags : \"\";\n      pieces.push(\"/\" + pattern + \"/\" + flags + \" \");\n    }\n    ['length', 'minlength', 'maxlength',\n     'mininclusive', 'minexclusive', 'maxinclusive', 'maxexclusive',\n     'totaldigits', 'fractiondigits'\n    ].forEach(function (a) {\n      if (v[a])\n        pieces.push(\" \", a, \" \", v[a]);\n    });\n    return pieces;\n\n    function isTerm (t) {\n      return typeof t !== \"object\" || \"value\" in t && Object.keys(t).reduce((r, k) => {\n        return r === false ? r : [\"value\", \"type\", \"language\"].indexOf(k) !== -1;\n      }, true);\n    }\n  },\n\n  // ### `_encodeIriOrBlankNode` represents an IRI or blank node\n  _encodeIriOrBlankNode: function (iri, trailingSpace) {\n    trailingSpace = trailingSpace ? ' ' : '';\n    // A blank node is represented as-is\n    if (iri[0] === '_' && iri[1] === ':') return iri;\n    // Escape special characters\n    if (ESCAPE_1.test(iri))\n      iri = iri.replace(ESCAPE_g, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    var prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? '<' + iri + '>' :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]) + trailingSpace;\n  },\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral: function (value, type, language) {\n    // Escape special characters\n    if (ESCAPE_1.test(value))\n      value = value.replace(ESCAPE_g, characterReplacer);\n    // Write the literal, possibly with type or language\n    if (language)\n      return '\"' + value + '\"@' + language;\n    else if (type)\n      return '\"' + value + '\"^^' + this._encodeIriOrBlankNode(type);\n    else\n      return '\"' + value + '\"';\n  },\n\n  // ### `_encodeShapeName` represents a subject\n  _encodeShapeName: function (subject, trailingSpace) {\n    if (subject[0] === '\"')\n      throw new Error('A literal as subject is not allowed: ' + subject);\n    return this._encodeIriOrBlankNode(subject, trailingSpace);\n  },\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate: function (predicate) {\n    if (predicate[0] === '\"')\n      throw new Error('A literal as predicate is not allowed: ' + predicate);\n    return predicate === RDF_TYPE ? 'a' : this._encodeIriOrBlankNode(predicate);\n  },\n\n  // ### `_encodeValue` represents an object\n  _encodeValue: function (object) {\n    // Represent an IRI or blank node\n    if (typeof object !== \"object\")\n      return this._encodeIriOrBlankNode(object);\n    // Represent a literal\n    return this._encodeLiteral(object.value, object.type, object.language);\n  },\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite: function () {\n    throw new Error('Cannot write because the writer has been closed.');\n  },\n\n  writeSchema: function (shape, done) {\n    this._writeSchema(shape, done);\n    this.end(done);\n  },\n\n  // ### `addShape` adds the shape to the output stream\n  addShape: function (shape, name, done) {\n    this._write(\n      _ShExWriter._encodeShapeName(name, false) +\n        \" \" +\n        _ShExWriter._writeShapeExpr(shape, done, true, 0).join(\"\"),\n      done\n    );\n  },\n\n  // ### `addShapes` adds the shapes to the output stream\n  addShapes: function (shapes) {\n    for (var i = 0; i < shapes.length; i++)\n      this.addShape(shapes[i]);\n  },\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix: function (prefix, iri, done) {\n    var prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  },\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes: function (prefixes, done) {\n    // Add all useful prefixes\n    var prefixIRIs = this._prefixIRIs, hasPrefixes = false;\n    for (var prefix in prefixes) {\n      // Verify whether the prefix can be used and does not exist yet\n      var iri = prefixes[prefix];\n      if (// @@ /[#\\/]$/.test(iri) && !! what was that?\n          prefixIRIs[iri] !== (prefix += ':')) {\n        hasPrefixes = true;\n        prefixIRIs[iri] = prefix;\n        // Write prefix\n        this._write('PREFIX ' + prefix + ' <' + iri + '>\\n');\n      }\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      var IRIlist = '', prefixList = '';\n      for (var prefixIRI in prefixIRIs) {\n        IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];\n      }\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\\/]*$|' +\n                                     '^(' + IRIlist + ')([a-zA-Z][\\\\-_a-zA-Z0-9]*)$');\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  },\n\n  // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n  _prefixRegex: /$0^/,\n\n  // ### `end` signals the end of the output stream\n  end: function (done) {\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    var singleDone = done && function (error, result) { singleDone = null, done(error, result); };\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  },\n};\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  var result = ESCAPE_replacements[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n\nfunction escapeCode (code) {\n  return code.replace(/\\\\/g, \"\\\\\\\\\").replace(/%/g, \"\\\\%\")\n}\n\n/** _throwError: overridable function to throw Errors().\n *\n * @param func (optional): function at which to truncate stack trace\n * @param str: error message\n */\nfunction _throwError (func, str) {\n  if (typeof func !== \"function\") {\n    str = func;\n    func = _throwError;\n  }\n  var e = new Error(str);\n  Error.captureStackTrace(e, func);\n  throw e;\n}\n\n// Expect property p with value v in object o\nfunction expect (o, p, v) {\n  if (!(p in o))\n    this._error(expect, \"expected \"+o+\" to have a .\"+p);\n  if (arguments.length > 2 && o[p] !== v)\n    this._error(expect, \"expected \"+o[o]+\" to equal .\"+v);\n}\n\n// The empty function\nfunction noop () {}\n\nreturn ShExWriter;\n})();\n\n// Export the `ShExWriter` class as a whole.\nif (true)\n  module.exports = ShExWriter; // node environment\n\n\n//# sourceURL=webpack://blues/./node_modules/@shexjs/core/lib/ShExWriter.js?");

/***/ }),

/***/ "./node_modules/@shexjs/core/lib/regex/nfax-val-1err.js":
/*!**************************************************************!*\
  !*** ./node_modules/@shexjs/core/lib/regex/nfax-val-1err.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var NFAXVal1Err = (function () {\n  var RdfTerm = __webpack_require__(/*! ../RdfTerm */ \"./node_modules/@shexjs/core/lib/RdfTerm.js\");\n\n  var Split = \"<span class='keyword' title='Split'>|</span>\";\n  var Rept  = \"<span class='keyword' title='Repeat'>×</span>\";\n  var Match = \"<span class='keyword' title='Match'>␃</span>\";\n  /* compileNFA - compile regular expression and index triple constraints\n   */\n  var UNBOUNDED = -1;\n\n  function compileNFA (schema, shape, index) {\n    var expression = shape.expression;\n    return NFA();\n\n    function NFA () {\n      // wrapper for states, startNo and matchstate\n      var states = [];\n      var matchstate = State_make(Match, []);\n      var startNo = matchstate;\n      var stack = [];\n      var pair;\n      if (expression) {\n        var pair = walkExpr(expression, []);\n        patch(pair.tail, matchstate);\n        startNo = pair.start;\n      }\n      var ret = {\n        algorithm: \"rbenx\",\n        end: matchstate,\n        states: states,\n        start: startNo,\n        match: rbenx_match\n      }\n      matchstate = states = startNo = null;\n      return ret;\n\n      function walkExpr (expr, stack) {\n        var s, starts;\n        var lastTail;\n        function maybeAddRept (start, tail) {\n          if ((expr.min == undefined || expr.min === 1) &&\n              (expr.max == undefined || expr.max === 1))\n            return {start: start, tail: tail}\n          s = State_make(Rept, [start]);\n          states[s].expr = expr;\n          // cache min/max in normalized form for simplicity of comparison.\n          states[s].min = \"min\" in expr ? expr.min : 1;\n          states[s].max = \"max\" in expr ? expr.max === UNBOUNDED ? Infinity : expr.max : 1;\n          patch(tail, s);\n          return {start: s, tail: [s]}\n        }\n\n        if (typeof expr === \"string\") { // Inclusion\n          var included = index.tripleExprs[expr];\n          return walkExpr(included, stack);\n        }\n\n        else if (expr.type === \"TripleConstraint\") {\n          s = State_make(expr, []);\n          states[s].stack = stack;\n          return {start: s, tail: [s]};\n          // maybeAddRept(s, [s]);\n        }\n\n        else if (expr.type === \"NestedShape\") {\n          s = State_make(expr, []);\n          states[s].stack = stack;\n          return {start: s, tail: [s]};\n          // maybeAddRept(s, [s]);\n        }\n\n        else if (expr.type === \"OneOf\") {\n          lastTail = [];\n          starts = [];\n          expr.expressions.forEach(function (nested, ord) {\n            pair = walkExpr(nested, stack.concat({c:expr, e:ord}));\n            starts.push(pair.start);\n            lastTail = lastTail.concat(pair.tail);\n          });\n          s = State_make(Split, starts);\n          states[s].expr = expr;\n          return maybeAddRept(s, lastTail);\n        }\n\n        else if (expr.type === \"EachOf\") {\n          expr.expressions.forEach(function (nested, ord) {\n            pair = walkExpr(nested, stack.concat({c:expr, e:ord}));\n            if (ord === 0)\n              s = pair.start;\n            else\n              patch(lastTail, pair.start);\n            lastTail = pair.tail;\n          });\n          return maybeAddRept(s, lastTail);\n        }\n\n        throw Error(\"unexpected expr type: \" + expr.type);\n      };\n\n      function State_make (c, outs, negated) {\n        var ret = states.length;\n        states.push({c:c, outs:outs});\n        if (negated)\n          states[ret].negated = true; // only include if true for brevity\n        return ret;\n      }\n\n      function patch (l, target) {\n        l.forEach(elt => {\n          states[elt].outs.push(target);\n        });\n      }\n    }\n\n\n    function nfaToString () {\n      var known = {OneOf: [], EachOf: []};\n      function dumpTripleConstraint (tc) {\n        return \"<\" + tc.predicate + \">\";\n      }\n      function card (obj) {\n        var x = \"\";\n        if (\"min\" in obj) x += obj.min;\n        if (\"max\" in obj) x += \",\" + obj.max;\n        return x ? \"{\" + x + \"}\" : \"\";\n      }\n      function junct (j) {\n        var id = known[j.type].indexOf(j);\n        if (id === -1)\n          id = known[j.type].push(j)-1;\n        return j.type + id; // + card(j);\n      }\n      function dumpStackElt (elt) {\n        return junct(elt.c) + \".\" + elt.e + (\"i\" in elt ? \"[\" + elt.i + \"]\" : \"\");\n      }\n      function dumpStack (stack) {\n        return stack.map(elt => { return dumpStackElt(elt); }).join(\"/\");\n      }\n      function dumpNFA (states, startNo) {\n        return states.map((s, i) => {\n          return (i === startNo ? s.c === Match ? \".\" : \"S\" : s.c === Match ? \"E\" : \" \") + i + \" \" + (\n            s.c === Split ? (\"Split-\" + junct(s.expr)) :\n              s.c === Rept ? (\"Rept-\" + junct(s.expr)) :\n              s.c === Match ? \"Match\" :\n              dumpTripleConstraint(s.c)\n          ) + card(s) + \"→\" + s.outs.join(\" | \") + (\"stack\" in s ? dumpStack(s.stack) : \"\");\n        }).join(\"\\n\");\n      }\n      function dumpMatched (matched) {\n        return matched.map(m => {\n          return dumpTripleConstraint(m.c) + \"[\" + m.triples.join(\",\") + \"]\" + dumpStack(m.stack);\n        }).join(\",\");\n      }\n      function dumpThread (thread) {\n        return \"S\" + thread.state + \":\" + Object.keys(thread.repeats).map(k => {\n          return k + \"×\" + thread.repeats[k];\n        }).join(\",\") + \" \" + dumpMatched(thread.matched);\n      }\n      function dumpThreadList (list) {\n        return \"[[\" + list.map(thread => { return dumpThread(thread); }).join(\"\\n  \") + \"]]\";\n      }\n      return {\n        nfa: dumpNFA,\n        stack: dumpStack,\n        stackElt: dumpStackElt,\n        thread: dumpThread,\n        threadList: dumpThreadList\n      };\n    }\n\n    function rbenx_match (graph, node, constraintList, constraintToTripleMapping, tripleToConstraintMapping, neighborhood, semActHandler, trace) {\n      var rbenx = this;\n      var clist = [], nlist = []; // list of {state:state number, repeats:stateNo->repetitionCount}\n\n      function localExpect (list) {\n        return list.map(st => {\n          var s = rbenx.states[st.state]; // simpler threads are a list of states.\n          return renderAtom(s.c, s.negated);\n        });\n      }\n\n      if (rbenx.states.length === 1)\n        return matchedToResult([], constraintList, constraintToTripleMapping, neighborhood, semActHandler);\n\n      var chosen = null;\n      // var dump = nfaToString();\n      // console.log(dump.nfa(this.states, this.start));\n      addstate(rbenx, clist, this.start, {repeats:{}, avail:[], matched:[], stack:[], errors:[]});\n      while (clist.length) {\n        nlist = [];\n        if (trace)\n          trace.push({threads:[]});\n        for (var threadno = 0; threadno < clist.length; ++threadno) {\n          var thread = clist[threadno];\n          if (thread.state === rbenx.end)\n            continue;\n          var state = rbenx.states[thread.state];\n          var nlistlen = nlist.length;\n          var constraintNo = constraintList.indexOf(state.c);\n          // may be Accept!\n          if (constraintNo === -1) {\n            var scoped = state.c.scopedTripleConstraints.reduce(\n              (acc, tci) => acc.concat(constraintToTripleMapping[tci]), []);\n            addStates(rbenx, nlist, thread, scoped, constraintToTripleMapping, neighborhood, null, node);\n          } else {\n            var min = \"min\" in state.c ? state.c.min : 1;\n            var max = \"max\" in state.c ? state.c.max === UNBOUNDED ? Infinity : state.c.max : 1;\n            if (\"negated\" in state.c && state.c.negated)\n              min = max = 0;\n            if (thread.avail[constraintNo] === undefined)\n              thread.avail[constraintNo] = constraintToTripleMapping[constraintNo].map(pair => pair.tNo);\n            var taken = thread.avail[constraintNo].splice(0, max);\n            if (taken.length >= min) {\n              do {\n                addStates(rbenx, nlist, thread, taken, constraintToTripleMapping, neighborhood, null, node);\n              } while ((function () {\n                if (thread.avail[constraintNo].length > 0 && taken.length < max) {\n                  taken.push(thread.avail[constraintNo].shift());\n                  return true; // stay in look to take more.\n                } else {\n                  return false; // no more to take or we're already at max\n                }\n              })());\n            }\n          }\n          if (trace)\n            trace[trace.length-1].threads.push({\n              state: clist[threadno].state,\n              to:nlist.slice(nlistlen).map(x => {\n                return stateString(x.state, x.repeats);\n              })\n            });\n        }\n        // console.log(dump.threadList(nlist));\n        if (nlist.length === 0 && chosen === null)\n          return reportError(localExpect(clist, rbenx.states));\n        var t = clist;\n        clist = nlist;\n        nlist = t;\n        var longerChosen = clist.reduce((ret, elt) => {\n          var matchedAll =\n              elt.matched.reduce((ret, m) => {\n                return ret + m.triples.length; // count matched triples\n              }, 0) === tripleToConstraintMapping.reduce((ret, t) => {\n                return t === undefined ? ret : ret + 1; // count expected\n              }, 0);\n          return ret !== null ? ret : (elt.state === rbenx.end && matchedAll) ? elt : null;\n        }, null)\n        if (longerChosen)\n          chosen = longerChosen;\n        // if (longerChosen !== null)\n        //   console.log(JSON.stringify(matchedToResult(longerChosen.matched)));\n      }\n      if (chosen === null)\n        return reportError();\n      function reportError () { return {\n        type: \"Failure\",\n        node: node,\n        errors: localExpect(clist, rbenx.states)\n      } }\n      function localExpect () {\n        return clist.map(t => {\n          var c = rbenx.states[t.state].c;\n          // if (c === Match)\n          //   return { type: \"EndState999\" };\n          var valueExpr = null;\n          if (typeof c.valueExpr === \"string\") { // ShapeRef\n            valueExpr = c.valueExpr;\n            if (RdfTerm.isBlank(valueExpr))\n              valueExpr = schema.shapes[valueExpr];\n          } else if (c.valueExpr) {\n            valueExpr = extend({}, c.valueExpr)\n          }\n          return extend({\n            type: state.c.negated ? \"NegatedProperty\" :\n              t.state === rbenx.end ? \"ExcessTripleViolation\" :\n              \"MissingProperty\",\n            property: state.c.predicate\n          }, valueExpr ? { valueExpr: valueExpr } : {});\n        });\n      }\n      // console.log(\"chosen:\", dump.thread(chosen));\n      return \"errors\" in chosen.matched ?\n        chosen.matched :\n        matchedToResult(chosen.matched, constraintList, constraintToTripleMapping, neighborhood, semActHandler);\n    }\n\n    function addStates (rbenx, nlist, thread, taken, constraintToTripleMapping, neighborhood, direct, node) {\n      var state = rbenx.states[thread.state];\n      // find the exprs that require repetition\n      var exprs = rbenx.states.map(x => { return x.c === Rept ? x.expr : null; });\n      var newStack = state.stack.map(e => {\n        var i = thread.repeats[exprs.indexOf(e.c)];\n        if (i === undefined)\n          i = 0; // expr has no repeats\n        else\n          i = i-1;\n        return { c:e.c, e:e.e, i:i };\n      });\n      var withIndexes = {\n        c: state.c,\n        triples: taken,\n        stack: newStack\n      };\n      thread.matched = thread.matched.concat(withIndexes);\n      state.outs.forEach(o => { // single out if NFA includes epsilons\n        addstate(rbenx, nlist, o, thread);\n      });\n    }\n\n    function addstate (rbenx, list, stateNo, thread, seen) {\n      seen = seen || [];\n      var seenkey = stateString(stateNo, thread.repeats);\n      if (seen.indexOf(seenkey) !== -1)\n        return;\n      seen.push(seenkey);\n\n      var s = rbenx.states[stateNo];\n      if (s.c === Split) {\n        return s.outs.reduce((ret, o, idx) => {\n          return ret.concat(addstate(rbenx, list, o, thread, seen));\n        }, []);\n        // } else if (s.c.type === \"OneOf\" || s.c.type === \"EachOf\") { // don't need Rept\n      } else if (s.c === Rept) {\n        var ret = [];\n        // matched = [matched].concat(\"Rept\" + s.expr);\n        if (!(stateNo in thread.repeats))\n          thread.repeats[stateNo] = 0;\n        var repetitions = thread.repeats[stateNo];\n        // add(r < s.min ? outs[0] : r >= s.min && < s.max ? outs[0], outs[1] : outs[1])\n        if (repetitions < s.max)\n          ret = ret.concat(addstate(rbenx, list, s.outs[0], incrmRepeat(thread, stateNo), seen)); // outs[0] to repeat\n        if (repetitions >= s.min && repetitions <= s.max)\n          ret = ret.concat(addstate(rbenx, list, s.outs[1], resetRepeat(thread, stateNo), seen)); // outs[1] when done\n        return ret;\n      } else {\n        // if (stateNo !== rbenx.end || !thread.avail.reduce((r2, avail) => { faster if we trim early??\n        //   return r2 || avail.length > 0;\n        // }, false))\n        return [list.push({ // return [new list element index]\n          state:stateNo,\n          repeats:thread.repeats,\n          avail:thread.avail.map(a => { // copy parent thread's avail vector\n            return a.slice();\n          }),\n          stack:thread.stack,\n          matched:thread.matched,\n          errors: thread.errors\n        }) - 1];\n      }\n    }\n\n    function resetRepeat (thread, repeatedState) {\n      var trimmedRepeats = Object.keys(thread.repeats).reduce((r, k) => {\n        if (parseInt(k) !== repeatedState) // ugh, hash keys are strings\n          r[k] = thread.repeats[k];\n        return r;\n      }, {});\n      return {state:thread.state/*???*/, repeats:trimmedRepeats, matched:thread.matched, avail:thread.avail.slice(), stack:thread.stack};\n    }\n\n    function incrmRepeat (thread, repeatedState) {\n      var incrmedRepeats = Object.keys(thread.repeats).reduce((r, k) => {\n        r[k] = parseInt(k) == repeatedState ? thread.repeats[k] + 1 : thread.repeats[k];\n        return r;\n      }, {});\n      return {state:thread.state/*???*/, repeats:incrmedRepeats, matched:thread.matched, avail:thread.avail.slice(), stack:thread.stack};\n    }\n\n    function stateString (state, repeats) {\n      var rs = Object.keys(repeats).map(rpt => {\n        return rpt+\":\"+repeats[rpt];\n      }).join(\",\");\n      return rs.length ? state + \"-\" + rs : \"\"+state;\n    }\n\n    function matchedToResult (matched, constraintList, constraintToTripleMapping, neighborhood, semActHandler) {\n      var last = [];\n      var errors = [];\n      var skips = [];\n      var ret = matched.reduce((out, m) => {\n        var mis = 0;\n        var ptr = out, t;\n        while (mis < last.length &&\n               m.stack[mis].c === last[mis].c && // constraint\n               m.stack[mis].i === last[mis].i && // iteration number\n               m.stack[mis].e === last[mis].e) { // (dis|con)junction number\n            ptr = ptr.solutions[last[mis].i].expressions[last[mis].e];\n          ++mis;\n        }\n        while (mis < m.stack.length) {\n          if (mis >= last.length) {\n            last.push({});\n          }\n          if (m.stack[mis].c !== last[mis].c) {\n            t = [];\n            ptr.type = m.stack[mis].c.type === \"EachOf\" ? \"EachOfSolutions\" : \"OneOfSolutions\", ptr.solutions = t;\n            if (\"min\" in m.stack[mis].c)\n              ptr.min = m.stack[mis].c.min;\n            if (\"max\" in m.stack[mis].c)\n              ptr.max = m.stack[mis].c.max;\n            if (\"annotations\" in m.stack[mis].c)\n              ptr.annotations = m.stack[mis].c.annotations;\n            if (\"semActs\" in m.stack[mis].c)\n              ptr.semActs = m.stack[mis].c.semActs;\n            ptr = t;\n            last[mis].i = null;\n            // !!! on the way out to call after valueExpr test\n            if (\"semActs\" in m.stack[mis].c) {\n              if (!semActHandler.dispatchAll(m.stack[mis].c.semActs, \"???\", ptr))\n                throw { type: \"SemActFailure\", errors: [{ type: \"UntrackedSemActFailure\" }] };\n            }\n            if (ret && \"semActs\" in expr) { ret.semActs = expr.semActs; }\n          } else {\n            ptr = ptr.solutions;\n          }\n          if (m.stack[mis].i !== last[mis].i) {\n            t = [];\n            ptr[m.stack[mis].i] = {\n              type:m.stack[mis].c.type === \"EachOf\" ? \"EachOfSolution\" : \"OneOfSolution\",\n              expressions: t};\n            ptr = t;\n            last[mis].e = null;\n          } else {\n            ptr = ptr[last[mis].i].expressions;\n          }\n          if (m.stack[mis].e !== last[mis].e) {\n            t = {};\n            ptr[m.stack[mis].e] = t;\n            if (m.stack[mis].e > 0 && ptr[m.stack[mis].e-1] === undefined && skips.indexOf(ptr) === -1)\n              skips.push(ptr);\n            ptr = t;\n            last.length = mis + 1; // chop off last so we create everything underneath\n          } else {\n            throw \"how'd we get here?\"\n            ptr = ptr[last[mis].e];\n          }\n          ++mis;\n        }\n        ptr.type = \"TripleConstraintSolutions\";\n        if (\"min\" in m.c)\n          ptr.min = m.c.min;\n        if (\"max\" in m.c)\n          ptr.max = m.c.max;\n        ptr.predicate = m.c.predicate;\n        if (\"valueExpr\" in m.c)\n          ptr.valueExpr = m.c.valueExpr;\n        if (\"productionLabel\" in m.c)\n          ptr.productionLabel = m.c.productionLabel;\n        ptr.solutions = m.triples.map(tNo => {\n          var triple = neighborhood[tNo];\n          var ret = {\n            type: \"TestedTriple\",\n            subject: triple.subject,\n            predicate: triple.predicate,\n            object: ldify(triple.object)\n          };\n\n        function ldify (term) {\n          if (term[0] !== \"\\\"\")\n            return term;\n          var ret = { value: RdfTerm.getLiteralValue(term) };\n          var dt = RdfTerm.getLiteralType(term);\n          if (dt &&\n              dt !== \"http://www.w3.org/2001/XMLSchema#string\" &&\n              dt !== \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\")\n            ret.type = dt;\n          var lang = RdfTerm.getLiteralLanguage(term)\n          if (lang)\n            ret.language = lang;\n          return ret;\n        }\n          var constraintNo = constraintList.indexOf(m.c);\n                      var hit = constraintToTripleMapping[constraintNo].find(x => x.tNo === tNo);\n                      if (hit.res && Object.keys(hit.res).length > 0)\n                        ret.referenced = hit.res;\n\n          return ret;\n        })\n        if (\"annotations\" in m.c)\n          ptr.annotations = m.c.annotations;\n        if (\"semActs\" in m.c)\n          ptr.semActs = m.c.semActs;\n        last = m.stack.slice();\n        return out;\n      }, {});\n\n      if (errors.length)\n        return {\n          type: \"SemActFailure\",\n          errors: errors\n        };\n\n      // Clear out the nulls for the expressions with min:0 and no matches.\n      // <S> { (:p .; :q .)?; :r . } \\ { <s> :r 1 } -> i:0, e:1 resulting in null at e=0\n      // Maybe we want these nulls in expressions[] to make it clear that there are holes?\n      skips.forEach(skip => {\n        for (var exprNo = 0; exprNo < skip.length; ++exprNo)\n          if (skip[exprNo] === null || skip[exprNo] === undefined)\n            skip.splice(exprNo--, 1);\n      });\n\n      if (\"semActs\" in shape)\n        ret.semActs = shape.semActs;\n      return ret;\n    }\n  }\n\nfunction extend(base) {\n  if (!base) base = {};\n  for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)\n    for (var name in arg)\n      base[name] = arg[name];\n  return base;\n}\n\n// ## Exports\n\nreturn exports = {\n  name: \"nfax-val-1err\",\n  description: \"simple regular expression engine with n out states\",\n  compile: compileNFA\n};\n\n})();\n\nif (true)\n  module.exports = NFAXVal1Err;\n\n\n//# sourceURL=webpack://blues/./node_modules/@shexjs/core/lib/regex/nfax-val-1err.js?");

/***/ }),

/***/ "./node_modules/@shexjs/core/lib/regex/threaded-val-nerr.js":
/*!******************************************************************!*\
  !*** ./node_modules/@shexjs/core/lib/regex/threaded-val-nerr.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var ThreadedValNErr = (function () {\nvar RdfTerm = __webpack_require__(/*! ../RdfTerm */ \"./node_modules/@shexjs/core/lib/RdfTerm.js\");\nvar UNBOUNDED = -1;\n\nfunction vpEngine (schema, shape, index) {\n    var outerExpression = shape.expression;\n    return {\n      match:match\n    };\n\n    function match (graph, node, constraintList, constraintToTripleMapping, tripleToConstraintMapping, neighborhood, semActHandler, trace) {\n\n      /*\n       * returns: list of passing or failing threads (no heterogeneous lists)\n       */\n      function validateExpr (expr, thread) {\n        if (typeof expr === \"string\") { // Inclusion\n          var included = index.tripleExprs[expr];\n          return validateExpr(included, thread);\n        }\n\n        var constraintNo = constraintList.indexOf(expr);\n        var min = \"min\" in expr ? expr.min : 1;\n        var max = \"max\" in expr ? expr.max === UNBOUNDED ? Infinity : expr.max : 1;\n\n        function validateRept (type, val) {\n          var repeated = 0, errOut = false;\n          var newThreads = [thread];\n          var minmax = {  };\n          if (\"min\" in expr && expr.min !== 1 || \"max\" in expr && expr.max !== 1) {\n            minmax.min = expr.min;\n            minmax.max = expr.max;\n          }\n          if (\"semActs\" in expr)\n            minmax.semActs = expr.semActs;\n          if (\"annotations\" in expr)\n            minmax.annotations = expr.annotations;\n          for (; repeated < max && !errOut; ++repeated) {\n            var inner = [];\n            for (var t = 0; t < newThreads.length; ++t) {\n              var newt = newThreads[t];\n              var sub = val(newt);\n              if (sub.length > 0 && sub[0].errors.length === 0) { // all subs pass or all fail\n                sub.forEach(newThread => {\n                  var solutions =\n                      \"expression\" in newt ? newt.expression.solutions : [];\n                  if (\"solution\" in newThread)\n                    solutions = solutions.concat(newThread.solution);\n                  delete newThread.solution;\n                  newThread.expression = extend({\n                    type: type,\n                    solutions: solutions\n                  }, minmax);\n                });\n              }\n              if (sub.length === 0 /* min:0 */ || sub[0].errors.length > 0)\n                return repeated < min ? sub : newThreads;\n              else\n                inner = inner.concat(sub);\n              // newThreads.expressions.push(sub);\n            }\n            newThreads = inner;\n          }\n          if (newThreads.length > 0 && newThreads[0].errors.length === 0 && \"semActs\" in expr) {\n            var passes = [];\n            var failures = [];\n            newThreads.forEach(newThread => {\n              if (semActHandler.dispatchAll(expr.semActs, \"???\", newThread)) {\n                passes.push(newThread)\n              } else {\n                newThread.errors.push({ type: \"SemActFailure\", errors: [{ type: \"UntrackedSemActFailure\" }] });\n                failures.push(newThread);\n              }\n            });\n            newThreads = passes.length > 0 ? passes : failures;\n          }\n          return newThreads;\n        }\n\n        if (expr.type === \"TripleConstraint\") {\n          var negated = \"negated\" in expr && expr.negated || max === 0;\n          if (negated)\n            min = max = Infinity;\n          if (thread.avail[constraintNo] === undefined)\n            thread.avail[constraintNo] = constraintToTripleMapping[constraintNo].map(pair => pair.tNo);\n          var minmax = {  };\n          if (\"min\" in expr && expr.min !== 1 || \"max\" in expr && expr.max !== 1) {\n            minmax.min = expr.min;\n            minmax.max = expr.max;\n          }\n          if (\"semActs\" in expr)\n            minmax.semActs = expr.semActs;\n          if (\"annotations\" in expr)\n            minmax.annotations = expr.annotations;\n          var taken = thread.avail[constraintNo].splice(0, min);\n          var passed = negated ? taken.length === 0 : taken.length >= min;\n          var ret = [];\n          var matched = thread.matched;\n          if (passed) {\n            do {\n              var newThread = {\n                avail: thread.avail.map(a => { // copy parent thread's avail vector\n                  return a.slice();\n                }), // was: extend({}, thread.avail)\n                errors: thread.errors.slice(),\n                matched: matched.concat({\n                  tNos: taken.slice()\n                }),\n                expression: extend(\n                  {\n                    type: \"TripleConstraintSolutions\",\n                    predicate: expr.predicate\n                    // map(triple => {\n                    //   var t = neighborhood[triple];\n                    //   return {\n                    //     type: \"TestedTriple\", subject: t.subject, predicate: t.predicate, object: t.object\n                    //   }\n                    // })\n                  },\n                  \"valueExpr\" in expr ? { valueExpr: expr.valueExpr } : {},\n                  \"productionLabel\" in expr ? { productionLabel: expr.productionLabel } : {},\n                  minmax,\n                  {\n                    solutions: taken.map(tripleNo =>  {\n                      var t = neighborhood[tripleNo];\n                      var ret = { type: \"TestedTriple\", subject: t.subject, predicate: t.predicate, object: ldify(t.object) };\n                      var hit = constraintToTripleMapping[constraintNo].find(x => x.tNo === tripleNo);\n                      if (hit.res && Object.keys(hit.res).length > 0)\n                        ret.referenced = hit.res;\n                      return ret;\n                      // return { type: \"halfTestedTriple\", tripleNo: tripleNo, constraintNo: constraintNo };\n                    })\n                  }\n                )\n              };\n              ret.push(newThread);\n            } while ((function () {\n              if (thread.avail[constraintNo].length > 0 && taken.length < max) {\n                // build another thread.\n                taken.push(thread.avail[constraintNo].shift());\n                return true;\n              } else {\n                // no more threads\n                return false;\n              }\n            })());\n          } else {\n            var valueExpr = null;\n            if (typeof expr.valueExpr === \"string\") { // ShapeRef\n              valueExpr = expr.valueExpr;\n              if (RdfTerm.isBlank(valueExpr))\n                valueExpr = index.shapeExprs[valueExpr];\n            } else if (expr.valueExpr) {\n              valueExpr = extend({}, expr.valueExpr)\n            }\n            ret.push({\n              avail: thread.avail,\n              errors: thread.errors.concat([\n                extend({\n                  type: negated ? \"NegatedProperty\" : \"MissingProperty\",\n                  property: expr.predicate\n                }, valueExpr ? { valueExpr: valueExpr } : {})\n              ]),\n              matched: matched\n            });\n          }\n\n          return ret;\n        }\n\n        else if (expr.type === \"OneOf\") {\n          return validateRept(\"OneOfSolutions\", (th) => {\n            var accept = null;\n            var matched = [];\n            var failed = [];\n            expr.expressions.forEach(nested => {\n              var thcopy = {\n                avail: th.avail.map(a => { return a.slice(); }),\n                errors: th.errors,\n                matched: th.matched//.slice() ever needed??\n              };\n              var sub = validateExpr(nested, thcopy);\n              if (sub[0].errors.length === 0) { // all subs pass or all fail\n                matched = matched.concat(sub);\n                sub.forEach(newThread => {\n                  var expressions =\n                      \"solution\" in thcopy ? thcopy.solution.expressions : [];\n                  if (\"expression\" in newThread) // undefined for no matches on min card:0\n                    expressions = expressions.concat([newThread.expression]);\n                  delete newThread.expression;\n                  newThread.solution = {\n                    type: \"OneOfSolution\",\n                    expressions: expressions\n                  };\n                });\n              } else\n                failed = failed.concat(sub);\n            });\n            return matched.length > 0 ? matched : failed;\n          });\n        }\n\n        else if (expr.type === \"EachOf\") {\n          return homogenize(validateRept(\"EachOfSolutions\", (th) => {\n            // Iterate through nested expressions, exprThreads starts as [th].\n            return expr.expressions.reduce((exprThreads, nested) => {\n              // Iterate through current thread list composing nextThreads.\n              // Consider e.g.\n              // <S1> { <p1> . | <p2> .; <p3> . } / { <x> <p2> 2; <p3> 3 } (should pass)\n              // <S1> { <p1> .; <p2> . }          / { <s1> <p1> 1 }        (should fail)\n              return homogenize(exprThreads.reduce((nextThreads, exprThread) => {\n                var sub = validateExpr(nested, exprThread);\n                // Move newThread.expression into a hierarchical solution structure.\n                sub.forEach(newThread => {\n                  if (newThread.errors.length === 0) {\n                    var expressions =\n                        \"solution\" in exprThread ? exprThread.solution.expressions : [];\n                    if (\"expression\" in newThread) // undefined for no matches on min card:0\n                      expressions = expressions.concat([newThread.expression]);\n                    // console.warn(threadMatched(newThread), \" vs \", exprMatched(expressions));\n                    delete newThread.expression;\n                    newThread.solution = {\n                      type: \"EachOfSolution\",\n                      expressions: expressions // exprThread.expression + newThread.expression\n                    };\n                  }\n                });\n                return nextThreads.concat(sub);\n              }, []));\n            }, [th]);\n          }));\n        }\n\n        // else if (expr.type === \"Inclusion\") {\n        //   var included = schema.productions[expr.include];\n        //   return validateExpr(included, thread);\n        // }\n\n        // else if (expr.type === \"NestedShape\") {\n        //   var newThreads = [thread]\n        //   return newThreads;\n        // }\n\n        runtimeError(\"unexpected expr type: \" + expr.type);\n\n        function homogenize (list) {\n          return list.reduce((acc, elt) => {\n            if (elt.errors.length === 0) {\n              if (acc.errors) {\n                return { errors: false, l: [elt] };\n              } else {\n                return { errors: false, l: acc.l.concat(elt) };\n              }\n            } else {\n              if (acc.errors) {\n                return { errors: true, l: acc.l.concat(elt) };\n              } else {\n                return acc; }\n            }\n          }, {errors: true, l: []}).l;\n        }\n      }\n\n      var startingThread = {\n        avail:[],   // triples remaining by constraint number\n        matched:[], // triples matched in this thread\n        errors:[]   // errors encounted\n      };\n      if (!outerExpression)\n        return { }; // vapid match if no expression\n      var ret = validateExpr(outerExpression, startingThread);\n      // console.log(JSON.stringify(ret));\n      // note: don't return if ret.length === 1 because it might fail the unmatchedTriples test.\n      var longerChosen =\n          ret.reduce((ret, elt) => {\n            if (elt.errors.length > 0)\n              return ret;              // early return\n            var unmatchedTriples = {};\n            // Collect triples assigned to some constraint.\n            Object.keys(tripleToConstraintMapping).forEach(k => {\n              if (tripleToConstraintMapping[k] !== undefined)\n                unmatchedTriples[k] = tripleToConstraintMapping[k];\n            });\n            // Removed triples matched in this thread.\n            elt.matched.forEach(m => {\n              m.tNos.forEach(t => {\n                delete unmatchedTriples[t];\n              });\n            });\n            // Remaining triples are unaccounted for.\n            Object.keys(unmatchedTriples).forEach(t => {\n              elt.errors.push({\n                type: \"ExcessTripleViolation\",\n                triple: neighborhood[t],\n                constraint: constraintList[unmatchedTriples[t]]\n              });\n            });\n            return ret !== null ? ret : // keep first solution\n            // Accept thread with no unmatched triples.\n            Object.keys(unmatchedTriples).length > 0 ? null : elt;\n          }, null);\n      return longerChosen !== null ?\n        finish(longerChosen.expression, constraintList,\n               neighborhood, semActHandler) :\n        ret.length > 1 ? {\n          type: \"PossibleErrors\",\n          errors: ret.reduce((all, e) => {\n            return all.concat([e.errors]);\n          }, [])\n        } : ret[0];\n    }\n\n        function ldify (term) {\n          if (term[0] !== \"\\\"\")\n            return term;\n          var ret = { value: RdfTerm.getLiteralValue(term) };\n          var dt = RdfTerm.getLiteralType(term);\n          if (dt &&\n              dt !== \"http://www.w3.org/2001/XMLSchema#string\" &&\n              dt !== \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\")\n            ret.type = dt;\n          var lang = RdfTerm.getLiteralLanguage(term)\n          if (lang)\n            ret.language = lang;\n          return ret;\n        }\n\n    function finish (fromValidatePoint, constraintList, neighborhood, semActHandler) {\n      function _dive (solns) {\n        if (solns.type === \"OneOfSolutions\" ||\n            solns.type === \"EachOfSolutions\") {\n          solns.solutions.forEach(s => {\n            s.expressions.forEach(e => {\n              _dive(e);\n            });\n          });\n        } else if (solns.type === \"TripleConstraintSolutions\") {\n          solns.solutions = solns.solutions.map(x => {\n            if (x.type === \"TestedTriple\") // already done\n              return x; // c.f. validation/3circularRef1_pass-open\n            var t = neighborhood[x.tripleNo];\n            var expr = constraintList[x.constraintNo];\n            var ret = {\n              type: \"TestedTriple\", subject: t.subject, predicate: t.predicate, object: ldify(t.object)\n            };\n            function diver (focus, shapeLabel, dive) {\n              var sub = dive(focus, shapeLabel);\n              if (\"errors\" in sub) {\n                // console.dir(sub);\n                var err = {\n                  type: \"ReferenceError\", focus: focus,\n                  shape: shapeLabel\n                };\n                if (typeof shapeLabel === \"string\" && RdfTerm.isBlank(shapeLabel))\n                  err.referencedShape = shape;\n                err.errors = sub;\n                return [err];\n              }\n              if ((\"solution\" in sub || \"solutions\" in sub)&& Object.keys(sub.solution || sub.solutions).length !== 0 ||\n                  sub.type === \"Recursion\")\n                ret.referenced = sub; // !!! needs to aggregate errors and solutions\n              return [];\n            }\n            function diveRecurse (focus, shapeLabel) {\n              return diver(focus, shapeLabel, recurse);\n            }\n            function diveDirect (focus, shapeLabel) {\n              return diver(focus, shapeLabel, direct);\n            }\n            var subErrors = \"valueExpr\" in expr ?\n                checkValueExpr(expr.inverse ? t.subject : t.object, expr.valueExpr, diveRecurse, diveDirect) :\n                [];\n            if (subErrors.length === 0 && \"semActs\" in expr &&\n                !semActHandler.dispatchAll(expr.semActs, t, ret))\n              subErrors.push({\n                type: \"SemActFailure\",\n                errors: [{\n                  type: \"UntrackedSemActFailure\"\n                }]\n              }) // some semAct aborted\n            if (subErrors.length > 0) {\n              fromValidatePoint.errors = fromValidatePoint.errors || [];\n              fromValidatePoint.errors = fromValidatePoint.errors.concat(subErrors);\n            }\n            return ret;\n          });\n        } else {\n          throw Error(\"unexpected expr type in \" + JSON.stringify(solns));\n        }\n      }\n      // if (Object.keys(fromValidatePoint).length > 0) // guard against {}\n      //   _dive(fromValidatePoint);\n      if (\"semActs\" in shape)\n        fromValidatePoint.semActs = shape.semActs;\n      return fromValidatePoint;\n    }\n  }\n\n        function ldify (term) {\n          if (term[0] !== \"\\\"\")\n            return term;\n          var ret = { value: N3Util.getLiteralValue(term) };\n          var dt = N3Util.getLiteralType(term);\n          if (dt &&\n              dt !== \"http://www.w3.org/2001/XMLSchema#string\" &&\n              dt !== \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\")\n            ret.type = dt;\n          var lang = N3Util.getLiteralLanguage(term)\n          if (lang)\n            ret.language = lang;\n          return ret;\n        }\n\nfunction extend(base) {\n  if (!base) base = {};\n  for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)\n    for (var name in arg)\n      base[name] = arg[name];\n  return base;\n}\n\nreturn {\n  name: \"threaded-val-nerr\",\n  description: \"emulation of regular expression engine with error permutations\",\n  compile: vpEngine\n};\n})();\n\nif (true)\n  module.exports = ThreadedValNErr;\n\n\n//# sourceURL=webpack://blues/./node_modules/@shexjs/core/lib/regex/threaded-val-nerr.js?");

/***/ }),

/***/ "./node_modules/@shexjs/core/shex-core.js":
/*!************************************************!*\
  !*** ./node_modules/@shexjs/core/shex-core.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var ShExCore = {\n  RdfTerm:    __webpack_require__(/*! ./lib/RdfTerm */ \"./node_modules/@shexjs/core/lib/RdfTerm.js\"),\n  Util:         __webpack_require__(/*! ./lib/ShExUtil */ \"./node_modules/@shexjs/core/lib/ShExUtil.js\"),\n  Validator:    __webpack_require__(/*! ./lib/ShExValidator */ \"./node_modules/@shexjs/core/lib/ShExValidator.js\"),\n  Writer:    __webpack_require__(/*! ./lib/ShExWriter */ \"./node_modules/@shexjs/core/lib/ShExWriter.js\"),\n  'nfax-val-1err':     __webpack_require__(/*! ./lib/regex/nfax-val-1err */ \"./node_modules/@shexjs/core/lib/regex/nfax-val-1err.js\"),\n  'threaded-val-nerr': __webpack_require__(/*! ./lib/regex/threaded-val-nerr */ \"./node_modules/@shexjs/core/lib/regex/threaded-val-nerr.js\")\n};\n\nif (true)\n  module.exports = ShExCore;\n\n\n\n//# sourceURL=webpack://blues/./node_modules/@shexjs/core/shex-core.js?");

/***/ }),

/***/ "./node_modules/@shexjs/parser/lib/ShExJison.js":
/*!******************************************************!*\
  !*** ./node_modules/@shexjs/parser/lib/ShExJison.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, module) {/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar ShExJison = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,18,19,20,21,23,26,36,198,220,221],$V1=[19,21,220,221],$V2=[2,27],$V3=[1,22],$V4=[1,23],$V5=[2,12],$V6=[2,13],$V7=[2,14],$V8=[7,18,19,20,21,23,26,36,220,221],$V9=[1,29],$Va=[1,32],$Vb=[1,31],$Vc=[2,18],$Vd=[2,19],$Ve=[1,38],$Vf=[1,42],$Vg=[1,41],$Vh=[1,40],$Vi=[1,44],$Vj=[1,47],$Vk=[1,46],$Vl=[2,15],$Vm=[2,17],$Vn=[2,264],$Vo=[2,265],$Vp=[2,266],$Vq=[2,267],$Vr=[19,21,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,194,220,223],$Vs=[2,61],$Vt=[1,65],$Vu=[19,21,39,43,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,184,194,220,223,225],$Vv=[2,29],$Vw=[2,242],$Vx=[2,243],$Vy=[2,268],$Vz=[198,200],$VA=[1,73],$VB=[1,76],$VC=[1,75],$VD=[2,16],$VE=[7,18,19,20,21,23,26,36,51,220,221],$VF=[2,47],$VG=[7,18,19,20,21,23,26,36,51,53,220,221],$VH=[2,54],$VI=[119,125,127,194,223],$VJ=[2,139],$VK=[1,111],$VL=[1,119],$VM=[1,93],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,110],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[1,123],$VY=[1,124],$VZ=[1,125],$V_=[1,106],$V$=[1,118],$V01=[2,62],$V11=[19,21,69,71,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,194,220,223],$V21=[1,136],$V31=[1,137],$V41=[1,138],$V51=[1,135],$V61=[1,134],$V71=[2,233],$V81=[2,234],$V91=[2,235],$Va1=[2,20],$Vb1=[1,145],$Vc1=[2,53],$Vd1=[1,147],$Ve1=[2,60],$Vf1=[2,69],$Vg1=[1,153],$Vh1=[1,154],$Vi1=[1,155],$Vj1=[2,65],$Vk1=[2,71],$Vl1=[1,162],$Vm1=[1,163],$Vn1=[1,164],$Vo1=[1,167],$Vp1=[1,170],$Vq1=[2,68],$Vr1=[7,18,19,20,21,23,26,36,51,53,79,80,81,119,125,127,194,195,198,220,221,223],$Vs1=[2,95],$Vt1=[7,18,19,20,21,23,26,36,51,53,195,198,220,221],$Vu1=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,220,221],$Vv1=[2,87],$Vw1=[2,88],$Vx1=[7,18,19,20,21,23,26,36,51,53,79,80,81,101,102,103,104,119,125,127,194,195,198,220,221,223],$Vy1=[2,108],$Vz1=[2,107],$VA1=[7,18,19,20,21,23,26,36,51,53,101,102,103,104,112,113,114,115,116,117,195,198,220,221],$VB1=[2,102],$VC1=[2,101],$VD1=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,195,198,220,221],$VE1=[2,91],$VF1=[2,92],$VG1=[2,112],$VH1=[2,113],$VI1=[2,114],$VJ1=[2,110],$VK1=[2,241],$VL1=[19,21,71,81,100,108,109,168,190,209,210,211,212,213,214,215,216,217,218,220],$VM1=[2,187],$VN1=[7,18,19,20,21,23,26,36,51,53,112,113,114,115,116,117,195,198,220,221],$VO1=[2,104],$VP1=[1,194],$VQ1=[1,196],$VR1=[1,198],$VS1=[1,197],$VT1=[2,118],$VU1=[1,205],$VV1=[1,206],$VW1=[1,207],$VX1=[1,208],$VY1=[100,108,109,211,212,213,214],$VZ1=[2,26],$V_1=[2,31],$V$1=[2,32],$V02=[79,80,81,119,125,127,194,223],$V12=[51,53],$V22=[1,270],$V32=[1,275],$V42=[1,252],$V52=[1,260],$V62=[1,261],$V72=[1,262],$V82=[1,269],$V92=[1,265],$Va2=[1,274],$Vb2=[2,48],$Vc2=[2,55],$Vd2=[2,64],$Ve2=[2,70],$Vf2=[2,66],$Vg2=[2,72],$Vh2=[7,18,19,20,21,23,26,36,51,53,101,102,103,104,195,198,220,221],$Vi2=[1,326],$Vj2=[1,334],$Vk2=[1,335],$Vl2=[1,336],$Vm2=[1,342],$Vn2=[1,343],$Vo2=[7,18,19,20,21,23,26,36,51,53,79,80,81,119,125,127,194,198,220,221,223],$Vp2=[2,231],$Vq2=[7,18,19,20,21,23,26,36,51,53,198,220,221],$Vr2=[1,351],$Vs2=[2,106],$Vt2=[2,111],$Vu2=[2,98],$Vv2=[1,357],$Vw2=[2,99],$Vx2=[2,100],$Vy2=[2,105],$Vz2=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,198,220,221],$VA2=[2,93],$VB2=[1,374],$VC2=[1,380],$VD2=[1,369],$VE2=[1,373],$VF2=[1,383],$VG2=[1,384],$VH2=[1,385],$VI2=[1,372],$VJ2=[1,386],$VK2=[1,387],$VL2=[1,392],$VM2=[1,393],$VN2=[1,394],$VO2=[1,395],$VP2=[1,388],$VQ2=[1,389],$VR2=[1,390],$VS2=[1,391],$VT2=[1,379],$VU2=[19,21,69,165,204,220],$VV2=[2,167],$VW2=[2,141],$VX2=[1,408],$VY2=[1,407],$VZ2=[1,421],$V_2=[1,424],$V$2=[1,420],$V03=[1,423],$V13=[2,117],$V23=[2,122],$V33=[2,124],$V43=[2,125],$V53=[2,126],$V63=[2,256],$V73=[2,257],$V83=[2,258],$V93=[2,259],$Va3=[2,123],$Vb3=[19,21,39,43,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,184,194,195,198,220,223,225],$Vc3=[2,36],$Vd3=[2,74],$Ve3=[2,77],$Vf3=[2,35],$Vg3=[2,39],$Vh3=[2,42],$Vi3=[2,45],$Vj3=[1,446],$Vk3=[1,448],$Vl3=[1,454],$Vm3=[1,455],$Vn3=[1,456],$Vo3=[1,463],$Vp3=[1,464],$Vq3=[1,465],$Vr3=[1,468],$Vs3=[2,41],$Vt3=[1,538],$Vu3=[2,44],$Vv3=[1,574],$Vw3=[2,67],$Vx3=[51,53,70],$Vy3=[1,603],$Vz3=[51,53,70,79,80,81,119,125,127,194,195,198,223],$VA3=[51,53,70,195,198],$VB3=[51,53,70,96,97,98,101,102,103,104,195,198],$VC3=[51,53,70,79,80,81,101,102,103,104,119,125,127,194,195,198,223],$VD3=[51,53,70,101,102,103,104,112,113,114,115,116,117,195,198],$VE3=[51,53,70,112,113,114,115,116,117,195,198],$VF3=[51,70],$VG3=[7,18,19,20,21,23,26,36,51,53,79,80,81,119,125,127,194,220,221,223],$VH3=[2,97],$VI3=[2,96],$VJ3=[2,230],$VK3=[1,645],$VL3=[1,648],$VM3=[1,644],$VN3=[1,647],$VO3=[2,94],$VP3=[2,109],$VQ3=[2,103],$VR3=[2,115],$VS3=[2,116],$VT3=[2,134],$VU3=[2,186],$VV3=[1,678],$VW3=[19,21,71,81,100,108,109,168,183,190,209,210,211,212,213,214,215,216,217,218,220],$VX3=[2,236],$VY3=[2,237],$VZ3=[2,238],$V_3=[2,249],$V$3=[2,252],$V04=[2,246],$V14=[2,247],$V24=[2,248],$V34=[2,254],$V44=[2,255],$V54=[2,260],$V64=[2,261],$V74=[2,262],$V84=[2,263],$V94=[19,21,71,81,100,108,109,111,168,183,190,209,210,211,212,213,214,215,216,217,218,220],$Va4=[2,146],$Vb4=[2,147],$Vc4=[1,686],$Vd4=[2,148],$Ve4=[121,135],$Vf4=[2,153],$Vg4=[2,154],$Vh4=[2,156],$Vi4=[1,689],$Vj4=[1,690],$Vk4=[19,21,204,220],$Vl4=[2,179],$Vm4=[1,698],$Vn4=[121,135,140,141],$Vo4=[2,165],$Vp4=[119,125,127,194,195,198,223],$Vq4=[19,21,119,125,127,194,204,220,223],$Vr4=[2,239],$Vs4=[2,240],$Vt4=[19,21,39,43,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,184,194,198,220,223,225],$Vu4=[2,33],$Vv4=[2,37],$Vw4=[2,73],$Vx4=[2,75],$Vy4=[2,34],$Vz4=[2,43],$VA4=[2,40],$VB4=[2,46],$VC4=[1,765],$VD4=[1,771],$VE4=[1,811],$VF4=[1,858],$VG4=[51,53,70,101,102,103,104,195,198],$VH4=[51,53,70,79,80,81,119,125,127,194,198,223],$VI4=[51,53,70,198],$VJ4=[1,901],$VK4=[51,53,70,96,97,98,101,102,103,104,198],$VL4=[1,911],$VM4=[1,948],$VN4=[1,984],$VO4=[2,232],$VP4=[1,995],$VQ4=[1,1001],$VR4=[1,1000],$VS4=[19,21,100,108,109,209,210,211,212,213,214,215,216,217,218,220],$VT4=[1,1021],$VU4=[1,1027],$VV4=[1,1026],$VW4=[1,1048],$VX4=[1,1054],$VY4=[1,1053],$VZ4=[1,1071],$V_4=[1,1073],$V$4=[1,1075],$V05=[19,21,71,81,100,108,109,168,184,190,209,210,211,212,213,214,215,216,217,218,220],$V15=[1,1079],$V25=[1,1085],$V35=[1,1088],$V45=[1,1089],$V55=[1,1090],$V65=[1,1078],$V75=[1,1091],$V85=[1,1092],$V95=[1,1097],$Va5=[1,1098],$Vb5=[1,1099],$Vc5=[1,1100],$Vd5=[1,1093],$Ve5=[1,1094],$Vf5=[1,1095],$Vg5=[1,1096],$Vh5=[1,1084],$Vi5=[2,250],$Vj5=[2,253],$Vk5=[2,135],$Vl5=[2,149],$Vm5=[2,151],$Vn5=[2,155],$Vo5=[2,157],$Vp5=[2,158],$Vq5=[2,162],$Vr5=[2,164],$Vs5=[2,169],$Vt5=[2,170],$Vu5=[1,1115],$Vv5=[1,1118],$Vw5=[1,1114],$Vx5=[1,1117],$Vy5=[1,1128],$Vz5=[2,226],$VA5=[2,244],$VB5=[2,245],$VC5=[119,125,127,194,198,223],$VD5=[2,127],$VE5=[2,76],$VF5=[1,1168],$VG5=[1,1204],$VH5=[1,1263],$VI5=[1,1269],$VJ5=[1,1301],$VK5=[1,1307],$VL5=[51,53,70,79,80,81,119,125,127,194,223],$VM5=[51,53,70,96,97,98,101,102,103,104],$VN5=[1,1365],$VO5=[1,1412],$VP5=[2,227],$VQ5=[2,228],$VR5=[2,229],$VS5=[7,18,19,20,21,23,26,36,51,53,79,80,81,111,119,125,127,194,195,198,220,221,223],$VT5=[7,18,19,20,21,23,26,36,51,53,111,195,198,220,221],$VU5=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,111,195,198,220,221],$VV5=[2,209],$VW5=[1,1465],$VX5=[19,21,71,81,100,108,109,168,183,184,190,209,210,211,212,213,214,215,216,217,218,220],$VY5=[19,21,71,81,100,108,109,111,168,183,184,190,209,210,211,212,213,214,215,216,217,218,220],$VZ5=[2,251],$V_5=[2,152],$V$5=[2,150],$V06=[2,159],$V16=[2,163],$V26=[2,160],$V36=[2,161],$V46=[19,21,43,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,166,194,220,223],$V56=[1,1482],$V66=[70,135],$V76=[1,1485],$V86=[1,1486],$V96=[70,135,140,141],$Va6=[1,1509],$Vb6=[1,1515],$Vc6=[1,1514],$Vd6=[1,1552],$Ve6=[1,1599],$Vf6=[1,1632],$Vg6=[1,1638],$Vh6=[1,1637],$Vi6=[1,1658],$Vj6=[1,1664],$Vk6=[1,1663],$Vl6=[1,1685],$Vm6=[1,1691],$Vn6=[1,1690],$Vo6=[1,1736],$Vp6=[1,1802],$Vq6=[1,1808],$Vr6=[1,1807],$Vs6=[1,1828],$Vt6=[1,1834],$Vu6=[1,1833],$Vv6=[1,1854],$Vw6=[1,1860],$Vx6=[1,1859],$Vy6=[1,1901],$Vz6=[1,1907],$VA6=[1,1939],$VB6=[1,1945],$VC6=[121,135,140,141,155,195,198],$VD6=[2,172],$VE6=[1,1965],$VF6=[1,1966],$VG6=[1,1967],$VH6=[1,1968],$VI6=[121,135,140,141,155,161,162,163,164,195,198],$VJ6=[2,38],$VK6=[51,121,135,140,141,155,161,162,163,164,195,198],$VL6=[2,51],$VM6=[51,53,121,135,140,141,155,161,162,163,164,195,198],$VN6=[2,58],$VO6=[1,1997],$VP6=[1,2017],$VQ6=[1,2023],$VR6=[1,2022],$VS6=[19,21,39,43,69,71,79,80,81,85,96,97,98,101,102,103,104,111,112,113,114,115,116,117,119,125,127,166,184,194,195,198,220,223,225],$VT6=[1,2069],$VU6=[1,2075],$VV6=[1,2107],$VW6=[1,2113],$VX6=[1,2166],$VY6=[1,2199],$VZ6=[1,2205],$V_6=[1,2204],$V$6=[1,2225],$V07=[1,2231],$V17=[1,2230],$V27=[1,2252],$V37=[1,2258],$V47=[1,2257],$V57=[1,2279],$V67=[1,2285],$V77=[1,2284],$V87=[1,2305],$V97=[1,2311],$Va7=[1,2310],$Vb7=[1,2332],$Vc7=[1,2338],$Vd7=[1,2337],$Ve7=[51,53,70,79,80,81,111,119,125,127,194,195,198,223],$Vf7=[51,53,70,111,195,198],$Vg7=[51,53,70,96,97,98,101,102,103,104,111,195,198],$Vh7=[1,2407],$Vi7=[121,135,140,141,195,198],$Vj7=[2,174],$Vk7=[1,2469],$Vl7=[2,173],$Vm7=[2,181],$Vn7=[2,182],$Vo7=[2,183],$Vp7=[2,184],$Vq7=[2,49],$Vr7=[2,56],$Vs7=[2,63],$Vt7=[2,83],$Vu7=[2,79],$Vv7=[2,85],$Vw7=[1,2491],$Vx7=[2,82],$Vy7=[51,53,79,80,81,101,102,103,104,119,121,125,127,135,140,141,155,161,162,163,164,194,195,198,223],$Vz7=[51,53,79,80,81,119,121,125,127,135,140,141,155,161,162,163,164,194,195,198,223],$VA7=[51,53,101,102,103,104,112,113,114,115,116,117,121,135,140,141,155,161,162,163,164,195,198],$VB7=[51,53,96,97,98,101,102,103,104,121,135,140,141,155,161,162,163,164,195,198],$VC7=[2,89],$VD7=[2,90],$VE7=[51,53,112,113,114,115,116,117,121,135,140,141,155,161,162,163,164,195,198],$VF7=[111,119,125,127,194,195,198,223],$VG7=[1,2560],$VH7=[1,2649],$VI7=[1,2655],$VJ7=[1,2738],$VK7=[1,2771],$VL7=[1,2777],$VM7=[1,2776],$VN7=[1,2797],$VO7=[1,2803],$VP7=[1,2802],$VQ7=[1,2824],$VR7=[1,2830],$VS7=[1,2829],$VT7=[1,2851],$VU7=[1,2857],$VV7=[1,2856],$VW7=[1,2877],$VX7=[1,2883],$VY7=[1,2882],$VZ7=[1,2904],$V_7=[1,2910],$V$7=[1,2909],$V08=[2,176],$V18=[1,2928],$V28=[2,52],$V38=[2,59],$V48=[2,78],$V58=[2,84],$V68=[2,80],$V78=[2,86],$V88=[51,53,101,102,103,104,121,135,140,141,155,161,162,163,164,195,198],$V98=[1,2952],$Va8=[70,135,140,141,155,195,198],$Vb8=[1,2961],$Vc8=[1,2962],$Vd8=[1,2963],$Ve8=[1,2964],$Vf8=[70,135,140,141,155,161,162,163,164,195,198],$Vg8=[51,70,135,140,141,155,161,162,163,164,195,198],$Vh8=[51,53,70,135,140,141,155,161,162,163,164,195,198],$Vi8=[1,2993],$Vj8=[1,3022],$Vk8=[1,3055],$Vl8=[1,3061],$Vm8=[1,3060],$Vn8=[1,3081],$Vo8=[1,3087],$Vp8=[1,3086],$Vq8=[1,3108],$Vr8=[1,3114],$Vs8=[1,3113],$Vt8=[1,3135],$Vu8=[1,3141],$Vv8=[1,3140],$Vw8=[1,3161],$Vx8=[1,3167],$Vy8=[1,3166],$Vz8=[1,3188],$VA8=[1,3194],$VB8=[1,3193],$VC8=[1,3271],$VD8=[1,3277],$VE8=[121,135,140,141,198],$VF8=[1,3338],$VG8=[2,50],$VH8=[1,3372],$VI8=[2,57],$VJ8=[1,3405],$VK8=[2,81],$VL8=[70,135,140,141,195,198],$VM8=[1,3430],$VN8=[1,3452],$VO8=[51,53,70,79,80,81,101,102,103,104,119,125,127,135,140,141,155,161,162,163,164,194,195,198,223],$VP8=[51,53,70,79,80,81,119,125,127,135,140,141,155,161,162,163,164,194,195,198,223],$VQ8=[51,53,70,101,102,103,104,112,113,114,115,116,117,135,140,141,155,161,162,163,164,195,198],$VR8=[51,53,70,96,97,98,101,102,103,104,135,140,141,155,161,162,163,164,195,198],$VS8=[51,53,70,112,113,114,115,116,117,135,140,141,155,161,162,163,164,195,198],$VT8=[1,3500],$VU8=[1,3506],$VV8=[1,3569],$VW8=[1,3575],$VX8=[1,3574],$VY8=[1,3595],$VZ8=[1,3601],$V_8=[1,3600],$V$8=[1,3622],$V09=[1,3628],$V19=[1,3627],$V29=[2,178],$V39=[2,175],$V49=[51,121,135,140,141,195,198],$V59=[51,53,121,135,140,141,195,198],$V69=[1,3714],$V79=[1,3740],$V89=[1,3782],$V99=[2,171],$Va9=[51,53,70,101,102,103,104,135,140,141,155,161,162,163,164,195,198],$Vb9=[1,3834],$Vc9=[1,3909],$Vd9=[1,3915],$Ve9=[1,3914],$Vf9=[1,3935],$Vg9=[1,3941],$Vh9=[1,3940],$Vi9=[1,3962],$Vj9=[1,3968],$Vk9=[1,3967],$Vl9=[1,3988],$Vm9=[1,3994],$Vn9=[1,3993],$Vo9=[1,4031],$Vp9=[51,53,79,80,81,101,102,103,104,119,121,125,127,135,140,141,194,195,198,223],$Vq9=[51,53,79,80,81,119,121,125,127,135,140,141,194,195,198,223],$Vr9=[51,53,101,102,103,104,112,113,114,115,116,117,121,135,140,141,195,198],$Vs9=[51,53,96,97,98,101,102,103,104,121,135,140,141,195,198],$Vt9=[51,53,112,113,114,115,116,117,121,135,140,141,195,198],$Vu9=[1,4076],$Vv9=[1,4100],$Vw9=[70,135,140,141,198],$Vx9=[1,4115],$Vy9=[1,4148],$Vz9=[1,4181],$VA9=[1,4210],$VB9=[1,4216],$VC9=[1,4215],$VD9=[1,4236],$VE9=[1,4242],$VF9=[1,4241],$VG9=[1,4263],$VH9=[1,4269],$VI9=[1,4268],$VJ9=[111,121,135,140,141,195,198],$VK9=[51,53,101,102,103,104,121,135,140,141,195,198],$VL9=[1,4344],$VM9=[1,4376],$VN9=[51,70,135,140,141,195,198],$VO9=[51,53,70,135,140,141,195,198],$VP9=[1,4446],$VQ9=[1,4472],$VR9=[1,4514],$VS9=[1,4600],$VT9=[1,4633],$VU9=[1,4673],$VV9=[1,4706],$VW9=[1,4712],$VX9=[1,4711],$VY9=[1,4749],$VZ9=[51,53,70,79,80,81,101,102,103,104,119,125,127,135,140,141,194,195,198,223],$V_9=[51,53,70,79,80,81,119,125,127,135,140,141,194,195,198,223],$V$9=[51,53,70,101,102,103,104,112,113,114,115,116,117,135,140,141,195,198],$V0a=[51,53,70,96,97,98,101,102,103,104,135,140,141,195,198],$V1a=[51,53,70,112,113,114,115,116,117,135,140,141,195,198],$V2a=[1,4794],$V3a=[1,4818],$V4a=[1,4855],$V5a=[1,4897],$V6a=[1,4942],$V7a=[70,111,135,140,141,195,198],$V8a=[51,53,70,101,102,103,104,135,140,141,195,198],$V9a=[1,4989],$Vaa=[1,5021],$Vba=[1,5080],$Vca=[1,5104],$Vda=[1,5161],$Vea=[1,5194],$Vfa=[1,5234],$Vga=[1,5289],$Vha=[1,5349],$Via=[1,5391],$Vja=[1,5436],$Vka=[1,5471],$Vla=[1,5526],$Vma=[1,5550],$Vna=[1,5596],$Voa=[1,5640],$Vpa=[1,5714],$Vqa=[1,5769];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"shexDoc\":3,\"initParser\":4,\"Qdirective_E_Star\":5,\"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt\":6,\"EOF\":7,\"directive\":8,\"O_QnotStartAction_E_Or_QstartActions_E_C\":9,\"notStartAction\":10,\"startActions\":11,\"Qstatement_E_Star\":12,\"statement\":13,\"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C\":14,\"baseDecl\":15,\"prefixDecl\":16,\"importDecl\":17,\"IT_BASE\":18,\"IRIREF\":19,\"IT_PREFIX\":20,\"PNAME_NS\":21,\"iri\":22,\"IT_IMPORT\":23,\"start\":24,\"shapeExprDecl\":25,\"IT_start\":26,\"=\":27,\"shapeAnd\":28,\"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star\":29,\"QcodeDecl_E_Plus\":30,\"codeDecl\":31,\"QIT_ABSTRACT_E_Opt\":32,\"shapeExprLabel\":33,\"Qrestriction_E_Star\":34,\"O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C\":35,\"IT_ABSTRACT\":36,\"restriction\":37,\"shapeExpression\":38,\"IT_EXTERNAL\":39,\"QIT_NOT_E_Opt\":40,\"shapeAtomNoRef\":41,\"QshapeOr_E_Opt\":42,\"IT_NOT\":43,\"shapeRef\":44,\"shapeOr\":45,\"inlineShapeExpression\":46,\"inlineShapeOr\":47,\"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus\":48,\"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus\":49,\"O_QIT_OR_E_S_QshapeAnd_E_C\":50,\"IT_OR\":51,\"O_QIT_AND_E_S_QshapeNot_E_C\":52,\"IT_AND\":53,\"shapeNot\":54,\"inlineShapeAnd\":55,\"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star\":56,\"O_QIT_OR_E_S_QinlineShapeAnd_E_C\":57,\"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star\":58,\"inlineShapeNot\":59,\"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star\":60,\"O_QIT_AND_E_S_QinlineShapeNot_E_C\":61,\"shapeAtom\":62,\"inlineShapeAtom\":63,\"nonLitNodeConstraint\":64,\"QshapeOrRef_E_Opt\":65,\"litNodeConstraint\":66,\"shapeOrRef\":67,\"QnonLitNodeConstraint_E_Opt\":68,\"(\":69,\")\":70,\".\":71,\"shapeDefinition\":72,\"nonLitInlineNodeConstraint\":73,\"QinlineShapeOrRef_E_Opt\":74,\"litInlineNodeConstraint\":75,\"inlineShapeOrRef\":76,\"QnonLitInlineNodeConstraint_E_Opt\":77,\"inlineShapeDefinition\":78,\"ATPNAME_LN\":79,\"ATPNAME_NS\":80,\"@\":81,\"Qannotation_E_Star\":82,\"semanticActions\":83,\"annotation\":84,\"IT_LITERAL\":85,\"QxsFacet_E_Star\":86,\"datatype\":87,\"valueSet\":88,\"QnumericFacet_E_Plus\":89,\"xsFacet\":90,\"numericFacet\":91,\"nonLiteralKind\":92,\"QstringFacet_E_Star\":93,\"QstringFacet_E_Plus\":94,\"stringFacet\":95,\"IT_IRI\":96,\"IT_BNODE\":97,\"IT_NONLITERAL\":98,\"stringLength\":99,\"INTEGER\":100,\"REGEXP\":101,\"IT_LENGTH\":102,\"IT_MINLENGTH\":103,\"IT_MAXLENGTH\":104,\"numericRange\":105,\"rawNumeric\":106,\"numericLength\":107,\"DECIMAL\":108,\"DOUBLE\":109,\"string\":110,\"^^\":111,\"IT_MININCLUSIVE\":112,\"IT_MINEXCLUSIVE\":113,\"IT_MAXINCLUSIVE\":114,\"IT_MAXEXCLUSIVE\":115,\"IT_TOTALDIGITS\":116,\"IT_FRACTIONDIGITS\":117,\"Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star\":118,\"{\":119,\"QtripleExpression_E_Opt\":120,\"}\":121,\"O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C\":122,\"extension\":123,\"extraPropertySet\":124,\"IT_CLOSED\":125,\"tripleExpression\":126,\"IT_EXTRA\":127,\"Qpredicate_E_Plus\":128,\"predicate\":129,\"oneOfTripleExpr\":130,\"groupTripleExpr\":131,\"multiElementOneOf\":132,\"Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus\":133,\"O_QGT_PIPE_E_S_QgroupTripleExpr_E_C\":134,\"|\":135,\"singleElementGroup\":136,\"multiElementGroup\":137,\"unaryTripleExpr\":138,\"QGT_SEMI_E_Opt\":139,\",\":140,\";\":141,\"Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus\":142,\"O_QGT_SEMI_E_S_QunaryTripleExpr_E_C\":143,\"Q_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C_E_Opt\":144,\"O_QtripleConstraint_E_Or_QbracketedTripleExpr_E_C\":145,\"include\":146,\"O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C\":147,\"$\":148,\"tripleExprLabel\":149,\"tripleConstraint\":150,\"bracketedTripleExpr\":151,\"Qcardinality_E_Opt\":152,\"QonShapeExpression_E_Opt\":153,\"cardinality\":154,\"IT_ON\":155,\"QIT_SHAPE_IT_EXPRESSION_E_Opt\":156,\"IT_SHAPE\":157,\"IT_EXPRESSION\":158,\"QsenseFlags_E_Opt\":159,\"senseFlags\":160,\"*\":161,\"+\":162,\"?\":163,\"REPEAT_RANGE\":164,\"^\":165,\"[\":166,\"QvalueSetValue_E_Star\":167,\"]\":168,\"valueSetValue\":169,\"iriRange\":170,\"literalRange\":171,\"languageRange\":172,\"O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C\":173,\"QiriExclusion_E_Plus\":174,\"iriExclusion\":175,\"QliteralExclusion_E_Plus\":176,\"literalExclusion\":177,\"QlanguageExclusion_E_Plus\":178,\"languageExclusion\":179,\"Q_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt\":180,\"QiriExclusion_E_Star\":181,\"O_QGT_TILDE_E_S_QiriExclusion_E_Star_C\":182,\"~\":183,\"-\":184,\"QGT_TILDE_E_Opt\":185,\"literal\":186,\"Q_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt\":187,\"QliteralExclusion_E_Star\":188,\"O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C\":189,\"LANGTAG\":190,\"Q_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt\":191,\"O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C\":192,\"QlanguageExclusion_E_Star\":193,\"&\":194,\"//\":195,\"O_Qiri_E_Or_Qliteral_E_C\":196,\"QcodeDecl_E_Star\":197,\"%\":198,\"O_QCODE_E_Or_QGT_MODULO_E_C\":199,\"CODE\":200,\"rdfLiteral\":201,\"numericLiteral\":202,\"booleanLiteral\":203,\"a\":204,\"blankNode\":205,\"langString\":206,\"Q_O_QGT_DTYPE_E_S_Qdatatype_E_C_E_Opt\":207,\"O_QGT_DTYPE_E_S_Qdatatype_E_C\":208,\"IT_true\":209,\"IT_false\":210,\"STRING_LITERAL1\":211,\"STRING_LITERAL_LONG1\":212,\"STRING_LITERAL2\":213,\"STRING_LITERAL_LONG2\":214,\"LANG_STRING_LITERAL1\":215,\"LANG_STRING_LITERAL_LONG1\":216,\"LANG_STRING_LITERAL2\":217,\"LANG_STRING_LITERAL_LONG2\":218,\"prefixedName\":219,\"PNAME_LN\":220,\"BLANK_NODE_LABEL\":221,\"O_QIT_EXTENDS_E_Or_QGT_AMP_E_C\":222,\"IT_EXTENDS\":223,\"O_QIT_RESTRICTS_E_Or_QGT_MINUS_E_C\":224,\"IT_RESTRICTS\":225,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",7:\"EOF\",18:\"IT_BASE\",19:\"IRIREF\",20:\"IT_PREFIX\",21:\"PNAME_NS\",23:\"IT_IMPORT\",26:\"IT_start\",27:\"=\",36:\"IT_ABSTRACT\",39:\"IT_EXTERNAL\",43:\"IT_NOT\",51:\"IT_OR\",53:\"IT_AND\",69:\"(\",70:\")\",71:\".\",79:\"ATPNAME_LN\",80:\"ATPNAME_NS\",81:\"@\",85:\"IT_LITERAL\",96:\"IT_IRI\",97:\"IT_BNODE\",98:\"IT_NONLITERAL\",100:\"INTEGER\",101:\"REGEXP\",102:\"IT_LENGTH\",103:\"IT_MINLENGTH\",104:\"IT_MAXLENGTH\",108:\"DECIMAL\",109:\"DOUBLE\",111:\"^^\",112:\"IT_MININCLUSIVE\",113:\"IT_MINEXCLUSIVE\",114:\"IT_MAXINCLUSIVE\",115:\"IT_MAXEXCLUSIVE\",116:\"IT_TOTALDIGITS\",117:\"IT_FRACTIONDIGITS\",119:\"{\",121:\"}\",125:\"IT_CLOSED\",127:\"IT_EXTRA\",135:\"|\",140:\",\",141:\";\",148:\"$\",155:\"IT_ON\",157:\"IT_SHAPE\",158:\"IT_EXPRESSION\",161:\"*\",162:\"+\",163:\"?\",164:\"REPEAT_RANGE\",165:\"^\",166:\"[\",168:\"]\",183:\"~\",184:\"-\",190:\"LANGTAG\",194:\"&\",195:\"//\",198:\"%\",200:\"CODE\",204:\"a\",209:\"IT_true\",210:\"IT_false\",211:\"STRING_LITERAL1\",212:\"STRING_LITERAL_LONG1\",213:\"STRING_LITERAL2\",214:\"STRING_LITERAL_LONG2\",215:\"LANG_STRING_LITERAL1\",216:\"LANG_STRING_LITERAL_LONG1\",217:\"LANG_STRING_LITERAL2\",218:\"LANG_STRING_LITERAL_LONG2\",220:\"PNAME_LN\",221:\"BLANK_NODE_LABEL\",223:\"IT_EXTENDS\",225:\"IT_RESTRICTS\"},\nproductions_: [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[8,1],[15,2],[16,3],[17,2],[10,1],[10,1],[24,4],[11,1],[30,1],[30,2],[13,1],[13,1],[25,4],[32,0],[32,1],[34,0],[34,2],[35,1],[35,1],[38,3],[38,3],[38,2],[42,0],[42,1],[46,1],[45,1],[45,2],[50,2],[48,1],[48,2],[52,2],[49,1],[49,2],[29,0],[29,2],[47,2],[57,2],[56,0],[56,2],[28,2],[58,0],[58,2],[55,2],[61,2],[60,0],[60,2],[54,2],[40,0],[40,1],[59,2],[62,2],[62,1],[62,2],[62,3],[62,1],[65,0],[65,1],[68,0],[68,1],[41,2],[41,1],[41,2],[41,3],[41,1],[63,2],[63,1],[63,2],[63,3],[63,1],[74,0],[74,1],[77,0],[77,1],[67,1],[67,1],[76,1],[76,1],[44,1],[44,1],[44,2],[66,3],[82,0],[82,2],[64,3],[75,2],[75,2],[75,2],[75,1],[86,0],[86,2],[89,1],[89,2],[73,2],[73,1],[93,0],[93,2],[94,1],[94,2],[92,1],[92,1],[92,1],[90,1],[90,1],[95,2],[95,1],[99,1],[99,1],[99,1],[91,2],[91,2],[106,1],[106,1],[106,1],[106,3],[105,1],[105,1],[105,1],[105,1],[107,1],[107,1],[72,3],[78,4],[122,1],[122,1],[122,1],[118,0],[118,2],[120,0],[120,1],[124,2],[128,1],[128,2],[126,1],[130,1],[130,1],[132,2],[134,2],[133,1],[133,2],[131,1],[131,1],[136,2],[139,0],[139,1],[139,1],[137,3],[143,2],[143,2],[142,1],[142,2],[138,2],[138,1],[147,2],[144,0],[144,1],[145,1],[145,1],[151,7],[152,0],[152,1],[153,0],[153,3],[156,0],[156,2],[150,7],[159,0],[159,1],[154,1],[154,1],[154,1],[154,1],[160,1],[88,3],[167,0],[167,2],[169,1],[169,1],[169,1],[169,2],[174,1],[174,2],[176,1],[176,2],[178,1],[178,2],[173,1],[173,1],[173,1],[170,2],[181,0],[181,2],[182,2],[180,0],[180,1],[175,3],[185,0],[185,1],[171,2],[188,0],[188,2],[189,2],[187,0],[187,1],[177,3],[172,2],[172,2],[193,0],[193,2],[192,2],[191,0],[191,1],[179,3],[146,2],[84,3],[196,1],[196,1],[83,1],[197,0],[197,2],[31,3],[199,1],[199,1],[186,1],[186,1],[186,1],[129,1],[129,1],[87,1],[33,1],[33,1],[149,1],[149,1],[202,1],[202,1],[202,1],[201,1],[201,2],[208,2],[207,0],[207,1],[203,1],[203,1],[110,1],[110,1],[110,1],[110,1],[206,1],[206,1],[206,1],[206,1],[22,1],[22,1],[219,1],[219,1],[205,1],[123,2],[222,1],[222,1],[37,2],[224,1],[224,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n        let imports = Object.keys(Parser._imports).length ? { imports: Parser._imports } : {}\n        var startObj = Parser.start ? { start: Parser.start } : {};\n        var startActs = Parser.startActs ? { startActs: Parser.startActs } : {};\n        let shapes = Parser.shapes ? { shapes: Object.values(Parser.shapes) } : {};\n        var shexj = Object.assign(\n          { type: \"Schema\" }, imports, startActs, startObj, shapes\n        )\n        if (Parser.options.index) {\n          if (Parser._base !== null)\n            shexj._base = Parser._base;\n          shexj._prefixes = Parser._prefixes;\n          shexj._index = {\n            shapeExprs: Parser.shapes || new Map(),\n            tripleExprs: Parser.productions || new Map()\n          };\n          shexj._sourceMap = Parser._sourceMap;\n        }\n        return shexj;\n      \nbreak;\ncase 2:\n yy.parser.yy = { lexer: yy.lexer} ; \nbreak;\ncase 15:\n // t: @@\n        Parser._setBase(Parser._base === null ||\n                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));\n      \nbreak;\ncase 16:\n // t: ShExParser-test.js/with pre-defined prefixes\n        Parser._prefixes[$$[$0-1].slice(0, -1)] = $$[$0];\n      \nbreak;\ncase 17:\n // t: @@\n        Parser._imports.push($$[$0]);\n      \nbreak;\ncase 20:\n\n        if (Parser.start)\n          error(new Error(\"Parse error: start already defined\"), yy);\n        Parser.start = shapeJunction(\"ShapeOr\", $$[$0-1], $$[$0]); // t: startInline\n      \nbreak;\ncase 21:\n\n        Parser.startActs = $$[$0]; // t: startCode1\n      \nbreak;\ncase 22:\nthis.$ = [$$[$0]] // t: startCode1;\nbreak;\ncase 23:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;\nbreak;\ncase 26:\n // t: 1dot 1val1vsMinusiri3??\n        if ($$[$0-3].abstract || $$[$0-1].length) { // t: $$[$0-3]: 1dotAbstractShapeCode1  $$[$0-2]: @@\n          addShape($$[$0-2], Object.assign({type: \"ShapeDecl\"}, $$[$0-3],\n                                     $$[$0-1].length > 0 ? { restricts: $$[$0-1] } : { },\n                                     {shapeExpr: $$[$0]}), yy) // $$[$01]: t: @@\n        } else {\n          addShape($$[$0-2],  $$[$0], yy);\n        }\n      \nbreak;\ncase 27:\nthis.$ = {  };\nbreak;\ncase 28:\nthis.$ = { abstract: true };\nbreak;\ncase 29: case 95:\nthis.$ = [] // t: 1dot, 1dotAnnot3;\nbreak;\ncase 30: case 96:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;\nbreak;\ncase 31:\n\n        this.$ = nonest($$[$0]);\n      \nbreak;\ncase 32:\nthis.$ = { type: \"ShapeExternal\" };\nbreak;\ncase 33:\n\n        if ($$[$0-2])\n          $$[$0-1] = { type: \"ShapeNot\", \"shapeExpr\": nonest($$[$0-1]) }; // t:@@\n        if ($$[$0]) { // If there were disjuncts,\n          //           shapeOr will have $$[$0].set needsAtom.\n          //           Prepend $$[$0].needsAtom with $$[$0-1].\n          //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.\n          $$[$0].needsAtom.unshift(nonest($$[$0-1]));\n          delete $$[$0].needsAtom;\n          this.$ = $$[$0];\n        } else {\n          this.$ = $$[$0-1];\n        }\n      \nbreak;\ncase 34:\n\n        $$[$0-1] = { type: \"ShapeNot\", \"shapeExpr\": nonest($$[$0-1]) } // !!! opt\n        if ($$[$0]) { // If there were disjuncts,\n          //           shapeOr will have $$[$0].set needsAtom.\n          //           Prepend $$[$0].needsAtom with $$[$0-1].\n          //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.\n          $$[$0].needsAtom.unshift(nonest($$[$0-1]));\n          delete $$[$0].needsAtom;\n          this.$ = $$[$0];\n        } else {\n          this.$ = $$[$0-1];\n        }\n      \nbreak;\ncase 35:\n\n        $$[$0].needsAtom.unshift(nonest($$[$0-1]));\n        delete $$[$0].needsAtom;\n        this.$ = $$[$0]; // { type: \"ShapeOr\", \"shapeExprs\": [$$[$0-1]].concat($$[$0]) };\n      \nbreak;\ncase 36: case 235: case 252:\nthis.$ = null;\nbreak;\ncase 37: case 41: case 44: case 50: case 57: case 192: case 251:\nthis.$ = $$[$0];\nbreak;\ncase 39:\n // returns a ShapeOr\n        var disjuncts = $$[$0].map(nonest);\n        this.$ = { type: \"ShapeOr\", shapeExprs: disjuncts, needsAtom: disjuncts }; // t: @@\n      \nbreak;\ncase 40:\n // returns a ShapeAnd\n        // $$[$0-1] could have implicit conjuncts and explicit nested ANDs (will have .nested: true)\n        $$[$0-1].filter(c => c.type === \"ShapeAnd\").length === $$[$0-1].length\n        var and = {\n          type: \"ShapeAnd\",\n          shapeExprs: $$[$0-1].reduce(\n            (acc, elt) =>\n              acc.concat(elt.type === 'ShapeAnd' && !elt.nested ? elt.shapeExprs : nonest(elt)), []\n          )\n        };\n        this.$ = $$[$0].length > 0 ? { type: \"ShapeOr\", shapeExprs: [and].concat($$[$0].map(nonest)) } : and; // t: @@\n        this.$.needsAtom = and.shapeExprs;\n      \nbreak;\ncase 42: case 45:\nthis.$ = [$$[$0]];\nbreak;\ncase 43: case 46: case 48: case 52: case 55: case 59:\nthis.$ = $$[$0-1].concat($$[$0]);\nbreak;\ncase 47: case 51: case 54: case 58:\nthis.$ = [];\nbreak;\ncase 49:\nthis.$ = shapeJunction(\"ShapeOr\", $$[$0-1], $$[$0]);\nbreak;\ncase 53: case 56:\nthis.$ = shapeJunction(\"ShapeAnd\", $$[$0-1], $$[$0]) // t: @@;\nbreak;\ncase 60:\nthis.$ = $$[$0-1] ? { type: \"ShapeNot\", \"shapeExpr\": nonest($$[$0]) } /* t:@@ */ : $$[$0];\nbreak;\ncase 61:\nthis.$ = false;\nbreak;\ncase 62:\nthis.$ = true;\nbreak;\ncase 63:\nthis.$ = $$[$0-1] ? { type: \"ShapeNot\", \"shapeExpr\": nonest($$[$0]) } /* t: 1NOTNOTdot, 1NOTNOTIRI, 1NOTNOTvs */ : $$[$0];\nbreak;\ncase 64: case 73: case 78:\nthis.$ = $$[$0] ? { type: \"ShapeAnd\", shapeExprs: [ extend({ type: \"NodeConstraint\" }, $$[$0-1]), $$[$0] ] } : $$[$0-1];\nbreak;\ncase 66:\nthis.$ = $$[$0] ? shapeJunction(\"ShapeAnd\", $$[$0-1], [$$[$0]]) /* t: 1dotRef1 */ : $$[$0-1] // t:@@;\nbreak;\ncase 67: case 76: case 81:\nthis.$ = Object.assign($$[$0-1], {nested: true}) // t: 1val1vsMinusiri3;\nbreak;\ncase 68: case 77: case 82:\nthis.$ = EmptyShape // t: 1dot;\nbreak;\ncase 75:\nthis.$ = $$[$0] ? shapeJunction(\"ShapeAnd\", $$[$0-1], [$$[$0]]) /* t:@@ */ : $$[$0-1]\t // t: 1dotRef1 -- use _QnonLitNodeConstraint_E_Opt like below?;\nbreak;\ncase 80:\nthis.$ = $$[$0] ? { type: \"ShapeAnd\", shapeExprs: [ extend({ type: \"NodeConstraint\" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;\nbreak;\ncase 91:\n // t: 1dotRefLNex@@\n        $$[$0] = $$[$0].substr(1, $$[$0].length-1);\n        var namePos = $$[$0].indexOf(':');\n        this.$ = addSourceMap(expandPrefix($$[$0].substr(0, namePos), yy) + $$[$0].substr(namePos + 1), yy); // ShapeRef\n      \nbreak;\ncase 92:\n // t: 1dotRefNS1@@\n        $$[$0] = $$[$0].substr(1, $$[$0].length-1);\n        this.$ = addSourceMap(expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy), yy); // ShapeRef\n      \nbreak;\ncase 93:\nthis.$ = addSourceMap($$[$0], yy) // ShapeRef // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;\nbreak;\ncase 94: case 97:\n // t: !!\n        this.$ = $$[$0-2]\n        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !!\n        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !!\n      \nbreak;\ncase 98:\nthis.$ = extend({ type: \"NodeConstraint\", nodeKind: \"literal\" }, $$[$0]) // t: 1literalPattern;\nbreak;\ncase 99:\n\n        if (numericDatatypes.indexOf($$[$0-1]) === -1)\n          numericFacets.forEach(function (facet) {\n            if (facet in $$[$0])\n              error(new Error(\"Parse error: facet \" + facet + \" not allowed for unknown datatype \" + $$[$0-1]), yy);\n          });\n        this.$ = extend({ type: \"NodeConstraint\", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype\n      \nbreak;\ncase 100:\nthis.$ = { type: \"NodeConstraint\", values: $$[$0-1] } // t: 1val1IRIREF;\nbreak;\ncase 101:\nthis.$ = extend({ type: \"NodeConstraint\"}, $$[$0]);\nbreak;\ncase 102:\nthis.$ = {} // t: 1literalPattern;\nbreak;\ncase 103:\n\n        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {\n          error(new Error(\"Parse error: facet \"+Object.keys($$[$0])[0]+\" defined multiple times\"), yy);\n        }\n        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength\n      \nbreak;\ncase 105: case 111:\n\n        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {\n          error(new Error(\"Parse error: facet \"+Object.keys($$[$0])[0]+\" defined multiple times\"), yy);\n        }\n        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength\n      \nbreak;\ncase 106:\nthis.$ = extend({ type: \"NodeConstraint\" }, $$[$0-1], $$[$0] ? $$[$0] : {}) // t: 1iriPattern;\nbreak;\ncase 107:\nthis.$ = extend({ type: \"NodeConstraint\" }, $$[$0]) // t: @@;\nbreak;\ncase 108:\nthis.$ = {};\nbreak;\ncase 109:\n\n        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {\n          error(new Error(\"Parse error: facet \"+Object.keys($$[$0])[0]+\" defined multiple times\"), yy);\n        }\n        this.$ = extend($$[$0-1], $$[$0])\n      \nbreak;\ncase 112:\nthis.$ = { nodeKind: \"iri\" } // t: 1iriPattern;\nbreak;\ncase 113:\nthis.$ = { nodeKind: \"bnode\" } // t: 1bnodeLength;\nbreak;\ncase 114:\nthis.$ = { nodeKind: \"nonliteral\" } // t: 1nonliteralLength;\nbreak;\ncase 117:\nthis.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;\nbreak;\ncase 118:\nthis.$ = unescapeRegexp($$[$0]) // t: 1literalPattern;\nbreak;\ncase 119:\nthis.$ = \"length\" // t: 1literalLength;\nbreak;\ncase 120:\nthis.$ = \"minlength\" // t: 1literalMinlength;\nbreak;\ncase 121:\nthis.$ = \"maxlength\" // t: 1literalMaxlength;\nbreak;\ncase 122:\nthis.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;\nbreak;\ncase 123:\nthis.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;\nbreak;\ncase 124:\nthis.$ = parseInt($$[$0], 10);\nbreak;\ncase 125: case 126:\nthis.$ = parseFloat($$[$0]);\nbreak;\ncase 127:\n // ## deprecated\n        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)\n          this.$ = parseFloat($$[$0-2].value);\n        else if (numericDatatypes.indexOf($$[$0]) !== -1)\n          this.$ = parseInt($$[$0-2].value)\n        else\n          error(new Error(\"Parse error: numeric range facet expected numeric datatype instead of \" + $$[$0]), yy);\n      \nbreak;\ncase 128:\nthis.$ = \"mininclusive\" // t: 1literalMininclusive;\nbreak;\ncase 129:\nthis.$ = \"minexclusive\" // t: 1literalMinexclusive;\nbreak;\ncase 130:\nthis.$ = \"maxinclusive\" // t: 1literalMaxinclusive;\nbreak;\ncase 131:\nthis.$ = \"maxexclusive\" // t: 1literalMaxexclusive;\nbreak;\ncase 132:\nthis.$ = \"totaldigits\" // t: 1literalTotaldigits;\nbreak;\ncase 133:\nthis.$ = \"fractiondigits\" // t: 1literalFractiondigits;\nbreak;\ncase 134:\n // t: 1dotExtend3\n        this.$ = $$[$0-2] === EmptyShape ? { type: \"Shape\" } : $$[$0-2]; // t: 0\n        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2\n        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot\n      \nbreak;\ncase 135:\n // t: 1dotExtend3\n        var exprObj = $$[$0-1] ? { expression: $$[$0-1] } : EmptyObject; // t: 0, 0Extend1\n        this.$ = (exprObj === EmptyObject && $$[$0-3] === EmptyObject) ?\n\t  EmptyShape :\n\t  extend({ type: \"Shape\" }, exprObj, $$[$0-3]);\n      \nbreak;\ncase 136:\nthis.$ = [ \"extends\", [$$[$0]] ] // t: 1dotExtend1;\nbreak;\ncase 137:\nthis.$ = [ \"extra\", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;\nbreak;\ncase 138:\nthis.$ = [ \"closed\", true ] // t: 1dotClosed;\nbreak;\ncase 139:\nthis.$ = EmptyObject;\nbreak;\ncase 140:\n\n        if ($$[$0-1] === EmptyObject)\n          $$[$0-1] = {};\n        if ($$[$0][0] === \"closed\")\n          $$[$0-1][\"closed\"] = true; // t: 1dotClosed\n        else if ($$[$0][0] in $$[$0-1])\n          $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotExtend3, 3groupdot3Extra, 3groupdotExtra3\n        else\n          $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotExtend1\n        this.$ = $$[$0-1];\n      \nbreak;\ncase 143:\nthis.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;\nbreak;\ncase 144:\nthis.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;\nbreak;\ncase 145:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;\nbreak;\ncase 149:\nthis.$ = { type: \"OneOf\", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2oneOfdot;\nbreak;\ncase 150:\nthis.$ = $$[$0] // t: 2oneOfdot;\nbreak;\ncase 151:\nthis.$ = [$$[$0]] // t: 2oneOfdot;\nbreak;\ncase 152:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: 2oneOfdot;\nbreak;\ncase 155:\nthis.$ = $$[$0-1];\nbreak;\ncase 159:\nthis.$ = { type: \"EachOf\", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;\nbreak;\ncase 160:\nthis.$ = $$[$0] // ## deprecated // t: 2groupOfdot;\nbreak;\ncase 161:\nthis.$ = $$[$0] // t: 2groupOfdot;\nbreak;\ncase 162:\nthis.$ = [$$[$0]] // t: 2groupOfdot;\nbreak;\ncase 163:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;\nbreak;\ncase 164:\n\n        if ($$[$0-1]) {\n          this.$ = extend({ id: $$[$0-1] }, $$[$0]);\n          addProduction($$[$0-1],  this.$, yy);\n        } else {\n          this.$ = $$[$0]\n        }\n      \nbreak;\ncase 166:\nthis.$ = addSourceMap($$[$0], yy);\nbreak;\ncase 171:\n\n        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2\n        this.$ = $$[$0-5];\n        // Copy all of the new attributes into the encapsulated shape.\n        if (\"min\" in $$[$0-3]) { this.$.min = $$[$0-3].min; } // t: open3groupdotclosecard23Annot3Code2\n        if (\"max\" in $$[$0-3]) { this.$.max = $$[$0-3].max; } // t: open3groupdotclosecard23Annot3Code2\n        if ($$[$0-2]) { this.$.onShapeExpression = $$[$0-2]; } // t: !!\n        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2\n        if ($$[$0]) { this.$.semActs = \"semActs\" in $$[$0-5] ? $$[$0-5].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot\n      \nbreak;\ncase 172:\nthis.$ = {} // t: 1dot;\nbreak;\ncase 174:\nthis.$ = null // t: 1dot;\nbreak;\ncase 175:\nthis.$ = $$[$0]\t// t: !!;\nbreak;\ncase 178:\n\n        // $$[$0]: t: 1dotCode1\n\tif ($$[$0-4] !== EmptyShape && false) {\n\t  var t = blank();\n\t  addShape(t, $$[$0-4], yy);\n\t  $$[$0-4] = t; // ShapeRef\n\t}\n        // %7: t: 1inversedotCode1\n        this.$ = extend({ type: \"TripleConstraint\" }, $$[$0-6], { predicate: $$[$0-5] }, ($$[$0-4] === EmptyShape ? {} : { valueExpr: $$[$0-4] }), $$[$0-3], $$[$0]); // t: 1dot, 1inversedot\n        if ($$[$0-2])\n          this.$.onShapeExpression = $$[$0-2]; // t: !!\n        if ($$[$0-1].length)\n          this.$[\"annotations\"] = $$[$0-1]; // t: 1dotAnnot3, 1inversedotAnnot3\n      \nbreak;\ncase 181:\nthis.$ = { min:0, max:UNBOUNDED } // t: 1cardStar;\nbreak;\ncase 182:\nthis.$ = { min:1, max:UNBOUNDED } // t: 1cardPlus;\nbreak;\ncase 183:\nthis.$ = { min:0, max:1 } // t: 1cardOpt;\nbreak;\ncase 184:\n\n        $$[$0] = $$[$0].substr(1, $$[$0].length-2);\n        var nums = $$[$0].match(/(\\d+)/g);\n        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star\n        if (nums.length === 2)\n            this.$[\"max\"] = parseInt(nums[1], 10); // t: 1card23\n        else if ($$[$0].indexOf(',') === -1) // t: 1card2\n            this.$[\"max\"] = parseInt(nums[0], 10);\n        else\n            this.$[\"max\"] = UNBOUNDED;\n      \nbreak;\ncase 185:\nthis.$ = { inverse: true } // t: 1inversedot;\nbreak;\ncase 186:\nthis.$ = $$[$0-1] // t: 1val1IRIREF;\nbreak;\ncase 187:\nthis.$ = [] // t: 1val1IRIREF;\nbreak;\ncase 188:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;\nbreak;\ncase 193:\nthis.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;\nbreak;\ncase 194:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;\nbreak;\ncase 195:\nthis.$ = [$$[$0]] // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;\nbreak;\ncase 196:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;\nbreak;\ncase 197:\nthis.$ = [$$[$0]] // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;\nbreak;\ncase 198:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;\nbreak;\ncase 199:\nthis.$ = { type: \"IriStemRange\", stem: { type: \"Wildcard\" }, exclusions: $$[$0] };\nbreak;\ncase 200:\nthis.$ = { type: \"LiteralStemRange\", stem: { type: \"Wildcard\" }, exclusions: $$[$0] };\nbreak;\ncase 201:\nthis.$ = { type: \"LanguageStemRange\", stem: { type: \"Wildcard\" }, exclusions: $$[$0] };\nbreak;\ncase 202:\n\n        if ($$[$0]) {\n          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3\n            type: $$[$0].length ? \"IriStemRange\" : \"IriStem\",\n            stem: $$[$0-1]\n          };\n          if ($$[$0].length)\n            this.$[\"exclusions\"] = $$[$0]; // t: 1val1iriStemMinusiri3\n        } else {\n          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA\n        }\n      \nbreak;\ncase 203:\nthis.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;\nbreak;\ncase 204:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;\nbreak;\ncase 205:\nthis.$ = $$[$0] // t: 1val1iriStemMinusiri3;\nbreak;\ncase 208:\nthis.$ = $$[$0] ? { type: \"IriStem\", stem: $$[$0-1] } /* t: 1val1iriStemMinusiriStem3 */ : $$[$0-1] // t: 1val1iriStemMinusiri3;\nbreak;\ncase 211:\n\n        if ($$[$0]) {\n          this.$ = {  // t: 1val1literalStemMinusliteralStem3, 1val1literalStem\n            type: $$[$0].length ? \"LiteralStemRange\" : \"LiteralStem\",\n            stem: $$[$0-1].value\n          };\n          if ($$[$0].length)\n            this.$[\"exclusions\"] = $$[$0]; // t: 1val1literalStemMinusliteral3\n        } else {\n          this.$ = $$[$0-1]; // t: 1val1LITERAL\n        }\n      \nbreak;\ncase 212:\nthis.$ = [] // t: 1val1literalStem, 1val1literalStemMinusliteral3;\nbreak;\ncase 213:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1literalStemMinusliteral3;\nbreak;\ncase 214:\nthis.$ = $$[$0] // t: 1val1literalStemMinusliteral3;\nbreak;\ncase 217:\nthis.$ = $$[$0] ? { type: \"LiteralStem\", stem: $$[$0-1].value } /* t: 1val1literalStemMinusliteral3 */ : $$[$0-1].value // t: 1val1literalStemMinusliteralStem3;\nbreak;\ncase 218:\n\n        if ($$[$0]) {\n          this.$ = {  // t: 1val1languageStemMinuslanguage3 1val1languageStemMinuslanguageStem3 : 1val1languageStem\n            type: $$[$0].length ? \"LanguageStemRange\" : \"LanguageStem\",\n            stem: $$[$0-1]\n          };\n          if ($$[$0].length)\n            this.$[\"exclusions\"] = $$[$0]; // t: 1val1languageStemMinuslanguage3, 1val1languageStemMinuslanguageStem3\n        } else {\n          this.$ = { type: \"Language\", languageTag: $$[$0-1] }; // t: 1val1language\n        }\n      \nbreak;\ncase 219:\n\n        this.$ = {  // t: @@\n          type: $$[$0].length ? \"LanguageStemRange\" : \"LanguageStem\",\n          stem: \"\"\n        };\n        if ($$[$0].length)\n          this.$[\"exclusions\"] = $$[$0]; // t: @@\n      \nbreak;\ncase 220:\nthis.$ = [] // t: 1val1languageStem, 1val1languageStemMinuslanguage3;\nbreak;\ncase 221:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1languageStemMinuslanguage3;\nbreak;\ncase 222:\nthis.$ = $$[$0] // t: 1val1languageStemMinuslanguage3;\nbreak;\ncase 225:\nthis.$ = $$[$0] ? { type: \"LanguageStem\", stem: $$[$0-1] } /* t: 1val1languageStemMinuslanguageStem3 */ : $$[$0-1] // t: 1val1languageStemMinuslanguage3;\nbreak;\ncase 226:\nthis.$ = addSourceMap($$[$0], yy) // Inclusion // t: 2groupInclude1;\nbreak;\ncase 227:\nthis.$ = { type: \"Annotation\", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;\nbreak;\ncase 230:\nthis.$ = $$[$0].length ? { semActs: $$[$0] } : null // t: 1dotCode1/2oneOfDot;\nbreak;\ncase 231:\nthis.$ = [] // t: 1dot, 1dotCode1;\nbreak;\ncase 232:\nthis.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;\nbreak;\ncase 233:\nthis.$ = $$[$0] ? unescapeSemanticAction($$[$0-1], $$[$0]) /* t: 1dotCode1 */ : { type: \"SemAct\", name: $$[$0-1] } // t: 1dotNoCode1;\nbreak;\ncase 240:\nthis.$ = RDF_TYPE // t: 1AvalA;\nbreak;\ncase 246:\nthis.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;\nbreak;\ncase 247:\nthis.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;\nbreak;\ncase 248:\nthis.$ = createLiteral($$[$0], XSD_DOUBLE) // t: 1val1DOUBLE;\nbreak;\ncase 250:\nthis.$ = $$[$0] ? extend($$[$0-1], { type: $$[$0] }) : $$[$0-1] // t: 1val1Datatype;\nbreak;\ncase 254:\nthis.$ = { value: \"true\", type: XSD_BOOLEAN } // t: 1val1true;\nbreak;\ncase 255:\nthis.$ = { value: \"false\", type: XSD_BOOLEAN } // t: 1val1false;\nbreak;\ncase 256:\nthis.$ = unescapeString($$[$0], 1)\t// t: 1val1STRING_LITERAL2;\nbreak;\ncase 257:\nthis.$ = unescapeString($$[$0], 3)\t// t: 1val1STRING_LITERAL1;\nbreak;\ncase 258:\nthis.$ = unescapeString($$[$0], 1)\t// t: 1val1STRING_LITERAL_LONG2;\nbreak;\ncase 259:\nthis.$ = unescapeString($$[$0], 3)\t// t: 1val1STRING_LITERAL_LONG1;\nbreak;\ncase 260:\nthis.$ = unescapeLangString($$[$0], 1)\t// t: @@;\nbreak;\ncase 261:\nthis.$ = unescapeLangString($$[$0], 3)\t// t: @@;\nbreak;\ncase 262:\nthis.$ = unescapeLangString($$[$0], 1)\t// t: 1val1LANGTAG;\nbreak;\ncase 263:\nthis.$ = unescapeLangString($$[$0], 3)\t// t: 1val1STRING_LITERAL_LONG2_with_LANGTAG;\nbreak;\ncase 264:\n // t: 1dot\n        var unesc = ShExUtil.unescapeText($$[$0].slice(1,-1), {});\n        this.$ = Parser._base === null || absoluteIRI.test(unesc) ? unesc : _resolveIRI(unesc)\n      \nbreak;\ncase 266:\n // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes\n        var namePos = $$[$0].indexOf(':');\n        this.$ = expandPrefix($$[$0].substr(0, namePos), yy) + ShExUtil.unescapeText($$[$0].substr(namePos + 1), pnameEscapeReplacements);\n      \nbreak;\ncase 267:\n // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes\n        this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy);\n      \nbreak;\ncase 269:\nthis.$ = $$[$0] // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;\nbreak;\ncase 272:\nthis.$ = $$[$0] // t: @_$[$0-1]dotSpecialize1, @_$[$0-1]dot3Specialize, @_$[$0-1]dotSpecialize3;\nbreak;\n}\n},\ntable: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),o($V1,$V2,{6:4,8:5,14:6,15:7,16:8,17:9,9:10,10:14,11:15,24:16,25:17,30:18,32:20,31:21,7:[2,10],18:[1,11],20:[1,12],23:[1,13],26:[1,19],36:$V3,198:$V4}),{7:[1,24]},o($V0,[2,4]),{7:[2,11]},o($V0,$V5),o($V0,$V6),o($V0,$V7),o($V8,[2,7],{12:25}),{19:[1,26]},{21:[1,27]},{19:$V9,21:$Va,22:28,219:30,220:$Vb},o($V8,[2,5]),o($V8,[2,6]),o($V8,$Vc),o($V8,$Vd),o($V8,[2,21],{31:33,198:$V4}),{27:[1,34]},{19:$Ve,21:$Vf,22:36,33:35,205:37,219:39,220:$Vg,221:$Vh},o($V0,[2,22]),o($V1,[2,28]),{19:$Vi,21:$Vj,22:43,219:45,220:$Vk},{1:[2,1]},o($V1,$V2,{13:48,8:49,10:50,15:51,16:52,17:53,24:54,25:55,32:60,7:[2,9],18:[1,56],20:[1,57],23:[1,58],26:[1,59],36:$V3}),o($V0,$Vl),{19:$V9,21:$Va,22:61,219:30,220:$Vb},o($V0,$Vm),o($V0,$Vn),o($V0,$Vo),o($V0,$Vp),o($V0,$Vq),o($V0,[2,23]),o($Vr,$Vs,{28:62,54:63,40:64,43:$Vt}),o($Vu,$Vv,{34:66}),o($Vu,$Vw),o($Vu,$Vx),o($Vu,$Vn),o($Vu,$Vo),o($Vu,$Vy),o($Vu,$Vp),o($Vu,$Vq),{198:[1,69],199:67,200:[1,68]},o($Vz,$Vn),o($Vz,$Vo),o($Vz,$Vp),o($Vz,$Vq),o($V8,[2,8]),o($V8,[2,24]),o($V8,[2,25]),o($V8,$V5),o($V8,$V6),o($V8,$V7),o($V8,$Vc),o($V8,$Vd),{19:[1,70]},{21:[1,71]},{19:$VA,21:$VB,22:72,219:74,220:$VC},{27:[1,77]},{19:$Ve,21:$Vf,22:36,33:78,205:37,219:39,220:$Vg,221:$Vh},o($V0,$VD),o($VE,$VF,{29:79}),o($VG,$VH,{58:80}),o($VI,$VJ,{62:81,64:82,66:83,67:84,73:87,75:88,72:89,44:90,92:91,94:92,87:94,88:95,89:96,78:97,95:104,22:105,91:107,118:108,99:109,219:112,105:113,107:114,19:$VK,21:$VL,69:[1,85],71:[1,86],79:[1,98],80:[1,99],81:[1,100],85:$VM,96:$VN,97:$VO,98:$VP,101:$VQ,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:$V_,220:$V$}),o($Vr,$V01),o($V11,$Vs,{35:126,37:127,38:128,224:130,40:131,44:133,39:[1,129],43:[1,132],79:$V21,80:$V31,81:$V41,184:$V51,225:$V61}),o($V0,$V71),o($V0,$V81),o($V0,$V91),o($V8,$Vl),{19:$VA,21:$VB,22:139,219:74,220:$VC},o($V8,$Vm),o($V8,$Vn),o($V8,$Vo),o($V8,$Vp),o($V8,$Vq),o($Vr,$Vs,{28:140,54:141,40:142,43:$Vt}),o($Vu,$Vv,{34:143}),o($V8,$Va1,{50:144,51:$Vb1}),o($VE,$Vc1,{52:146,53:$Vd1}),o($VG,$Ve1),o($VG,$Vf1,{65:148,67:149,72:150,44:151,78:152,118:156,79:$Vg1,80:$Vh1,81:$Vi1,119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:157,64:158,73:159,92:160,94:161,95:165,99:166,96:$Vl1,97:$Vm1,98:$Vn1,101:$Vo1,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{38:168,40:169,44:171,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:172}),o($Vt1,$Vs1,{82:173}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:174}),o($Vr1,$Vz1,{99:109,95:175,101:$VQ,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:176}),o($VA1,$VB1,{86:177}),o($VA1,$VB1,{86:178}),o($Vt1,$VC1,{105:113,107:114,91:179,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:180}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,184],21:[1,188],22:182,33:181,205:183,219:185,220:[1,187],221:[1,186]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:189}),o($VN1,$VO1),{119:[1,190],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,199]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,201],106:200,108:[1,202],109:[1,203],110:204,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,209]},{100:[2,119]},{100:[2,120]},{100:[2,121]},o($VA1,$Vp),o($VA1,$Vq),o($VY1,[2,128]),o($VY1,[2,129]),o($VY1,[2,130]),o($VY1,[2,131]),{100:[2,132]},{100:[2,133]},o($V8,$VZ1),o($Vu,[2,30]),o($V8,$V_1),o($V8,$V$1),o($VI,$VJ,{67:210,72:211,44:212,78:213,118:217,79:[1,214],80:[1,215],81:[1,216]}),o($VI,$VJ,{73:87,75:88,92:91,94:92,87:94,88:95,89:96,78:97,95:104,22:105,91:107,118:108,99:109,219:112,105:113,107:114,41:218,64:219,66:220,72:221,19:$VK,21:$VL,69:[1,222],71:[1,223],85:$VM,96:$VN,97:$VO,98:$VP,101:$VQ,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:$V_,220:$V$}),o($V11,$V01,{44:224,79:$Vg1,80:$Vh1,81:$Vi1}),{45:225,48:226,49:227,50:228,51:$Vb1,52:229,53:$Vd1},o($V02,[2,273]),o($V02,[2,274]),o($V12,$VE1),o($V12,$VF1),{19:[1,233],21:[1,237],22:231,33:230,205:232,219:234,220:[1,236],221:[1,235]},o($V8,$VD),o($VE,$VF,{29:238}),o($VG,$VH,{58:239}),o($VI,$VJ,{62:240,64:241,66:242,67:243,73:246,75:247,72:248,44:249,92:250,94:251,87:253,88:254,89:255,78:256,95:263,22:264,91:266,118:267,99:268,219:271,105:272,107:273,19:$V22,21:$V32,69:[1,244],71:[1,245],79:[1,257],80:[1,258],81:[1,259],85:$V42,96:$V52,97:$V62,98:$V72,101:$V82,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:$V92,220:$Va2}),o($V11,$Vs,{37:127,224:130,35:276,38:277,40:279,44:281,39:[1,278],43:[1,280],79:$V21,80:$V31,81:$V41,184:$V51,225:$V61}),o($VE,$Vb2),o($Vr,$Vs,{28:282,54:283,40:284,43:$Vt}),o($VG,$Vc2),o($Vr,$Vs,{54:285,40:286,43:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:287}),o($VG,$VE1),o($VG,$VF1),{19:[1,291],21:[1,295],22:289,33:288,205:290,219:292,220:[1,294],221:[1,293]},{119:[1,296],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:297}),o($Vh2,$Vy1,{93:298}),o($Vt1,$Vz1,{99:166,95:299,101:$Vo1,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,300]},o($Vh2,$VT1),{70:[1,301]},o($VI,$VJ,{41:302,64:303,66:304,72:305,73:308,75:309,78:310,92:311,94:312,87:314,88:315,89:316,118:317,95:321,22:322,91:324,99:325,219:328,105:329,107:330,19:[1,327],21:[1,332],69:[1,306],71:[1,307],85:[1,313],96:[1,318],97:[1,319],98:[1,320],101:$Vi2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,323],220:[1,331]}),o($V11,$V01,{44:333,79:$Vj2,80:$Vk2,81:$Vl2}),{45:337,48:338,49:339,50:340,51:$Vm2,52:341,53:$Vn2},o($Vo2,$Vp2,{83:344,84:345,197:346,195:[1,347]}),o($Vq2,$Vp2,{83:348,84:349,197:350,195:$Vr2}),o($Vr1,$Vs2,{99:109,95:352,101:$VQ,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:353,95:354,91:355,99:356,105:358,107:359,101:$Vv2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:353,95:354,91:355,99:356,105:358,107:359,101:$Vv2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:353,95:354,91:355,99:356,105:358,107:359,101:$Vv2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:360,84:361,197:362,195:[1,363]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,364],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{120:396,126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,121:$VW2,148:$VX2,194:$VY2}),o($VI,[2,140]),o($VI,[2,136]),o($VI,[2,137]),o($VI,[2,138]),o($VI,$VJ,{67:409,72:410,44:411,78:412,118:416,79:[1,413],80:[1,414],81:[1,415]}),{19:$VZ2,21:$V_2,22:419,128:417,129:418,204:$V$2,219:422,220:$V03},o($V02,[2,270]),o($V02,[2,271]),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,425]},{111:$V63},{111:$V73},{111:$V83},{111:$V93},o($VN1,$Va3),o($Vu,[2,272]),o($Vu,$Vv1),o($Vu,$Vw1),o($Vb3,$Vs1,{82:426}),o($Vu,$VE1),o($Vu,$VF1),{19:[1,430],21:[1,434],22:428,33:427,205:429,219:431,220:[1,433],221:[1,432]},{119:[1,435],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V8,$Vc3,{48:226,49:227,50:228,52:229,42:436,45:437,51:$Vb1,53:$Vd1}),o($VG,$Vf1,{67:149,72:150,44:151,78:152,118:156,65:438,79:$Vg1,80:$Vh1,81:$Vi1,119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vd3),o($VG,$Vk1,{64:158,73:159,92:160,94:161,95:165,99:166,68:439,96:$Vl1,97:$Vm1,98:$Vn1,101:$Vo1,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:440,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Ve3),o($V8,$Vc3,{48:226,49:227,50:228,52:229,45:437,42:441,51:$Vb1,53:$Vd1}),o($V8,$Vf3),o($V8,$Vg3,{50:442,51:$Vb1}),o($VE,$VF,{29:443,52:444,53:$Vd1}),o($VE,$Vh3),o($VG,$Vi3),o($V12,$VA2),o($V12,$Vw),o($V12,$Vx),o($V12,$Vn),o($V12,$Vo),o($V12,$Vy),o($V12,$Vp),o($V12,$Vq),o($V8,$Va1,{50:445,51:$Vj3}),o($VE,$Vc1,{52:447,53:$Vk3}),o($VG,$Ve1),o($VG,$Vf1,{65:449,67:450,72:451,44:452,78:453,118:457,79:$Vl3,80:$Vm3,81:$Vn3,119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:458,64:459,73:460,92:461,94:462,95:466,99:467,96:$Vo3,97:$Vp3,98:$Vq3,101:$Vr3,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:469,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:470}),o($Vt1,$Vs1,{82:471}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:472}),o($Vr1,$Vz1,{99:268,95:473,101:$V82,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:474}),o($VA1,$VB1,{86:475}),o($VA1,$VB1,{86:476}),o($Vt1,$VC1,{105:272,107:273,91:477,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:478}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,482],21:[1,486],22:480,33:479,205:481,219:483,220:[1,485],221:[1,484]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:487}),o($VN1,$VO1),{119:[1,488],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,489]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,491],106:490,108:[1,492],109:[1,493],110:494,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,495]},o($VA1,$Vp),o($VA1,$Vq),o($V8,$VZ1),o($V8,$V_1),o($V8,$V$1),o($VI,$VJ,{73:246,75:247,92:250,94:251,87:253,88:254,89:255,78:256,95:263,22:264,91:266,118:267,99:268,219:271,105:272,107:273,41:496,64:497,66:498,72:499,19:$V22,21:$V32,69:[1,500],71:[1,501],85:$V42,96:$V52,97:$V62,98:$V72,101:$V82,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:$V92,220:$Va2}),o($V11,$V01,{44:502,79:$Vl3,80:$Vm3,81:$Vn3}),{45:503,48:504,49:505,50:506,51:$Vj3,52:507,53:$Vk3},o($VE,$Vs3),o($VG,$VH,{58:508}),o($VI,$VJ,{62:509,64:510,66:511,67:512,73:515,75:516,72:517,44:518,92:519,94:520,87:522,88:523,89:524,78:525,95:532,22:533,91:535,118:536,99:537,219:540,105:541,107:542,19:[1,539],21:[1,544],69:[1,513],71:[1,514],79:[1,526],80:[1,527],81:[1,528],85:[1,521],96:[1,529],97:[1,530],98:[1,531],101:$Vt3,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,534],220:[1,543]}),o($VG,$Vu3),o($VI,$VJ,{62:545,64:546,66:547,67:548,73:551,75:552,72:553,44:554,92:555,94:556,87:558,88:559,89:560,78:561,95:568,22:569,91:571,118:572,99:573,219:576,105:577,107:578,19:[1,575],21:[1,580],69:[1,549],71:[1,550],79:[1,562],80:[1,563],81:[1,564],85:[1,557],96:[1,565],97:[1,566],98:[1,567],101:$Vv3,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,570],220:[1,579]}),o($Vq2,$Vp2,{84:349,197:350,83:581,195:$Vr2}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:582,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:349,197:350,83:583,195:$Vr2}),o($Vt1,$Vs2,{99:166,95:584,101:$Vo1,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),{42:585,45:586,48:338,49:339,50:340,51:$Vm2,52:341,53:$Vn2,70:$Vc3},o($VI,$VJ,{65:587,67:588,72:589,44:590,78:591,118:592,51:$Vf1,53:$Vf1,70:$Vf1,79:$Vj2,80:$Vk2,81:$Vl2}),o($Vx3,$Vd3),o($Vx3,$Vk1,{68:593,64:594,73:595,92:596,94:597,95:601,99:602,96:[1,598],97:[1,599],98:[1,600],101:$Vy3,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:604,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vx3,$Ve3),o($Vz3,$Vs1,{82:605}),o($VA3,$Vs1,{82:606}),o($VB3,$Vs1,{82:607}),o($VC3,$Vy1,{93:608}),o($Vz3,$Vz1,{99:325,95:609,101:$Vi2,102:$VR,103:$VS,104:$VT}),o($VD3,$VB1,{86:610}),o($VD3,$VB1,{86:611}),o($VD3,$VB1,{86:612}),o($VA3,$VC1,{105:329,107:330,91:613,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),{119:[1,614],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VC3,$VG1),o($VC3,$VH1),o($VC3,$VI1),o($VC3,$VJ1),o($VD3,$VK1),o($VL1,$VM1,{167:615}),o($VE3,$VO1),{100:[1,616]},o($VC3,$VT1),o($VD3,$Vn),o($VD3,$Vo),{100:[1,618],106:617,108:[1,619],109:[1,620],110:621,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,622]},o($VD3,$Vp),o($VD3,$Vq),{42:623,45:586,48:338,49:339,50:340,51:$Vm2,52:341,53:$Vn2,70:$Vc3},o($Vx3,$VE1),o($Vx3,$VF1),{19:[1,627],21:[1,631],22:625,33:624,205:626,219:628,220:[1,630],221:[1,629]},{70:$Vf3},{50:632,51:$Vm2,70:$Vg3},o($VF3,$VF,{29:633,52:634,53:$Vn2}),o($VF3,$Vh3),o($Vx3,$Vi3),o($Vr,$Vs,{28:635,54:636,40:637,43:$Vt}),o($Vr,$Vs,{54:638,40:639,43:$Vt}),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:640,198:[1,641]}),{19:$VK3,21:$VL3,22:643,129:642,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:649,198:[1,650]}),{19:$VK3,21:$VL3,22:643,129:651,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,652]},o($VA1,$VT1),{100:[1,654],106:653,108:[1,655],109:[1,656],110:657,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,658]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:659,198:[1,660]}),{19:$VK3,21:$VL3,22:643,129:661,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),o($VL1,[2,188]),o($VL1,[2,189]),o($VL1,[2,190]),o($VL1,[2,191]),{173:662,174:663,175:666,176:664,177:667,178:665,179:668,184:[1,669]},o($VL1,[2,206],{180:670,182:671,183:[1,672]}),o($VL1,[2,215],{187:673,189:674,183:[1,675]}),o($VL1,[2,223],{191:676,192:677,183:$VV3}),{183:$VV3,192:679},o($VW3,$Vn),o($VW3,$Vo),o($VW3,$VX3),o($VW3,$VY3),o($VW3,$VZ3),o($VW3,$Vp),o($VW3,$Vq),o($VW3,$V_3),o($VW3,$V$3,{207:680,208:681,111:[1,682]}),o($VW3,$V04),o($VW3,$V14),o($VW3,$V24),o($VW3,$V34),o($VW3,$V44),o($VW3,$V54),o($VW3,$V64),o($VW3,$V74),o($VW3,$V84),o($V94,$V63),o($V94,$V73),o($V94,$V83),o($V94,$V93),{121:[1,683]},{121:[2,142]},{121:$Va4},{121:$Vb4,133:684,134:685,135:$Vc4},{121:$Vd4},o($Ve4,$Vf4),o($Ve4,$Vg4),o($Ve4,$Vh4,{139:687,142:688,143:691,140:$Vi4,141:$Vj4}),o($Vk4,$Vl4,{145:692,150:693,151:694,159:695,160:697,69:[1,696],165:$Vm4}),o($Vn4,$Vo4),o($VU2,[2,168]),{19:[1,702],21:[1,706],22:700,149:699,205:701,219:703,220:[1,705],221:[1,704]},{19:[1,710],21:[1,714],22:708,149:707,205:709,219:711,220:[1,713],221:[1,712]},o($VI,[2,269]),o($VI,$Vv1),o($VI,$Vw1),o($Vp4,$Vs1,{82:715}),o($VI,$VE1),o($VI,$VF1),{19:[1,719],21:[1,723],22:717,33:716,205:718,219:720,220:[1,722],221:[1,721]},{119:[1,724],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VI,[2,143],{22:419,219:422,129:725,19:$VZ2,21:$V_2,204:$V$2,220:$V03}),o($Vq4,[2,144]),o($Vq4,$Vr4),o($Vq4,$Vs4),o($Vq4,$Vn),o($Vq4,$Vo),o($Vq4,$Vp),o($Vq4,$Vq),{19:[1,728],21:[1,731],22:727,87:726,219:729,220:[1,730]},o($Vt4,$Vp2,{83:732,84:733,197:734,195:[1,735]}),o($Vu,$VA2),o($Vu,$Vw),o($Vu,$Vx),o($Vu,$Vn),o($Vu,$Vo),o($Vu,$Vy),o($Vu,$Vp),o($Vu,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:736,121:$VW2,148:$VX2,194:$VY2}),o($V8,$Vu4),o($V8,$Vv4),o($VG,$Vw4),o($VG,$Vx4),{70:[1,737]},o($V8,$Vy4),o($VE,$Vz4),o($V8,$VA4,{50:144,51:$Vb1}),o($VG,$VB4),o($VE,$Vb2),o($Vr,$Vs,{28:738,54:739,40:740,43:$Vt}),o($VG,$Vc2),o($Vr,$Vs,{54:741,40:742,43:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:743}),o($VG,$VE1),o($VG,$VF1),{19:[1,747],21:[1,751],22:745,33:744,205:746,219:748,220:[1,750],221:[1,749]},{119:[1,752],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:753}),o($Vh2,$Vy1,{93:754}),o($Vt1,$Vz1,{99:467,95:755,101:$Vr3,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,756]},o($Vh2,$VT1),{70:[1,757]},o($Vo2,$Vp2,{83:758,84:759,197:760,195:[1,761]}),o($Vq2,$Vp2,{83:762,84:763,197:764,195:$VC4}),o($Vr1,$Vs2,{99:268,95:766,101:$V82,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:767,95:768,91:769,99:770,105:772,107:773,101:$VD4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:767,95:768,91:769,99:770,105:772,107:773,101:$VD4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:767,95:768,91:769,99:770,105:772,107:773,101:$VD4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:774,84:775,197:776,195:[1,777]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,778],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:779,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,780]},o($VN1,$Va3),o($V8,$Vc3,{48:504,49:505,50:506,52:507,42:781,45:782,51:$Vj3,53:$Vk3}),o($VG,$Vf1,{67:450,72:451,44:452,78:453,118:457,65:783,79:$Vl3,80:$Vm3,81:$Vn3,119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vd3),o($VG,$Vk1,{64:459,73:460,92:461,94:462,95:466,99:467,68:784,96:$Vo3,97:$Vp3,98:$Vq3,101:$Vr3,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:785,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Ve3),o($V8,$Vc3,{48:504,49:505,50:506,52:507,45:782,42:786,51:$Vj3,53:$Vk3}),o($V8,$Vf3),o($V8,$Vg3,{50:787,51:$Vj3}),o($VE,$VF,{29:788,52:789,53:$Vk3}),o($VE,$Vh3),o($VG,$Vi3),o($VE,$Vc1,{52:790,53:[1,791]}),o($VG,$Ve1),o($VG,$Vf1,{65:792,67:793,72:794,44:795,78:796,118:800,79:[1,797],80:[1,798],81:[1,799],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:801,64:802,73:803,92:804,94:805,95:809,99:810,96:[1,806],97:[1,807],98:[1,808],101:$VE4,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:812,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:813}),o($Vt1,$Vs1,{82:814}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:815}),o($Vr1,$Vz1,{99:537,95:816,101:$Vt3,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:817}),o($VA1,$VB1,{86:818}),o($VA1,$VB1,{86:819}),o($Vt1,$VC1,{105:541,107:542,91:820,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:821}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,825],21:[1,829],22:823,33:822,205:824,219:826,220:[1,828],221:[1,827]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:830}),o($VN1,$VO1),{119:[1,831],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,832]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,834],106:833,108:[1,835],109:[1,836],110:837,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,838]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$Ve1),o($VG,$Vf1,{65:839,67:840,72:841,44:842,78:843,118:847,79:[1,844],80:[1,845],81:[1,846],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:848,64:849,73:850,92:851,94:852,95:856,99:857,96:[1,853],97:[1,854],98:[1,855],101:$VF4,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:859,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:860}),o($Vt1,$Vs1,{82:861}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:862}),o($Vr1,$Vz1,{99:573,95:863,101:$Vv3,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:864}),o($VA1,$VB1,{86:865}),o($VA1,$VB1,{86:866}),o($Vt1,$VC1,{105:577,107:578,91:867,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:868}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,872],21:[1,876],22:870,33:869,205:871,219:873,220:[1,875],221:[1,874]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:877}),o($VN1,$VO1),{119:[1,878],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,879]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,881],106:880,108:[1,882],109:[1,883],110:884,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,885]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VT3),{121:[1,886]},o($VG,$VH3),o($Vh2,$VP3),{70:$Vu4},{70:$Vv4},o($Vx3,$Vw4),o($Vx3,$Ve2),o($Vx3,$Vv1),o($Vx3,$Vw1),o($VA3,$Vs1,{82:887}),{119:[1,888],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vx3,$Vx4),o($Vx3,$Vg2),o($VA3,$Vs1,{82:889}),o($VG4,$Vy1,{93:890}),o($VA3,$Vz1,{99:602,95:891,101:$Vy3,102:$VR,103:$VS,104:$VT}),o($VG4,$VG1),o($VG4,$VH1),o($VG4,$VI1),o($VG4,$VJ1),{100:[1,892]},o($VG4,$VT1),{70:[1,893]},o($VH4,$Vp2,{83:894,84:895,197:896,195:[1,897]}),o($VI4,$Vp2,{83:898,84:899,197:900,195:$VJ4}),o($VK4,$Vp2,{83:902,84:903,197:904,195:[1,905]}),o($Vz3,$Vs2,{99:325,95:906,101:$Vi2,102:$VR,103:$VS,104:$VT}),o($VC3,$Vt2),o($VA3,$Vu2,{90:907,95:908,91:909,99:910,105:912,107:913,101:$VL4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vw2,{90:907,95:908,91:909,99:910,105:912,107:913,101:$VL4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vx2,{90:907,95:908,91:909,99:910,105:912,107:913,101:$VL4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE3,$Vy2),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:914,121:$VW2,148:$VX2,194:$VY2}),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,915],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VC3,$V13),o($VE3,$V23),o($VE3,$V33),o($VE3,$V43),o($VE3,$V53),{111:[1,916]},o($VE3,$Va3),{70:$Vy4},o($Vx3,$VA2),o($Vx3,$Vw),o($Vx3,$Vx),o($Vx3,$Vn),o($Vx3,$Vo),o($Vx3,$Vy),o($Vx3,$Vp),o($Vx3,$Vq),o($VF3,$Vz4),{50:917,51:$Vm2,70:$VA4},o($Vx3,$VB4),o($VF3,$Vs3),o($Vx3,$VH,{58:918}),o($VI,$VJ,{62:919,64:920,66:921,67:922,73:925,75:926,72:927,44:928,92:929,94:930,87:932,88:933,89:934,78:935,95:942,22:943,91:945,118:946,99:947,219:950,105:951,107:952,19:[1,949],21:[1,954],69:[1,923],71:[1,924],79:[1,936],80:[1,937],81:[1,938],85:[1,931],96:[1,939],97:[1,940],98:[1,941],101:$VM4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,944],220:[1,953]}),o($Vx3,$Vu3),o($VI,$VJ,{62:955,64:956,66:957,67:958,73:961,75:962,72:963,44:964,92:965,94:966,87:968,88:969,89:970,78:971,95:978,22:979,91:981,118:982,99:983,219:986,105:987,107:988,19:[1,985],21:[1,990],69:[1,959],71:[1,960],79:[1,972],80:[1,973],81:[1,974],85:[1,967],96:[1,975],97:[1,976],98:[1,977],101:$VN4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,980],220:[1,989]}),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:991,219:45,220:$Vk},{19:$VP4,21:$VQ4,22:993,100:[1,1004],108:[1,1005],109:[1,1006],110:1003,186:994,196:992,201:997,202:998,203:999,206:1002,209:[1,1007],210:[1,1008],211:[1,1013],212:[1,1014],213:[1,1015],214:[1,1016],215:[1,1009],216:[1,1010],217:[1,1011],218:[1,1012],219:996,220:$VR4},o($VS4,$Vr4),o($VS4,$Vs4),o($VS4,$Vn),o($VS4,$Vo),o($VS4,$Vp),o($VS4,$Vq),o($Vq2,$VO4),{19:$Vi,21:$Vj,22:1017,219:45,220:$Vk},{19:$VT4,21:$VU4,22:1019,100:[1,1030],108:[1,1031],109:[1,1032],110:1029,186:1020,196:1018,201:1023,202:1024,203:1025,206:1028,209:[1,1033],210:[1,1034],211:[1,1039],212:[1,1040],213:[1,1041],214:[1,1042],215:[1,1035],216:[1,1036],217:[1,1037],218:[1,1038],219:1022,220:$VV4},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,1043]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:1044,219:45,220:$Vk},{19:$VW4,21:$VX4,22:1046,100:[1,1057],108:[1,1058],109:[1,1059],110:1056,186:1047,196:1045,201:1050,202:1051,203:1052,206:1055,209:[1,1060],210:[1,1061],211:[1,1066],212:[1,1067],213:[1,1068],214:[1,1069],215:[1,1062],216:[1,1063],217:[1,1064],218:[1,1065],219:1049,220:$VY4},o($VL1,[2,192]),o($VL1,[2,199],{175:1070,184:$VZ4}),o($VL1,[2,200],{177:1072,184:$V_4}),o($VL1,[2,201],{179:1074,184:$V$4}),o($V05,[2,193]),o($V05,[2,195]),o($V05,[2,197]),{19:$V15,21:$V25,22:1076,100:$V35,108:$V45,109:$V55,110:1087,186:1077,190:$V65,201:1081,202:1082,203:1083,206:1086,209:$V75,210:$V85,211:$V95,212:$Va5,213:$Vb5,214:$Vc5,215:$Vd5,216:$Ve5,217:$Vf5,218:$Vg5,219:1080,220:$Vh5},o($VL1,[2,202]),o($VL1,[2,207]),o($V05,[2,203],{181:1101}),o($VL1,[2,211]),o($VL1,[2,216]),o($V05,[2,212],{188:1102}),o($VL1,[2,218]),o($VL1,[2,224]),o($V05,[2,220],{193:1103}),o($VL1,[2,219]),o($VW3,$Vi5),o($VW3,$Vj5),{19:$VB2,21:$VC2,22:1105,87:1104,219:375,220:$VT2},o($VD1,$Vk5),{121:$Vl5,134:1106,135:$Vc4},o($Ve4,$Vm5),o($VU2,$VV2,{136:401,137:402,138:403,144:404,146:405,147:406,131:1107,148:$VX2,194:$VY2}),o($Ve4,$Vn5),o($Ve4,$Vh4,{139:1108,143:1109,140:$Vi4,141:$Vj4}),o($VU2,$VV2,{144:404,146:405,147:406,138:1110,121:$Vo5,135:$Vo5,148:$VX2,194:$VY2}),o($VU2,$VV2,{144:404,146:405,147:406,138:1111,121:$Vp5,135:$Vp5,148:$VX2,194:$VY2}),o($Vn4,$Vq5),o($Vn4,$Vr5),o($Vn4,$Vs5),o($Vn4,$Vt5),{19:$Vu5,21:$Vv5,22:1113,129:1112,204:$Vw5,219:1116,220:$Vx5},o($VU2,$VV2,{147:406,126:1119,130:1120,131:1121,132:1122,136:1123,137:1124,138:1125,144:1126,146:1127,148:$VX2,194:$Vy5}),o($Vk4,[2,180]),o($Vk4,[2,185]),o($Vn4,$Vz5),o($Vn4,$VA5),o($Vn4,$VB5),o($Vn4,$Vn),o($Vn4,$Vo),o($Vn4,$Vy),o($Vn4,$Vp),o($Vn4,$Vq),o($VU2,[2,166]),o($VU2,$VA5),o($VU2,$VB5),o($VU2,$Vn),o($VU2,$Vo),o($VU2,$Vy),o($VU2,$Vp),o($VU2,$Vq),o($VC5,$Vp2,{83:1129,84:1130,197:1131,195:[1,1132]}),o($VI,$VA2),o($VI,$Vw),o($VI,$Vx),o($VI,$Vn),o($VI,$Vo),o($VI,$Vy),o($VI,$Vp),o($VI,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1133,121:$VW2,148:$VX2,194:$VY2}),o($Vq4,[2,145]),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vu,$VT3),o($Vb3,$VI3),o($Vu,$VJ3,{31:1134,198:[1,1135]}),{19:$VK3,21:$VL3,22:643,129:1136,204:$VM3,219:646,220:$VN3},{121:[1,1137]},o($VG,$VE5),o($VE,$Vs3),o($VG,$VH,{58:1138}),o($VI,$VJ,{62:1139,64:1140,66:1141,67:1142,73:1145,75:1146,72:1147,44:1148,92:1149,94:1150,87:1152,88:1153,89:1154,78:1155,95:1162,22:1163,91:1165,118:1166,99:1167,219:1170,105:1171,107:1172,19:[1,1169],21:[1,1174],69:[1,1143],71:[1,1144],79:[1,1156],80:[1,1157],81:[1,1158],85:[1,1151],96:[1,1159],97:[1,1160],98:[1,1161],101:$VF5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,1164],220:[1,1173]}),o($VG,$Vu3),o($VI,$VJ,{62:1175,64:1176,66:1177,67:1178,73:1181,75:1182,72:1183,44:1184,92:1185,94:1186,87:1188,88:1189,89:1190,78:1191,95:1198,22:1199,91:1201,118:1202,99:1203,219:1206,105:1207,107:1208,19:[1,1205],21:[1,1210],69:[1,1179],71:[1,1180],79:[1,1192],80:[1,1193],81:[1,1194],85:[1,1187],96:[1,1195],97:[1,1196],98:[1,1197],101:$VG5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,1200],220:[1,1209]}),o($Vq2,$Vp2,{84:763,197:764,83:1211,195:$VC4}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1212,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:763,197:764,83:1213,195:$VC4}),o($Vt1,$Vs2,{99:467,95:1214,101:$Vr3,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:1215,198:[1,1216]}),{19:$VK3,21:$VL3,22:643,129:1217,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:1218,198:[1,1219]}),{19:$VK3,21:$VL3,22:643,129:1220,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,1221]},o($VA1,$VT1),{100:[1,1223],106:1222,108:[1,1224],109:[1,1225],110:1226,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1227]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:1228,198:[1,1229]}),{19:$VK3,21:$VL3,22:643,129:1230,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,1231]},{19:[1,1234],21:[1,1237],22:1233,87:1232,219:1235,220:[1,1236]},o($V8,$Vu4),o($V8,$Vv4),o($VG,$Vw4),o($VG,$Vx4),{70:[1,1238]},o($V8,$Vy4),o($VE,$Vz4),o($V8,$VA4,{50:445,51:$Vj3}),o($VG,$VB4),o($VG,$Vc2),o($Vr,$Vs,{54:1239,40:1240,43:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:1241}),o($VG,$VE1),o($VG,$VF1),{19:[1,1245],21:[1,1249],22:1243,33:1242,205:1244,219:1246,220:[1,1248],221:[1,1247]},{119:[1,1250],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:1251}),o($Vh2,$Vy1,{93:1252}),o($Vt1,$Vz1,{99:810,95:1253,101:$VE4,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,1254]},o($Vh2,$VT1),{70:[1,1255]},o($Vo2,$Vp2,{83:1256,84:1257,197:1258,195:[1,1259]}),o($Vq2,$Vp2,{83:1260,84:1261,197:1262,195:$VH5}),o($Vr1,$Vs2,{99:537,95:1264,101:$Vt3,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:1265,95:1266,91:1267,99:1268,105:1270,107:1271,101:$VI5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:1265,95:1266,91:1267,99:1268,105:1270,107:1271,101:$VI5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:1265,95:1266,91:1267,99:1268,105:1270,107:1271,101:$VI5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:1272,84:1273,197:1274,195:[1,1275]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,1276],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1277,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,1278]},o($VN1,$Va3),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:1279}),o($VG,$VE1),o($VG,$VF1),{19:[1,1283],21:[1,1287],22:1281,33:1280,205:1282,219:1284,220:[1,1286],221:[1,1285]},{119:[1,1288],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:1289}),o($Vh2,$Vy1,{93:1290}),o($Vt1,$Vz1,{99:857,95:1291,101:$VF4,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,1292]},o($Vh2,$VT1),{70:[1,1293]},o($Vo2,$Vp2,{83:1294,84:1295,197:1296,195:[1,1297]}),o($Vq2,$Vp2,{83:1298,84:1299,197:1300,195:$VJ5}),o($Vr1,$Vs2,{99:573,95:1302,101:$Vv3,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:1303,95:1304,91:1305,99:1306,105:1308,107:1309,101:$VK5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:1303,95:1304,91:1305,99:1306,105:1308,107:1309,101:$VK5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:1303,95:1304,91:1305,99:1306,105:1308,107:1309,101:$VK5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:1310,84:1311,197:1312,195:[1,1313]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,1314],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1315,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,1316]},o($VN1,$Va3),o($Vt1,$Vk5),o($VI4,$Vp2,{84:899,197:900,83:1317,195:$VJ4}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1318,121:$VW2,148:$VX2,194:$VY2}),o($VI4,$Vp2,{84:899,197:900,83:1319,195:$VJ4}),o($VA3,$Vs2,{99:602,95:1320,101:$Vy3,102:$VR,103:$VS,104:$VT}),o($VG4,$Vt2),o($VG4,$V13),o($Vx3,$VE5),o($VL5,$VH3),o($Vz3,$VI3),o($VL5,$VJ3,{31:1321,198:[1,1322]}),{19:$VK3,21:$VL3,22:643,129:1323,204:$VM3,219:646,220:$VN3},o($Vx3,$VO3),o($VA3,$VI3),o($Vx3,$VJ3,{31:1324,198:[1,1325]}),{19:$VK3,21:$VL3,22:643,129:1326,204:$VM3,219:646,220:$VN3},o($VM5,$VT3),o($VB3,$VI3),o($VM5,$VJ3,{31:1327,198:[1,1328]}),{19:$VK3,21:$VL3,22:643,129:1329,204:$VM3,219:646,220:$VN3},o($VC3,$VP3),o($VD3,$VQ3),o($VD3,$VR3),o($VD3,$VS3),{100:[1,1330]},o($VD3,$VT1),{100:[1,1332],106:1331,108:[1,1333],109:[1,1334],110:1335,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1336]},{121:[1,1337]},o($VD3,$VU3),{19:[1,1340],21:[1,1343],22:1339,87:1338,219:1341,220:[1,1342]},o($VF3,$Vb2),o($VF3,$Vc1,{52:1344,53:[1,1345]}),o($Vx3,$Ve1),o($VI,$VJ,{65:1346,67:1347,72:1348,44:1349,78:1350,118:1354,51:$Vf1,53:$Vf1,70:$Vf1,79:[1,1351],80:[1,1352],81:[1,1353]}),o($Vx3,$Vj1),o($Vx3,$Vk1,{68:1355,64:1356,73:1357,92:1358,94:1359,95:1363,99:1364,96:[1,1360],97:[1,1361],98:[1,1362],101:$VN5,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:1366,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vx3,$Vq1),o($Vz3,$Vs1,{82:1367}),o($VA3,$Vs1,{82:1368}),o($VM5,$Vv1),o($VM5,$Vw1),o($VC3,$Vy1,{93:1369}),o($Vz3,$Vz1,{99:947,95:1370,101:$VM4,102:$VR,103:$VS,104:$VT}),o($VD3,$VB1,{86:1371}),o($VD3,$VB1,{86:1372}),o($VD3,$VB1,{86:1373}),o($VA3,$VC1,{105:951,107:952,91:1374,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB3,$Vs1,{82:1375}),o($VM5,$VE1),o($VM5,$VF1),{19:[1,1379],21:[1,1383],22:1377,33:1376,205:1378,219:1380,220:[1,1382],221:[1,1381]},o($VC3,$VG1),o($VC3,$VH1),o($VC3,$VI1),o($VC3,$VJ1),o($VD3,$VK1),o($VL1,$VM1,{167:1384}),o($VE3,$VO1),{119:[1,1385],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,1386]},o($VC3,$VT1),o($VD3,$Vn),o($VD3,$Vo),{100:[1,1388],106:1387,108:[1,1389],109:[1,1390],110:1391,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1392]},o($VD3,$Vp),o($VD3,$Vq),o($Vx3,$Ve1),o($VI,$VJ,{65:1393,67:1394,72:1395,44:1396,78:1397,118:1401,51:$Vf1,53:$Vf1,70:$Vf1,79:[1,1398],80:[1,1399],81:[1,1400]}),o($Vx3,$Vj1),o($Vx3,$Vk1,{68:1402,64:1403,73:1404,92:1405,94:1406,95:1410,99:1411,96:[1,1407],97:[1,1408],98:[1,1409],101:$VO5,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:1413,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vx3,$Vq1),o($Vz3,$Vs1,{82:1414}),o($VA3,$Vs1,{82:1415}),o($VM5,$Vv1),o($VM5,$Vw1),o($VC3,$Vy1,{93:1416}),o($Vz3,$Vz1,{99:983,95:1417,101:$VN4,102:$VR,103:$VS,104:$VT}),o($VD3,$VB1,{86:1418}),o($VD3,$VB1,{86:1419}),o($VD3,$VB1,{86:1420}),o($VA3,$VC1,{105:987,107:988,91:1421,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB3,$Vs1,{82:1422}),o($VM5,$VE1),o($VM5,$VF1),{19:[1,1426],21:[1,1430],22:1424,33:1423,205:1425,219:1427,220:[1,1429],221:[1,1428]},o($VC3,$VG1),o($VC3,$VH1),o($VC3,$VI1),o($VC3,$VJ1),o($VD3,$VK1),o($VL1,$VM1,{167:1431}),o($VE3,$VO1),{119:[1,1432],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,1433]},o($VC3,$VT1),o($VD3,$Vn),o($VD3,$Vo),{100:[1,1435],106:1434,108:[1,1436],109:[1,1437],110:1438,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1439]},o($VD3,$Vp),o($VD3,$Vq),{198:[1,1442],199:1440,200:[1,1441]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:1443,208:1444,111:[1,1445]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,1448],199:1446,200:[1,1447]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:1449,208:1450,111:[1,1451]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,1454],21:[1,1457],22:1453,87:1452,219:1455,220:[1,1456]},{198:[1,1460],199:1458,200:[1,1459]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:1461,208:1462,111:[1,1463]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($V05,[2,194]),{19:$V15,21:$V25,22:1076,219:1080,220:$Vh5},o($V05,[2,196]),{100:$V35,108:$V45,109:$V55,110:1087,186:1077,201:1081,202:1082,203:1083,206:1086,209:$V75,210:$V85,211:$V95,212:$Va5,213:$Vb5,214:$Vc5,215:$Vd5,216:$Ve5,217:$Vf5,218:$Vg5},o($V05,[2,198]),{190:$V65},o($V05,$VV5,{185:1464,183:$VW5}),o($V05,$VV5,{185:1466,183:$VW5}),o($V05,$VV5,{185:1467,183:$VW5}),o($VX5,$Vn),o($VX5,$Vo),o($VX5,$VX3),o($VX5,$VY3),o($VX5,$VZ3),o($VX5,$Vp),o($VX5,$Vq),o($VX5,$V_3),o($VX5,$V$3,{207:1468,208:1469,111:[1,1470]}),o($VX5,$V04),o($VX5,$V14),o($VX5,$V24),o($VX5,$V34),o($VX5,$V44),o($VX5,$V54),o($VX5,$V64),o($VX5,$V74),o($VX5,$V84),o($VY5,$V63),o($VY5,$V73),o($VY5,$V83),o($VY5,$V93),o($VL1,[2,205],{175:1471,184:$VZ4}),o($VL1,[2,214],{177:1472,184:$V_4}),o($VL1,[2,222],{179:1473,184:$V$4}),o($VW3,$VZ5),o($VW3,$VK1),o($Ve4,$V_5),o($Ve4,$V$5),o($Ve4,$V06),o($Vn4,$V16),o($Vn4,$V26),o($Vn4,$V36),o($Vr,$Vs,{46:1474,47:1475,55:1476,59:1477,40:1478,43:$Vt}),o($V46,$Vr4),o($V46,$Vs4),o($V46,$Vn),o($V46,$Vo),o($V46,$Vp),o($V46,$Vq),{70:[1,1479]},{70:$Va4},{70:$Vb4,133:1480,134:1481,135:$V56},{70:$Vd4},o($V66,$Vf4),o($V66,$Vg4),o($V66,$Vh4,{139:1483,142:1484,143:1487,140:$V76,141:$V86}),o($Vk4,$Vl4,{160:697,145:1488,150:1489,151:1490,159:1491,69:[1,1492],165:$Vm4}),o($V96,$Vo4),{19:[1,1496],21:[1,1500],22:1494,149:1493,205:1495,219:1497,220:[1,1499],221:[1,1498]},o($VI,$VT3),o($Vp4,$VI3),o($VI,$VJ3,{31:1501,198:[1,1502]}),{19:$VK3,21:$VL3,22:643,129:1503,204:$VM3,219:646,220:$VN3},{121:[1,1504]},o($Vt4,$VO4),{19:$Vi,21:$Vj,22:1505,219:45,220:$Vk},{19:$Va6,21:$Vb6,22:1507,100:[1,1518],108:[1,1519],109:[1,1520],110:1517,186:1508,196:1506,201:1511,202:1512,203:1513,206:1516,209:[1,1521],210:[1,1522],211:[1,1527],212:[1,1528],213:[1,1529],214:[1,1530],215:[1,1523],216:[1,1524],217:[1,1525],218:[1,1526],219:1510,220:$Vc6},o($Vb3,$Vk5),o($VE,$Vc1,{52:1531,53:[1,1532]}),o($VG,$Ve1),o($VG,$Vf1,{65:1533,67:1534,72:1535,44:1536,78:1537,118:1541,79:[1,1538],80:[1,1539],81:[1,1540],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:1542,64:1543,73:1544,92:1545,94:1546,95:1550,99:1551,96:[1,1547],97:[1,1548],98:[1,1549],101:$Vd6,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:1553,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:1554}),o($Vt1,$Vs1,{82:1555}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:1556}),o($Vr1,$Vz1,{99:1167,95:1557,101:$VF5,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:1558}),o($VA1,$VB1,{86:1559}),o($VA1,$VB1,{86:1560}),o($Vt1,$VC1,{105:1171,107:1172,91:1561,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:1562}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,1566],21:[1,1570],22:1564,33:1563,205:1565,219:1567,220:[1,1569],221:[1,1568]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:1571}),o($VN1,$VO1),{119:[1,1572],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,1573]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,1575],106:1574,108:[1,1576],109:[1,1577],110:1578,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1579]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$Ve1),o($VG,$Vf1,{65:1580,67:1581,72:1582,44:1583,78:1584,118:1588,79:[1,1585],80:[1,1586],81:[1,1587],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:1589,64:1590,73:1591,92:1592,94:1593,95:1597,99:1598,96:[1,1594],97:[1,1595],98:[1,1596],101:$Ve6,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:1600,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:1601}),o($Vt1,$Vs1,{82:1602}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:1603}),o($Vr1,$Vz1,{99:1203,95:1604,101:$VG5,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:1605}),o($VA1,$VB1,{86:1606}),o($VA1,$VB1,{86:1607}),o($Vt1,$VC1,{105:1207,107:1208,91:1608,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:1609}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,1613],21:[1,1617],22:1611,33:1610,205:1612,219:1614,220:[1,1616],221:[1,1615]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:1618}),o($VN1,$VO1),{119:[1,1619],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,1620]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,1622],106:1621,108:[1,1623],109:[1,1624],110:1625,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1626]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VT3),{121:[1,1627]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:1628,219:45,220:$Vk},{19:$Vf6,21:$Vg6,22:1630,100:[1,1641],108:[1,1642],109:[1,1643],110:1640,186:1631,196:1629,201:1634,202:1635,203:1636,206:1639,209:[1,1644],210:[1,1645],211:[1,1650],212:[1,1651],213:[1,1652],214:[1,1653],215:[1,1646],216:[1,1647],217:[1,1648],218:[1,1649],219:1633,220:$Vh6},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:1654,219:45,220:$Vk},{19:$Vi6,21:$Vj6,22:1656,100:[1,1667],108:[1,1668],109:[1,1669],110:1666,186:1657,196:1655,201:1660,202:1661,203:1662,206:1665,209:[1,1670],210:[1,1671],211:[1,1676],212:[1,1677],213:[1,1678],214:[1,1679],215:[1,1672],216:[1,1673],217:[1,1674],218:[1,1675],219:1659,220:$Vk6},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,1680]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:1681,219:45,220:$Vk},{19:$Vl6,21:$Vm6,22:1683,100:[1,1694],108:[1,1695],109:[1,1696],110:1693,186:1684,196:1682,201:1687,202:1688,203:1689,206:1692,209:[1,1697],210:[1,1698],211:[1,1703],212:[1,1704],213:[1,1705],214:[1,1706],215:[1,1699],216:[1,1700],217:[1,1701],218:[1,1702],219:1686,220:$Vn6},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VG,$VE5),o($VG,$Vu3),o($VI,$VJ,{62:1707,64:1708,66:1709,67:1710,73:1713,75:1714,72:1715,44:1716,92:1717,94:1718,87:1720,88:1721,89:1722,78:1723,95:1730,22:1731,91:1733,118:1734,99:1735,219:1738,105:1739,107:1740,19:[1,1737],21:[1,1742],69:[1,1711],71:[1,1712],79:[1,1724],80:[1,1725],81:[1,1726],85:[1,1719],96:[1,1727],97:[1,1728],98:[1,1729],101:$Vo6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,1732],220:[1,1741]}),o($Vq2,$Vp2,{84:1261,197:1262,83:1743,195:$VH5}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1744,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:1261,197:1262,83:1745,195:$VH5}),o($Vt1,$Vs2,{99:810,95:1746,101:$VE4,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:1747,198:[1,1748]}),{19:$VK3,21:$VL3,22:643,129:1749,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:1750,198:[1,1751]}),{19:$VK3,21:$VL3,22:643,129:1752,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,1753]},o($VA1,$VT1),{100:[1,1755],106:1754,108:[1,1756],109:[1,1757],110:1758,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1759]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:1760,198:[1,1761]}),{19:$VK3,21:$VL3,22:643,129:1762,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,1763]},{19:[1,1766],21:[1,1769],22:1765,87:1764,219:1767,220:[1,1768]},o($Vq2,$Vp2,{84:1299,197:1300,83:1770,195:$VJ5}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1771,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:1299,197:1300,83:1772,195:$VJ5}),o($Vt1,$Vs2,{99:857,95:1773,101:$VF4,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:1774,198:[1,1775]}),{19:$VK3,21:$VL3,22:643,129:1776,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:1777,198:[1,1778]}),{19:$VK3,21:$VL3,22:643,129:1779,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,1780]},o($VA1,$VT1),{100:[1,1782],106:1781,108:[1,1783],109:[1,1784],110:1785,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,1786]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:1787,198:[1,1788]}),{19:$VK3,21:$VL3,22:643,129:1789,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,1790]},{19:[1,1793],21:[1,1796],22:1792,87:1791,219:1794,220:[1,1795]},o($Vx3,$VT3),{121:[1,1797]},o($Vx3,$VH3),o($VG4,$VP3),o($VH4,$VO4),{19:$Vi,21:$Vj,22:1798,219:45,220:$Vk},{19:$Vp6,21:$Vq6,22:1800,100:[1,1811],108:[1,1812],109:[1,1813],110:1810,186:1801,196:1799,201:1804,202:1805,203:1806,206:1809,209:[1,1814],210:[1,1815],211:[1,1820],212:[1,1821],213:[1,1822],214:[1,1823],215:[1,1816],216:[1,1817],217:[1,1818],218:[1,1819],219:1803,220:$Vr6},o($VI4,$VO4),{19:$Vi,21:$Vj,22:1824,219:45,220:$Vk},{19:$Vs6,21:$Vt6,22:1826,100:[1,1837],108:[1,1838],109:[1,1839],110:1836,186:1827,196:1825,201:1830,202:1831,203:1832,206:1835,209:[1,1840],210:[1,1841],211:[1,1846],212:[1,1847],213:[1,1848],214:[1,1849],215:[1,1842],216:[1,1843],217:[1,1844],218:[1,1845],219:1829,220:$Vu6},o($VK4,$VO4),{19:$Vi,21:$Vj,22:1850,219:45,220:$Vk},{19:$Vv6,21:$Vw6,22:1852,100:[1,1863],108:[1,1864],109:[1,1865],110:1862,186:1853,196:1851,201:1856,202:1857,203:1858,206:1861,209:[1,1866],210:[1,1867],211:[1,1872],212:[1,1873],213:[1,1874],214:[1,1875],215:[1,1868],216:[1,1869],217:[1,1870],218:[1,1871],219:1855,220:$Vx6},o($VD3,$V13),o($VD3,$V23),o($VD3,$V33),o($VD3,$V43),o($VD3,$V53),{111:[1,1876]},o($VD3,$Va3),o($VB3,$Vk5),o($VE3,$VD5),o($VE3,$VK1),o($VE3,$Vn),o($VE3,$Vo),o($VE3,$Vp),o($VE3,$Vq),o($Vx3,$Vc2),o($Vr,$Vs,{54:1877,40:1878,43:$Vt}),o($Vx3,$Vd2),o($Vx3,$Ve2),o($Vx3,$Vv1),o($Vx3,$Vw1),o($VA3,$Vs1,{82:1879}),o($Vx3,$VE1),o($Vx3,$VF1),{19:[1,1883],21:[1,1887],22:1881,33:1880,205:1882,219:1884,220:[1,1886],221:[1,1885]},{119:[1,1888],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vx3,$Vf2),o($Vx3,$Vg2),o($VA3,$Vs1,{82:1889}),o($VG4,$Vy1,{93:1890}),o($VA3,$Vz1,{99:1364,95:1891,101:$VN5,102:$VR,103:$VS,104:$VT}),o($VG4,$VG1),o($VG4,$VH1),o($VG4,$VI1),o($VG4,$VJ1),{100:[1,1892]},o($VG4,$VT1),{70:[1,1893]},o($VH4,$Vp2,{83:1894,84:1895,197:1896,195:[1,1897]}),o($VI4,$Vp2,{83:1898,84:1899,197:1900,195:$Vy6}),o($Vz3,$Vs2,{99:947,95:1902,101:$VM4,102:$VR,103:$VS,104:$VT}),o($VC3,$Vt2),o($VA3,$Vu2,{90:1903,95:1904,91:1905,99:1906,105:1908,107:1909,101:$Vz6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vw2,{90:1903,95:1904,91:1905,99:1906,105:1908,107:1909,101:$Vz6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vx2,{90:1903,95:1904,91:1905,99:1906,105:1908,107:1909,101:$Vz6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE3,$Vy2),o($VK4,$Vp2,{83:1910,84:1911,197:1912,195:[1,1913]}),o($VM5,$VA2),o($VM5,$Vw),o($VM5,$Vx),o($VM5,$Vn),o($VM5,$Vo),o($VM5,$Vy),o($VM5,$Vp),o($VM5,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,1914],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1915,121:$VW2,148:$VX2,194:$VY2}),o($VC3,$V13),o($VE3,$V23),o($VE3,$V33),o($VE3,$V43),o($VE3,$V53),{111:[1,1916]},o($VE3,$Va3),o($Vx3,$Vd2),o($Vx3,$Ve2),o($Vx3,$Vv1),o($Vx3,$Vw1),o($VA3,$Vs1,{82:1917}),o($Vx3,$VE1),o($Vx3,$VF1),{19:[1,1921],21:[1,1925],22:1919,33:1918,205:1920,219:1922,220:[1,1924],221:[1,1923]},{119:[1,1926],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vx3,$Vf2),o($Vx3,$Vg2),o($VA3,$Vs1,{82:1927}),o($VG4,$Vy1,{93:1928}),o($VA3,$Vz1,{99:1411,95:1929,101:$VO5,102:$VR,103:$VS,104:$VT}),o($VG4,$VG1),o($VG4,$VH1),o($VG4,$VI1),o($VG4,$VJ1),{100:[1,1930]},o($VG4,$VT1),{70:[1,1931]},o($VH4,$Vp2,{83:1932,84:1933,197:1934,195:[1,1935]}),o($VI4,$Vp2,{83:1936,84:1937,197:1938,195:$VA6}),o($Vz3,$Vs2,{99:983,95:1940,101:$VN4,102:$VR,103:$VS,104:$VT}),o($VC3,$Vt2),o($VA3,$Vu2,{90:1941,95:1942,91:1943,99:1944,105:1946,107:1947,101:$VB6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vw2,{90:1941,95:1942,91:1943,99:1944,105:1946,107:1947,101:$VB6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vx2,{90:1941,95:1942,91:1943,99:1944,105:1946,107:1947,101:$VB6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE3,$Vy2),o($VK4,$Vp2,{83:1948,84:1949,197:1950,195:[1,1951]}),o($VM5,$VA2),o($VM5,$Vw),o($VM5,$Vx),o($VM5,$Vn),o($VM5,$Vo),o($VM5,$Vy),o($VM5,$Vp),o($VM5,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,1952],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:1953,121:$VW2,148:$VX2,194:$VY2}),o($VC3,$V13),o($VE3,$V23),o($VE3,$V33),o($VE3,$V43),o($VE3,$V53),{111:[1,1954]},o($VE3,$Va3),o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$VP4,21:$VQ4,22:1956,87:1955,219:996,220:$VR4},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$VT4,21:$VU4,22:1958,87:1957,219:1022,220:$VV4},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$VW4,21:$VX4,22:1960,87:1959,219:1049,220:$VY4},o($V05,[2,208]),o($V05,[2,210]),o($V05,[2,217]),o($V05,[2,225]),o($VX5,$Vi5),o($VX5,$Vj5),{19:$V15,21:$V25,22:1962,87:1961,219:1080,220:$Vh5},o($V05,[2,204]),o($V05,[2,213]),o($V05,[2,221]),o($VC6,$VD6,{152:1963,154:1964,161:$VE6,162:$VF6,163:$VG6,164:$VH6}),o($VI6,$VJ6),o($VK6,$VL6,{56:1969}),o($VM6,$VN6,{60:1970}),o($VI,$VJ,{63:1971,73:1972,75:1973,76:1974,92:1977,94:1978,87:1980,88:1981,89:1982,78:1983,44:1984,95:1988,22:1989,91:1991,118:1992,99:1996,219:1999,105:2000,107:2001,19:[1,1998],21:[1,2003],69:[1,1975],71:[1,1976],79:[1,1993],80:[1,1994],81:[1,1995],85:[1,1979],96:[1,1985],97:[1,1986],98:[1,1987],101:$VO6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,1990],220:[1,2002]}),o($VC6,$VD6,{154:1964,152:2004,161:$VE6,162:$VF6,163:$VG6,164:$VH6}),{70:$Vl5,134:2005,135:$V56},o($V66,$Vm5),o($VU2,$VV2,{147:406,136:1123,137:1124,138:1125,144:1126,146:1127,131:2006,148:$VX2,194:$Vy5}),o($V66,$Vn5),o($V66,$Vh4,{139:2007,143:2008,140:$V76,141:$V86}),o($VU2,$VV2,{147:406,144:1126,146:1127,138:2009,70:$Vo5,135:$Vo5,148:$VX2,194:$Vy5}),o($VU2,$VV2,{147:406,144:1126,146:1127,138:2010,70:$Vp5,135:$Vp5,148:$VX2,194:$Vy5}),o($V96,$Vq5),o($V96,$Vr5),o($V96,$Vs5),o($V96,$Vt5),{19:$Vu5,21:$Vv5,22:1113,129:2011,204:$Vw5,219:1116,220:$Vx5},o($VU2,$VV2,{147:406,130:1120,131:1121,132:1122,136:1123,137:1124,138:1125,144:1126,146:1127,126:2012,148:$VX2,194:$Vy5}),o($V96,$Vz5),o($V96,$VA5),o($V96,$VB5),o($V96,$Vn),o($V96,$Vo),o($V96,$Vy),o($V96,$Vp),o($V96,$Vq),o($VC5,$VO4),{19:$Vi,21:$Vj,22:2013,219:45,220:$Vk},{19:$VP6,21:$VQ6,22:2015,100:[1,2026],108:[1,2027],109:[1,2028],110:2025,186:2016,196:2014,201:2019,202:2020,203:2021,206:2024,209:[1,2029],210:[1,2030],211:[1,2035],212:[1,2036],213:[1,2037],214:[1,2038],215:[1,2031],216:[1,2032],217:[1,2033],218:[1,2034],219:2018,220:$VR6},o($Vp4,$Vk5),{198:[1,2041],199:2039,200:[1,2040]},o($Vb3,$VP5),o($Vb3,$VQ5),o($Vb3,$VR5),o($Vb3,$Vn),o($Vb3,$Vo),o($Vb3,$VX3),o($Vb3,$VY3),o($Vb3,$VZ3),o($Vb3,$Vp),o($Vb3,$Vq),o($Vb3,$V_3),o($Vb3,$V$3,{207:2042,208:2043,111:[1,2044]}),o($Vb3,$V04),o($Vb3,$V14),o($Vb3,$V24),o($Vb3,$V34),o($Vb3,$V44),o($Vb3,$V54),o($Vb3,$V64),o($Vb3,$V74),o($Vb3,$V84),o($VS6,$V63),o($VS6,$V73),o($VS6,$V83),o($VS6,$V93),o($VG,$Vc2),o($Vr,$Vs,{54:2045,40:2046,43:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:2047}),o($VG,$VE1),o($VG,$VF1),{19:[1,2051],21:[1,2055],22:2049,33:2048,205:2050,219:2052,220:[1,2054],221:[1,2053]},{119:[1,2056],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:2057}),o($Vh2,$Vy1,{93:2058}),o($Vt1,$Vz1,{99:1551,95:2059,101:$Vd6,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,2060]},o($Vh2,$VT1),{70:[1,2061]},o($Vo2,$Vp2,{83:2062,84:2063,197:2064,195:[1,2065]}),o($Vq2,$Vp2,{83:2066,84:2067,197:2068,195:$VT6}),o($Vr1,$Vs2,{99:1167,95:2070,101:$VF5,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:2071,95:2072,91:2073,99:2074,105:2076,107:2077,101:$VU6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:2071,95:2072,91:2073,99:2074,105:2076,107:2077,101:$VU6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:2071,95:2072,91:2073,99:2074,105:2076,107:2077,101:$VU6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:2078,84:2079,197:2080,195:[1,2081]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,2082],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2083,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,2084]},o($VN1,$Va3),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:2085}),o($VG,$VE1),o($VG,$VF1),{19:[1,2089],21:[1,2093],22:2087,33:2086,205:2088,219:2090,220:[1,2092],221:[1,2091]},{119:[1,2094],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:2095}),o($Vh2,$Vy1,{93:2096}),o($Vt1,$Vz1,{99:1598,95:2097,101:$Ve6,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,2098]},o($Vh2,$VT1),{70:[1,2099]},o($Vo2,$Vp2,{83:2100,84:2101,197:2102,195:[1,2103]}),o($Vq2,$Vp2,{83:2104,84:2105,197:2106,195:$VV6}),o($Vr1,$Vs2,{99:1203,95:2108,101:$VG5,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:2109,95:2110,91:2111,99:2112,105:2114,107:2115,101:$VW6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:2109,95:2110,91:2111,99:2112,105:2114,107:2115,101:$VW6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:2109,95:2110,91:2111,99:2112,105:2114,107:2115,101:$VW6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:2116,84:2117,197:2118,195:[1,2119]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,2120],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2121,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,2122]},o($VN1,$Va3),o($Vt1,$Vk5),{198:[1,2125],199:2123,200:[1,2124]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:2126,208:2127,111:[1,2128]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,2131],199:2129,200:[1,2130]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:2132,208:2133,111:[1,2134]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,2137],21:[1,2140],22:2136,87:2135,219:2138,220:[1,2139]},{198:[1,2143],199:2141,200:[1,2142]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:2144,208:2145,111:[1,2146]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($VG,$Ve1),o($VG,$Vf1,{65:2147,67:2148,72:2149,44:2150,78:2151,118:2155,79:[1,2152],80:[1,2153],81:[1,2154],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:2156,64:2157,73:2158,92:2159,94:2160,95:2164,99:2165,96:[1,2161],97:[1,2162],98:[1,2163],101:$VX6,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:2167,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:2168}),o($Vt1,$Vs1,{82:2169}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:2170}),o($Vr1,$Vz1,{99:1735,95:2171,101:$Vo6,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:2172}),o($VA1,$VB1,{86:2173}),o($VA1,$VB1,{86:2174}),o($Vt1,$VC1,{105:1739,107:1740,91:2175,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:2176}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,2180],21:[1,2184],22:2178,33:2177,205:2179,219:2181,220:[1,2183],221:[1,2182]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:2185}),o($VN1,$VO1),{119:[1,2186],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,2187]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,2189],106:2188,108:[1,2190],109:[1,2191],110:2192,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2193]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VT3),{121:[1,2194]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:2195,219:45,220:$Vk},{19:$VY6,21:$VZ6,22:2197,100:[1,2208],108:[1,2209],109:[1,2210],110:2207,186:2198,196:2196,201:2201,202:2202,203:2203,206:2206,209:[1,2211],210:[1,2212],211:[1,2217],212:[1,2218],213:[1,2219],214:[1,2220],215:[1,2213],216:[1,2214],217:[1,2215],218:[1,2216],219:2200,220:$V_6},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:2221,219:45,220:$Vk},{19:$V$6,21:$V07,22:2223,100:[1,2234],108:[1,2235],109:[1,2236],110:2233,186:2224,196:2222,201:2227,202:2228,203:2229,206:2232,209:[1,2237],210:[1,2238],211:[1,2243],212:[1,2244],213:[1,2245],214:[1,2246],215:[1,2239],216:[1,2240],217:[1,2241],218:[1,2242],219:2226,220:$V17},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,2247]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:2248,219:45,220:$Vk},{19:$V27,21:$V37,22:2250,100:[1,2261],108:[1,2262],109:[1,2263],110:2260,186:2251,196:2249,201:2254,202:2255,203:2256,206:2259,209:[1,2264],210:[1,2265],211:[1,2270],212:[1,2271],213:[1,2272],214:[1,2273],215:[1,2266],216:[1,2267],217:[1,2268],218:[1,2269],219:2253,220:$V47},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VG,$VT3),{121:[1,2274]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:2275,219:45,220:$Vk},{19:$V57,21:$V67,22:2277,100:[1,2288],108:[1,2289],109:[1,2290],110:2287,186:2278,196:2276,201:2281,202:2282,203:2283,206:2286,209:[1,2291],210:[1,2292],211:[1,2297],212:[1,2298],213:[1,2299],214:[1,2300],215:[1,2293],216:[1,2294],217:[1,2295],218:[1,2296],219:2280,220:$V77},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:2301,219:45,220:$Vk},{19:$V87,21:$V97,22:2303,100:[1,2314],108:[1,2315],109:[1,2316],110:2313,186:2304,196:2302,201:2307,202:2308,203:2309,206:2312,209:[1,2317],210:[1,2318],211:[1,2323],212:[1,2324],213:[1,2325],214:[1,2326],215:[1,2319],216:[1,2320],217:[1,2321],218:[1,2322],219:2306,220:$Va7},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,2327]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:2328,219:45,220:$Vk},{19:$Vb7,21:$Vc7,22:2330,100:[1,2341],108:[1,2342],109:[1,2343],110:2340,186:2331,196:2329,201:2334,202:2335,203:2336,206:2339,209:[1,2344],210:[1,2345],211:[1,2350],212:[1,2351],213:[1,2352],214:[1,2353],215:[1,2346],216:[1,2347],217:[1,2348],218:[1,2349],219:2333,220:$Vd7},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VA3,$Vk5),{198:[1,2356],199:2354,200:[1,2355]},o($Vz3,$VP5),o($Vz3,$VQ5),o($Vz3,$VR5),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$VX3),o($Vz3,$VY3),o($Vz3,$VZ3),o($Vz3,$Vp),o($Vz3,$Vq),o($Vz3,$V_3),o($Vz3,$V$3,{207:2357,208:2358,111:[1,2359]}),o($Vz3,$V04),o($Vz3,$V14),o($Vz3,$V24),o($Vz3,$V34),o($Vz3,$V44),o($Vz3,$V54),o($Vz3,$V64),o($Vz3,$V74),o($Vz3,$V84),o($Ve7,$V63),o($Ve7,$V73),o($Ve7,$V83),o($Ve7,$V93),{198:[1,2362],199:2360,200:[1,2361]},o($VA3,$VP5),o($VA3,$VQ5),o($VA3,$VR5),o($VA3,$Vn),o($VA3,$Vo),o($VA3,$VX3),o($VA3,$VY3),o($VA3,$VZ3),o($VA3,$Vp),o($VA3,$Vq),o($VA3,$V_3),o($VA3,$V$3,{207:2363,208:2364,111:[1,2365]}),o($VA3,$V04),o($VA3,$V14),o($VA3,$V24),o($VA3,$V34),o($VA3,$V44),o($VA3,$V54),o($VA3,$V64),o($VA3,$V74),o($VA3,$V84),o($Vf7,$V63),o($Vf7,$V73),o($Vf7,$V83),o($Vf7,$V93),{198:[1,2368],199:2366,200:[1,2367]},o($VB3,$VP5),o($VB3,$VQ5),o($VB3,$VR5),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VX3),o($VB3,$VY3),o($VB3,$VZ3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V_3),o($VB3,$V$3,{207:2369,208:2370,111:[1,2371]}),o($VB3,$V04),o($VB3,$V14),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($Vg7,$V63),o($Vg7,$V73),o($Vg7,$V83),o($Vg7,$V93),{19:[1,2374],21:[1,2377],22:2373,87:2372,219:2375,220:[1,2376]},o($Vx3,$Vu3),o($VI,$VJ,{62:2378,64:2379,66:2380,67:2381,73:2384,75:2385,72:2386,44:2387,92:2388,94:2389,87:2391,88:2392,89:2393,78:2394,95:2401,22:2402,91:2404,118:2405,99:2406,219:2409,105:2410,107:2411,19:[1,2408],21:[1,2413],69:[1,2382],71:[1,2383],79:[1,2395],80:[1,2396],81:[1,2397],85:[1,2390],96:[1,2398],97:[1,2399],98:[1,2400],101:$Vh7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,2403],220:[1,2412]}),o($VI4,$Vp2,{84:1899,197:1900,83:2414,195:$Vy6}),o($Vx3,$VA2),o($Vx3,$Vw),o($Vx3,$Vx),o($Vx3,$Vn),o($Vx3,$Vo),o($Vx3,$Vy),o($Vx3,$Vp),o($Vx3,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2415,121:$VW2,148:$VX2,194:$VY2}),o($VI4,$Vp2,{84:1899,197:1900,83:2416,195:$Vy6}),o($VA3,$Vs2,{99:1364,95:2417,101:$VN5,102:$VR,103:$VS,104:$VT}),o($VG4,$Vt2),o($VG4,$V13),o($Vx3,$Vw3),o($VL5,$VH3),o($Vz3,$VI3),o($VL5,$VJ3,{31:2418,198:[1,2419]}),{19:$VK3,21:$VL3,22:643,129:2420,204:$VM3,219:646,220:$VN3},o($Vx3,$VO3),o($VA3,$VI3),o($Vx3,$VJ3,{31:2421,198:[1,2422]}),{19:$VK3,21:$VL3,22:643,129:2423,204:$VM3,219:646,220:$VN3},o($VC3,$VP3),o($VD3,$VQ3),o($VD3,$VR3),o($VD3,$VS3),{100:[1,2424]},o($VD3,$VT1),{100:[1,2426],106:2425,108:[1,2427],109:[1,2428],110:2429,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2430]},o($VM5,$VT3),o($VB3,$VI3),o($VM5,$VJ3,{31:2431,198:[1,2432]}),{19:$VK3,21:$VL3,22:643,129:2433,204:$VM3,219:646,220:$VN3},o($VD3,$VU3),{121:[1,2434]},{19:[1,2437],21:[1,2440],22:2436,87:2435,219:2438,220:[1,2439]},o($VI4,$Vp2,{84:1937,197:1938,83:2441,195:$VA6}),o($Vx3,$VA2),o($Vx3,$Vw),o($Vx3,$Vx),o($Vx3,$Vn),o($Vx3,$Vo),o($Vx3,$Vy),o($Vx3,$Vp),o($Vx3,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2442,121:$VW2,148:$VX2,194:$VY2}),o($VI4,$Vp2,{84:1937,197:1938,83:2443,195:$VA6}),o($VA3,$Vs2,{99:1411,95:2444,101:$VO5,102:$VR,103:$VS,104:$VT}),o($VG4,$Vt2),o($VG4,$V13),o($Vx3,$Vw3),o($VL5,$VH3),o($Vz3,$VI3),o($VL5,$VJ3,{31:2445,198:[1,2446]}),{19:$VK3,21:$VL3,22:643,129:2447,204:$VM3,219:646,220:$VN3},o($Vx3,$VO3),o($VA3,$VI3),o($Vx3,$VJ3,{31:2448,198:[1,2449]}),{19:$VK3,21:$VL3,22:643,129:2450,204:$VM3,219:646,220:$VN3},o($VC3,$VP3),o($VD3,$VQ3),o($VD3,$VR3),o($VD3,$VS3),{100:[1,2451]},o($VD3,$VT1),{100:[1,2453],106:2452,108:[1,2454],109:[1,2455],110:2456,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2457]},o($VM5,$VT3),o($VB3,$VI3),o($VM5,$VJ3,{31:2458,198:[1,2459]}),{19:$VK3,21:$VL3,22:643,129:2460,204:$VM3,219:646,220:$VN3},o($VD3,$VU3),{121:[1,2461]},{19:[1,2464],21:[1,2467],22:2463,87:2462,219:2465,220:[1,2466]},o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($VX5,$VZ5),o($VX5,$VK1),o($Vi7,$Vj7,{153:2468,155:$Vk7}),o($VC6,$Vl7),o($VC6,$Vm7),o($VC6,$Vn7),o($VC6,$Vo7),o($VC6,$Vp7),o($VI6,$Vq7,{57:2470,51:[1,2471]}),o($VK6,$Vr7,{61:2472,53:[1,2473]}),o($VM6,$Vs7),o($VM6,$Vt7,{74:2474,76:2475,78:2476,44:2477,118:2478,79:[1,2479],80:[1,2480],81:[1,2481],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VM6,$Vu7),o($VM6,$Vv7,{77:2482,73:2483,92:2484,94:2485,95:2489,99:2490,96:[1,2486],97:[1,2487],98:[1,2488],101:$Vw7,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:2492,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VM6,$Vx7),o($Vy7,$Vy1,{93:2493}),o($Vz7,$Vz1,{99:1996,95:2494,101:$VO6,102:$VR,103:$VS,104:$VT}),o($VA7,$VB1,{86:2495}),o($VA7,$VB1,{86:2496}),o($VA7,$VB1,{86:2497}),o($VM6,$VC1,{105:2000,107:2001,91:2498,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB7,$VC7),o($VB7,$VD7),o($Vy7,$VG1),o($Vy7,$VH1),o($Vy7,$VI1),o($Vy7,$VJ1),o($VA7,$VK1),o($VL1,$VM1,{167:2499}),o($VE7,$VO1),{119:[1,2500],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VB7,$VE1),o($VB7,$VF1),{19:[1,2504],21:[1,2508],22:2502,33:2501,205:2503,219:2505,220:[1,2507],221:[1,2506]},{100:[1,2509]},o($Vy7,$VT1),o($VA7,$Vn),o($VA7,$Vo),{100:[1,2511],106:2510,108:[1,2512],109:[1,2513],110:2514,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2515]},o($VA7,$Vp),o($VA7,$Vq),o($Vi7,$Vj7,{153:2516,155:$Vk7}),o($V66,$V_5),o($V66,$V$5),o($V66,$V06),o($V96,$V16),o($V96,$V26),o($V96,$V36),o($Vr,$Vs,{46:2517,47:2518,55:2519,59:2520,40:2521,43:$Vt}),{70:[1,2522]},{198:[1,2525],199:2523,200:[1,2524]},o($Vp4,$VP5),o($Vp4,$VQ5),o($Vp4,$VR5),o($Vp4,$Vn),o($Vp4,$Vo),o($Vp4,$VX3),o($Vp4,$VY3),o($Vp4,$VZ3),o($Vp4,$Vp),o($Vp4,$Vq),o($Vp4,$V_3),o($Vp4,$V$3,{207:2526,208:2527,111:[1,2528]}),o($Vp4,$V04),o($Vp4,$V14),o($Vp4,$V24),o($Vp4,$V34),o($Vp4,$V44),o($Vp4,$V54),o($Vp4,$V64),o($Vp4,$V74),o($Vp4,$V84),o($VF7,$V63),o($VF7,$V73),o($VF7,$V83),o($VF7,$V93),o($Vt4,$V71),o($Vt4,$V81),o($Vt4,$V91),o($Vb3,$Vi5),o($Vb3,$Vj5),{19:$Va6,21:$Vb6,22:2530,87:2529,219:1510,220:$Vc6},o($VG,$Vu3),o($VI,$VJ,{62:2531,64:2532,66:2533,67:2534,73:2537,75:2538,72:2539,44:2540,92:2541,94:2542,87:2544,88:2545,89:2546,78:2547,95:2554,22:2555,91:2557,118:2558,99:2559,219:2562,105:2563,107:2564,19:[1,2561],21:[1,2566],69:[1,2535],71:[1,2536],79:[1,2548],80:[1,2549],81:[1,2550],85:[1,2543],96:[1,2551],97:[1,2552],98:[1,2553],101:$VG7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,2556],220:[1,2565]}),o($Vq2,$Vp2,{84:2067,197:2068,83:2567,195:$VT6}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2568,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:2067,197:2068,83:2569,195:$VT6}),o($Vt1,$Vs2,{99:1551,95:2570,101:$Vd6,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:2571,198:[1,2572]}),{19:$VK3,21:$VL3,22:643,129:2573,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:2574,198:[1,2575]}),{19:$VK3,21:$VL3,22:643,129:2576,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,2577]},o($VA1,$VT1),{100:[1,2579],106:2578,108:[1,2580],109:[1,2581],110:2582,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2583]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:2584,198:[1,2585]}),{19:$VK3,21:$VL3,22:643,129:2586,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,2587]},{19:[1,2590],21:[1,2593],22:2589,87:2588,219:2591,220:[1,2592]},o($Vq2,$Vp2,{84:2105,197:2106,83:2594,195:$VV6}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2595,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:2105,197:2106,83:2596,195:$VV6}),o($Vt1,$Vs2,{99:1598,95:2597,101:$Ve6,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:2598,198:[1,2599]}),{19:$VK3,21:$VL3,22:643,129:2600,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:2601,198:[1,2602]}),{19:$VK3,21:$VL3,22:643,129:2603,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,2604]},o($VA1,$VT1),{100:[1,2606],106:2605,108:[1,2607],109:[1,2608],110:2609,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2610]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:2611,198:[1,2612]}),{19:$VK3,21:$VL3,22:643,129:2613,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,2614]},{19:[1,2617],21:[1,2620],22:2616,87:2615,219:2618,220:[1,2619]},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$Vf6,21:$Vg6,22:2622,87:2621,219:1633,220:$Vh6},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$Vi6,21:$Vj6,22:2624,87:2623,219:1659,220:$Vk6},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$Vl6,21:$Vm6,22:2626,87:2625,219:1686,220:$Vn6},o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:2627}),o($VG,$VE1),o($VG,$VF1),{19:[1,2631],21:[1,2635],22:2629,33:2628,205:2630,219:2632,220:[1,2634],221:[1,2633]},{119:[1,2636],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:2637}),o($Vh2,$Vy1,{93:2638}),o($Vt1,$Vz1,{99:2165,95:2639,101:$VX6,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,2640]},o($Vh2,$VT1),{70:[1,2641]},o($Vo2,$Vp2,{83:2642,84:2643,197:2644,195:[1,2645]}),o($Vq2,$Vp2,{83:2646,84:2647,197:2648,195:$VH7}),o($Vr1,$Vs2,{99:1735,95:2650,101:$Vo6,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:2651,95:2652,91:2653,99:2654,105:2656,107:2657,101:$VI7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:2651,95:2652,91:2653,99:2654,105:2656,107:2657,101:$VI7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:2651,95:2652,91:2653,99:2654,105:2656,107:2657,101:$VI7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:2658,84:2659,197:2660,195:[1,2661]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,2662],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2663,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,2664]},o($VN1,$Va3),o($Vt1,$Vk5),{198:[1,2667],199:2665,200:[1,2666]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:2668,208:2669,111:[1,2670]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,2673],199:2671,200:[1,2672]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:2674,208:2675,111:[1,2676]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,2679],21:[1,2682],22:2678,87:2677,219:2680,220:[1,2681]},{198:[1,2685],199:2683,200:[1,2684]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:2686,208:2687,111:[1,2688]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($Vt1,$Vk5),{198:[1,2691],199:2689,200:[1,2690]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:2692,208:2693,111:[1,2694]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,2697],199:2695,200:[1,2696]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:2698,208:2699,111:[1,2700]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,2703],21:[1,2706],22:2702,87:2701,219:2704,220:[1,2705]},{198:[1,2709],199:2707,200:[1,2708]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:2710,208:2711,111:[1,2712]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($VH4,$V71),o($VH4,$V81),o($VH4,$V91),o($Vz3,$Vi5),o($Vz3,$Vj5),{19:$Vp6,21:$Vq6,22:2714,87:2713,219:1803,220:$Vr6},o($VI4,$V71),o($VI4,$V81),o($VI4,$V91),o($VA3,$Vi5),o($VA3,$Vj5),{19:$Vs6,21:$Vt6,22:2716,87:2715,219:1829,220:$Vu6},o($VK4,$V71),o($VK4,$V81),o($VK4,$V91),o($VB3,$Vi5),o($VB3,$Vj5),{19:$Vv6,21:$Vw6,22:2718,87:2717,219:1855,220:$Vx6},o($VD3,$VD5),o($VD3,$VK1),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$Vp),o($VD3,$Vq),o($Vx3,$Ve1),o($VI,$VJ,{65:2719,67:2720,72:2721,44:2722,78:2723,118:2727,51:$Vf1,53:$Vf1,70:$Vf1,79:[1,2724],80:[1,2725],81:[1,2726]}),o($Vx3,$Vj1),o($Vx3,$Vk1,{68:2728,64:2729,73:2730,92:2731,94:2732,95:2736,99:2737,96:[1,2733],97:[1,2734],98:[1,2735],101:$VJ7,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:2739,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vx3,$Vq1),o($Vz3,$Vs1,{82:2740}),o($VA3,$Vs1,{82:2741}),o($VM5,$Vv1),o($VM5,$Vw1),o($VC3,$Vy1,{93:2742}),o($Vz3,$Vz1,{99:2406,95:2743,101:$Vh7,102:$VR,103:$VS,104:$VT}),o($VD3,$VB1,{86:2744}),o($VD3,$VB1,{86:2745}),o($VD3,$VB1,{86:2746}),o($VA3,$VC1,{105:2410,107:2411,91:2747,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB3,$Vs1,{82:2748}),o($VM5,$VE1),o($VM5,$VF1),{19:[1,2752],21:[1,2756],22:2750,33:2749,205:2751,219:2753,220:[1,2755],221:[1,2754]},o($VC3,$VG1),o($VC3,$VH1),o($VC3,$VI1),o($VC3,$VJ1),o($VD3,$VK1),o($VL1,$VM1,{167:2757}),o($VE3,$VO1),{119:[1,2758],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,2759]},o($VC3,$VT1),o($VD3,$Vn),o($VD3,$Vo),{100:[1,2761],106:2760,108:[1,2762],109:[1,2763],110:2764,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,2765]},o($VD3,$Vp),o($VD3,$Vq),o($Vx3,$VT3),{121:[1,2766]},o($Vx3,$VH3),o($VG4,$VP3),o($VH4,$VO4),{19:$Vi,21:$Vj,22:2767,219:45,220:$Vk},{19:$VK7,21:$VL7,22:2769,100:[1,2780],108:[1,2781],109:[1,2782],110:2779,186:2770,196:2768,201:2773,202:2774,203:2775,206:2778,209:[1,2783],210:[1,2784],211:[1,2789],212:[1,2790],213:[1,2791],214:[1,2792],215:[1,2785],216:[1,2786],217:[1,2787],218:[1,2788],219:2772,220:$VM7},o($VI4,$VO4),{19:$Vi,21:$Vj,22:2793,219:45,220:$Vk},{19:$VN7,21:$VO7,22:2795,100:[1,2806],108:[1,2807],109:[1,2808],110:2805,186:2796,196:2794,201:2799,202:2800,203:2801,206:2804,209:[1,2809],210:[1,2810],211:[1,2815],212:[1,2816],213:[1,2817],214:[1,2818],215:[1,2811],216:[1,2812],217:[1,2813],218:[1,2814],219:2798,220:$VP7},o($VD3,$V13),o($VD3,$V23),o($VD3,$V33),o($VD3,$V43),o($VD3,$V53),{111:[1,2819]},o($VD3,$Va3),o($VK4,$VO4),{19:$Vi,21:$Vj,22:2820,219:45,220:$Vk},{19:$VQ7,21:$VR7,22:2822,100:[1,2833],108:[1,2834],109:[1,2835],110:2832,186:2823,196:2821,201:2826,202:2827,203:2828,206:2831,209:[1,2836],210:[1,2837],211:[1,2842],212:[1,2843],213:[1,2844],214:[1,2845],215:[1,2838],216:[1,2839],217:[1,2840],218:[1,2841],219:2825,220:$VS7},o($VB3,$Vk5),o($VE3,$VD5),o($VE3,$VK1),o($VE3,$Vn),o($VE3,$Vo),o($VE3,$Vp),o($VE3,$Vq),o($Vx3,$VT3),{121:[1,2846]},o($Vx3,$VH3),o($VG4,$VP3),o($VH4,$VO4),{19:$Vi,21:$Vj,22:2847,219:45,220:$Vk},{19:$VT7,21:$VU7,22:2849,100:[1,2860],108:[1,2861],109:[1,2862],110:2859,186:2850,196:2848,201:2853,202:2854,203:2855,206:2858,209:[1,2863],210:[1,2864],211:[1,2869],212:[1,2870],213:[1,2871],214:[1,2872],215:[1,2865],216:[1,2866],217:[1,2867],218:[1,2868],219:2852,220:$VV7},o($VI4,$VO4),{19:$Vi,21:$Vj,22:2873,219:45,220:$Vk},{19:$VW7,21:$VX7,22:2875,100:[1,2886],108:[1,2887],109:[1,2888],110:2885,186:2876,196:2874,201:2879,202:2880,203:2881,206:2884,209:[1,2889],210:[1,2890],211:[1,2895],212:[1,2896],213:[1,2897],214:[1,2898],215:[1,2891],216:[1,2892],217:[1,2893],218:[1,2894],219:2878,220:$VY7},o($VD3,$V13),o($VD3,$V23),o($VD3,$V33),o($VD3,$V43),o($VD3,$V53),{111:[1,2899]},o($VD3,$Va3),o($VK4,$VO4),{19:$Vi,21:$Vj,22:2900,219:45,220:$Vk},{19:$VZ7,21:$V_7,22:2902,100:[1,2913],108:[1,2914],109:[1,2915],110:2912,186:2903,196:2901,201:2906,202:2907,203:2908,206:2911,209:[1,2916],210:[1,2917],211:[1,2922],212:[1,2923],213:[1,2924],214:[1,2925],215:[1,2918],216:[1,2919],217:[1,2920],218:[1,2921],219:2905,220:$V$7},o($VB3,$Vk5),o($VE3,$VD5),o($VE3,$VK1),o($VE3,$Vn),o($VE3,$Vo),o($VE3,$Vp),o($VE3,$Vq),o($Vi7,$Vs1,{82:2926}),o($V46,$V08,{156:2927,157:$V18}),o($VK6,$V28),o($Vr,$Vs,{55:2929,59:2930,40:2931,43:$Vt}),o($VM6,$V38),o($Vr,$Vs,{59:2932,40:2933,43:$Vt}),o($VM6,$V48),o($VM6,$V58),o($VM6,$VC7),o($VM6,$VD7),{119:[1,2934],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VM6,$VE1),o($VM6,$VF1),{19:[1,2938],21:[1,2942],22:2936,33:2935,205:2937,219:2939,220:[1,2941],221:[1,2940]},o($VM6,$V68),o($VM6,$V78),o($V88,$Vy1,{93:2943}),o($VM6,$Vz1,{99:2490,95:2944,101:$Vw7,102:$VR,103:$VS,104:$VT}),o($V88,$VG1),o($V88,$VH1),o($V88,$VI1),o($V88,$VJ1),{100:[1,2945]},o($V88,$VT1),{70:[1,2946]},o($Vz7,$Vs2,{99:1996,95:2947,101:$VO6,102:$VR,103:$VS,104:$VT}),o($Vy7,$Vt2),o($VM6,$Vu2,{90:2948,95:2949,91:2950,99:2951,105:2953,107:2954,101:$V98,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vw2,{90:2948,95:2949,91:2950,99:2951,105:2953,107:2954,101:$V98,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vx2,{90:2948,95:2949,91:2950,99:2951,105:2953,107:2954,101:$V98,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE7,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,2955],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:2956,121:$VW2,148:$VX2,194:$VY2}),o($VB7,$VA2),o($VB7,$Vw),o($VB7,$Vx),o($VB7,$Vn),o($VB7,$Vo),o($VB7,$Vy),o($VB7,$Vp),o($VB7,$Vq),o($Vy7,$V13),o($VE7,$V23),o($VE7,$V33),o($VE7,$V43),o($VE7,$V53),{111:[1,2957]},o($VE7,$Va3),o($Vi7,$Vs1,{82:2958}),o($Va8,$VD6,{152:2959,154:2960,161:$Vb8,162:$Vc8,163:$Vd8,164:$Ve8}),o($Vf8,$VJ6),o($Vg8,$VL6,{56:2965}),o($Vh8,$VN6,{60:2966}),o($VI,$VJ,{63:2967,73:2968,75:2969,76:2970,92:2973,94:2974,87:2976,88:2977,89:2978,78:2979,44:2980,95:2984,22:2985,91:2987,118:2988,99:2992,219:2995,105:2996,107:2997,19:[1,2994],21:[1,2999],69:[1,2971],71:[1,2972],79:[1,2989],80:[1,2990],81:[1,2991],85:[1,2975],96:[1,2981],97:[1,2982],98:[1,2983],101:$Vi8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,2986],220:[1,2998]}),o($Va8,$VD6,{154:2960,152:3000,161:$Vb8,162:$Vc8,163:$Vd8,164:$Ve8}),o($VC5,$V71),o($VC5,$V81),o($VC5,$V91),o($Vp4,$Vi5),o($Vp4,$Vj5),{19:$VP6,21:$VQ6,22:3002,87:3001,219:2018,220:$VR6},o($Vb3,$VZ5),o($Vb3,$VK1),o($VG,$Ve1),o($VG,$Vf1,{65:3003,67:3004,72:3005,44:3006,78:3007,118:3011,79:[1,3008],80:[1,3009],81:[1,3010],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VG,$Vj1),o($VG,$Vk1,{68:3012,64:3013,73:3014,92:3015,94:3016,95:3020,99:3021,96:[1,3017],97:[1,3018],98:[1,3019],101:$Vj8,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:3023,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VG,$Vq1),o($Vr1,$Vs1,{82:3024}),o($Vt1,$Vs1,{82:3025}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:3026}),o($Vr1,$Vz1,{99:2559,95:3027,101:$VG7,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:3028}),o($VA1,$VB1,{86:3029}),o($VA1,$VB1,{86:3030}),o($Vt1,$VC1,{105:2563,107:2564,91:3031,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:3032}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,3036],21:[1,3040],22:3034,33:3033,205:3035,219:3037,220:[1,3039],221:[1,3038]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{167:3041}),o($VN1,$VO1),{119:[1,3042],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},{100:[1,3043]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,3045],106:3044,108:[1,3046],109:[1,3047],110:3048,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3049]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VT3),{121:[1,3050]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:3051,219:45,220:$Vk},{19:$Vk8,21:$Vl8,22:3053,100:[1,3064],108:[1,3065],109:[1,3066],110:3063,186:3054,196:3052,201:3057,202:3058,203:3059,206:3062,209:[1,3067],210:[1,3068],211:[1,3073],212:[1,3074],213:[1,3075],214:[1,3076],215:[1,3069],216:[1,3070],217:[1,3071],218:[1,3072],219:3056,220:$Vm8},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:3077,219:45,220:$Vk},{19:$Vn8,21:$Vo8,22:3079,100:[1,3090],108:[1,3091],109:[1,3092],110:3089,186:3080,196:3078,201:3083,202:3084,203:3085,206:3088,209:[1,3093],210:[1,3094],211:[1,3099],212:[1,3100],213:[1,3101],214:[1,3102],215:[1,3095],216:[1,3096],217:[1,3097],218:[1,3098],219:3082,220:$Vp8},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,3103]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:3104,219:45,220:$Vk},{19:$Vq8,21:$Vr8,22:3106,100:[1,3117],108:[1,3118],109:[1,3119],110:3116,186:3107,196:3105,201:3110,202:3111,203:3112,206:3115,209:[1,3120],210:[1,3121],211:[1,3126],212:[1,3127],213:[1,3128],214:[1,3129],215:[1,3122],216:[1,3123],217:[1,3124],218:[1,3125],219:3109,220:$Vs8},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VG,$VT3),{121:[1,3130]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:3131,219:45,220:$Vk},{19:$Vt8,21:$Vu8,22:3133,100:[1,3144],108:[1,3145],109:[1,3146],110:3143,186:3134,196:3132,201:3137,202:3138,203:3139,206:3142,209:[1,3147],210:[1,3148],211:[1,3153],212:[1,3154],213:[1,3155],214:[1,3156],215:[1,3149],216:[1,3150],217:[1,3151],218:[1,3152],219:3136,220:$Vv8},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:3157,219:45,220:$Vk},{19:$Vw8,21:$Vx8,22:3159,100:[1,3170],108:[1,3171],109:[1,3172],110:3169,186:3160,196:3158,201:3163,202:3164,203:3165,206:3168,209:[1,3173],210:[1,3174],211:[1,3179],212:[1,3180],213:[1,3181],214:[1,3182],215:[1,3175],216:[1,3176],217:[1,3177],218:[1,3178],219:3162,220:$Vy8},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,3183]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:3184,219:45,220:$Vk},{19:$Vz8,21:$VA8,22:3186,100:[1,3197],108:[1,3198],109:[1,3199],110:3196,186:3187,196:3185,201:3190,202:3191,203:3192,206:3195,209:[1,3200],210:[1,3201],211:[1,3206],212:[1,3207],213:[1,3208],214:[1,3209],215:[1,3202],216:[1,3203],217:[1,3204],218:[1,3205],219:3189,220:$VB8},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($Vq2,$Vp2,{84:2647,197:2648,83:3210,195:$VH7}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3211,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:2647,197:2648,83:3212,195:$VH7}),o($Vt1,$Vs2,{99:2165,95:3213,101:$VX6,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:3214,198:[1,3215]}),{19:$VK3,21:$VL3,22:643,129:3216,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:3217,198:[1,3218]}),{19:$VK3,21:$VL3,22:643,129:3219,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,3220]},o($VA1,$VT1),{100:[1,3222],106:3221,108:[1,3223],109:[1,3224],110:3225,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3226]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:3227,198:[1,3228]}),{19:$VK3,21:$VL3,22:643,129:3229,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,3230]},{19:[1,3233],21:[1,3236],22:3232,87:3231,219:3234,220:[1,3235]},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$VY6,21:$VZ6,22:3238,87:3237,219:2200,220:$V_6},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$V$6,21:$V07,22:3240,87:3239,219:2226,220:$V17},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$V27,21:$V37,22:3242,87:3241,219:2253,220:$V47},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$V57,21:$V67,22:3244,87:3243,219:2280,220:$V77},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$V87,21:$V97,22:3246,87:3245,219:2306,220:$Va7},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$Vb7,21:$Vc7,22:3248,87:3247,219:2333,220:$Vd7},o($Vz3,$VZ5),o($Vz3,$VK1),o($VA3,$VZ5),o($VA3,$VK1),o($VB3,$VZ5),o($VB3,$VK1),o($Vx3,$Vd2),o($Vx3,$Ve2),o($Vx3,$Vv1),o($Vx3,$Vw1),o($VA3,$Vs1,{82:3249}),o($Vx3,$VE1),o($Vx3,$VF1),{19:[1,3253],21:[1,3257],22:3251,33:3250,205:3252,219:3254,220:[1,3256],221:[1,3255]},{119:[1,3258],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vx3,$Vf2),o($Vx3,$Vg2),o($VA3,$Vs1,{82:3259}),o($VG4,$Vy1,{93:3260}),o($VA3,$Vz1,{99:2737,95:3261,101:$VJ7,102:$VR,103:$VS,104:$VT}),o($VG4,$VG1),o($VG4,$VH1),o($VG4,$VI1),o($VG4,$VJ1),{100:[1,3262]},o($VG4,$VT1),{70:[1,3263]},o($VH4,$Vp2,{83:3264,84:3265,197:3266,195:[1,3267]}),o($VI4,$Vp2,{83:3268,84:3269,197:3270,195:$VC8}),o($Vz3,$Vs2,{99:2406,95:3272,101:$Vh7,102:$VR,103:$VS,104:$VT}),o($VC3,$Vt2),o($VA3,$Vu2,{90:3273,95:3274,91:3275,99:3276,105:3278,107:3279,101:$VD8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vw2,{90:3273,95:3274,91:3275,99:3276,105:3278,107:3279,101:$VD8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VA3,$Vx2,{90:3273,95:3274,91:3275,99:3276,105:3278,107:3279,101:$VD8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE3,$Vy2),o($VK4,$Vp2,{83:3280,84:3281,197:3282,195:[1,3283]}),o($VM5,$VA2),o($VM5,$Vw),o($VM5,$Vx),o($VM5,$Vn),o($VM5,$Vo),o($VM5,$Vy),o($VM5,$Vp),o($VM5,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,3284],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3285,121:$VW2,148:$VX2,194:$VY2}),o($VC3,$V13),o($VE3,$V23),o($VE3,$V33),o($VE3,$V43),o($VE3,$V53),{111:[1,3286]},o($VE3,$Va3),o($VA3,$Vk5),{198:[1,3289],199:3287,200:[1,3288]},o($Vz3,$VP5),o($Vz3,$VQ5),o($Vz3,$VR5),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$VX3),o($Vz3,$VY3),o($Vz3,$VZ3),o($Vz3,$Vp),o($Vz3,$Vq),o($Vz3,$V_3),o($Vz3,$V$3,{207:3290,208:3291,111:[1,3292]}),o($Vz3,$V04),o($Vz3,$V14),o($Vz3,$V24),o($Vz3,$V34),o($Vz3,$V44),o($Vz3,$V54),o($Vz3,$V64),o($Vz3,$V74),o($Vz3,$V84),o($Ve7,$V63),o($Ve7,$V73),o($Ve7,$V83),o($Ve7,$V93),{198:[1,3295],199:3293,200:[1,3294]},o($VA3,$VP5),o($VA3,$VQ5),o($VA3,$VR5),o($VA3,$Vn),o($VA3,$Vo),o($VA3,$VX3),o($VA3,$VY3),o($VA3,$VZ3),o($VA3,$Vp),o($VA3,$Vq),o($VA3,$V_3),o($VA3,$V$3,{207:3296,208:3297,111:[1,3298]}),o($VA3,$V04),o($VA3,$V14),o($VA3,$V24),o($VA3,$V34),o($VA3,$V44),o($VA3,$V54),o($VA3,$V64),o($VA3,$V74),o($VA3,$V84),o($Vf7,$V63),o($Vf7,$V73),o($Vf7,$V83),o($Vf7,$V93),{19:[1,3301],21:[1,3304],22:3300,87:3299,219:3302,220:[1,3303]},{198:[1,3307],199:3305,200:[1,3306]},o($VB3,$VP5),o($VB3,$VQ5),o($VB3,$VR5),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VX3),o($VB3,$VY3),o($VB3,$VZ3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V_3),o($VB3,$V$3,{207:3308,208:3309,111:[1,3310]}),o($VB3,$V04),o($VB3,$V14),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($Vg7,$V63),o($Vg7,$V73),o($Vg7,$V83),o($Vg7,$V93),o($VA3,$Vk5),{198:[1,3313],199:3311,200:[1,3312]},o($Vz3,$VP5),o($Vz3,$VQ5),o($Vz3,$VR5),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$VX3),o($Vz3,$VY3),o($Vz3,$VZ3),o($Vz3,$Vp),o($Vz3,$Vq),o($Vz3,$V_3),o($Vz3,$V$3,{207:3314,208:3315,111:[1,3316]}),o($Vz3,$V04),o($Vz3,$V14),o($Vz3,$V24),o($Vz3,$V34),o($Vz3,$V44),o($Vz3,$V54),o($Vz3,$V64),o($Vz3,$V74),o($Vz3,$V84),o($Ve7,$V63),o($Ve7,$V73),o($Ve7,$V83),o($Ve7,$V93),{198:[1,3319],199:3317,200:[1,3318]},o($VA3,$VP5),o($VA3,$VQ5),o($VA3,$VR5),o($VA3,$Vn),o($VA3,$Vo),o($VA3,$VX3),o($VA3,$VY3),o($VA3,$VZ3),o($VA3,$Vp),o($VA3,$Vq),o($VA3,$V_3),o($VA3,$V$3,{207:3320,208:3321,111:[1,3322]}),o($VA3,$V04),o($VA3,$V14),o($VA3,$V24),o($VA3,$V34),o($VA3,$V44),o($VA3,$V54),o($VA3,$V64),o($VA3,$V74),o($VA3,$V84),o($Vf7,$V63),o($Vf7,$V73),o($Vf7,$V83),o($Vf7,$V93),{19:[1,3325],21:[1,3328],22:3324,87:3323,219:3326,220:[1,3327]},{198:[1,3331],199:3329,200:[1,3330]},o($VB3,$VP5),o($VB3,$VQ5),o($VB3,$VR5),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VX3),o($VB3,$VY3),o($VB3,$VZ3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V_3),o($VB3,$V$3,{207:3332,208:3333,111:[1,3334]}),o($VB3,$V04),o($VB3,$V14),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($Vg7,$V63),o($Vg7,$V73),o($Vg7,$V83),o($Vg7,$V93),o($VE8,$Vp2,{83:3335,84:3336,197:3337,195:$VF8}),o($Vr,$Vs,{46:3339,47:3340,55:3341,59:3342,40:3343,43:$Vt}),{158:[1,3344]},o($VK6,$VG8),o($VM6,$VN6,{60:3345}),o($VI,$VJ,{63:3346,73:3347,75:3348,76:3349,92:3352,94:3353,87:3355,88:3356,89:3357,78:3358,44:3359,95:3363,22:3364,91:3366,118:3367,99:3371,219:3374,105:3375,107:3376,19:[1,3373],21:[1,3378],69:[1,3350],71:[1,3351],79:[1,3368],80:[1,3369],81:[1,3370],85:[1,3354],96:[1,3360],97:[1,3361],98:[1,3362],101:$VH8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,3365],220:[1,3377]}),o($VM6,$VI8),o($VI,$VJ,{63:3379,73:3380,75:3381,76:3382,92:3385,94:3386,87:3388,88:3389,89:3390,78:3391,44:3392,95:3396,22:3397,91:3399,118:3400,99:3404,219:3407,105:3408,107:3409,19:[1,3406],21:[1,3411],69:[1,3383],71:[1,3384],79:[1,3401],80:[1,3402],81:[1,3403],85:[1,3387],96:[1,3393],97:[1,3394],98:[1,3395],101:$VJ8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,3398],220:[1,3410]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3412,121:$VW2,148:$VX2,194:$VY2}),o($VM6,$VA2),o($VM6,$Vw),o($VM6,$Vx),o($VM6,$Vn),o($VM6,$Vo),o($VM6,$Vy),o($VM6,$Vp),o($VM6,$Vq),o($VM6,$Vs2,{99:2490,95:3413,101:$Vw7,102:$VR,103:$VS,104:$VT}),o($V88,$Vt2),o($V88,$V13),o($VM6,$VK8),o($Vy7,$VP3),o($VA7,$VQ3),o($VA7,$VR3),o($VA7,$VS3),{100:[1,3414]},o($VA7,$VT1),{100:[1,3416],106:3415,108:[1,3417],109:[1,3418],110:3419,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3420]},o($VA7,$VU3),{121:[1,3421]},{19:[1,3424],21:[1,3427],22:3423,87:3422,219:3425,220:[1,3426]},o($VE8,$Vp2,{84:3336,197:3337,83:3428,195:$VF8}),o($VL8,$Vj7,{153:3429,155:$VM8}),o($Va8,$Vl7),o($Va8,$Vm7),o($Va8,$Vn7),o($Va8,$Vo7),o($Va8,$Vp7),o($Vf8,$Vq7,{57:3431,51:[1,3432]}),o($Vg8,$Vr7,{61:3433,53:[1,3434]}),o($Vh8,$Vs7),o($Vh8,$Vt7,{74:3435,76:3436,78:3437,44:3438,118:3439,79:[1,3440],80:[1,3441],81:[1,3442],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($Vh8,$Vu7),o($Vh8,$Vv7,{77:3443,73:3444,92:3445,94:3446,95:3450,99:3451,96:[1,3447],97:[1,3448],98:[1,3449],101:$VN8,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:3453,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vh8,$Vx7),o($VO8,$Vy1,{93:3454}),o($VP8,$Vz1,{99:2992,95:3455,101:$Vi8,102:$VR,103:$VS,104:$VT}),o($VQ8,$VB1,{86:3456}),o($VQ8,$VB1,{86:3457}),o($VQ8,$VB1,{86:3458}),o($Vh8,$VC1,{105:2996,107:2997,91:3459,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VR8,$VC7),o($VR8,$VD7),o($VO8,$VG1),o($VO8,$VH1),o($VO8,$VI1),o($VO8,$VJ1),o($VQ8,$VK1),o($VL1,$VM1,{167:3460}),o($VS8,$VO1),{119:[1,3461],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VR8,$VE1),o($VR8,$VF1),{19:[1,3465],21:[1,3469],22:3463,33:3462,205:3464,219:3466,220:[1,3468],221:[1,3467]},{100:[1,3470]},o($VO8,$VT1),o($VQ8,$Vn),o($VQ8,$Vo),{100:[1,3472],106:3471,108:[1,3473],109:[1,3474],110:3475,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3476]},o($VQ8,$Vp),o($VQ8,$Vq),o($VL8,$Vj7,{153:3477,155:$VM8}),o($Vp4,$VZ5),o($Vp4,$VK1),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:3478}),o($VG,$VE1),o($VG,$VF1),{19:[1,3482],21:[1,3486],22:3480,33:3479,205:3481,219:3483,220:[1,3485],221:[1,3484]},{119:[1,3487],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:3488}),o($Vh2,$Vy1,{93:3489}),o($Vt1,$Vz1,{99:3021,95:3490,101:$Vj8,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,3491]},o($Vh2,$VT1),{70:[1,3492]},o($Vo2,$Vp2,{83:3493,84:3494,197:3495,195:[1,3496]}),o($Vq2,$Vp2,{83:3497,84:3498,197:3499,195:$VT8}),o($Vr1,$Vs2,{99:2559,95:3501,101:$VG7,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vt2),o($Vt1,$Vu2,{90:3502,95:3503,91:3504,99:3505,105:3507,107:3508,101:$VU8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vw2,{90:3502,95:3503,91:3504,99:3505,105:3507,107:3508,101:$VU8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:3502,95:3503,91:3504,99:3505,105:3507,107:3508,101:$VU8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vy2),o($Vz2,$Vp2,{83:3509,84:3510,197:3511,195:[1,3512]}),o($Vu1,$VA2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,3513],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3514,121:$VW2,148:$VX2,194:$VY2}),o($Vx1,$V13),o($VN1,$V23),o($VN1,$V33),o($VN1,$V43),o($VN1,$V53),{111:[1,3515]},o($VN1,$Va3),o($Vt1,$Vk5),{198:[1,3518],199:3516,200:[1,3517]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:3519,208:3520,111:[1,3521]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,3524],199:3522,200:[1,3523]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:3525,208:3526,111:[1,3527]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,3530],21:[1,3533],22:3529,87:3528,219:3531,220:[1,3532]},{198:[1,3536],199:3534,200:[1,3535]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:3537,208:3538,111:[1,3539]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($Vt1,$Vk5),{198:[1,3542],199:3540,200:[1,3541]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:3543,208:3544,111:[1,3545]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,3548],199:3546,200:[1,3547]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:3549,208:3550,111:[1,3551]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,3554],21:[1,3557],22:3553,87:3552,219:3555,220:[1,3556]},{198:[1,3560],199:3558,200:[1,3559]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:3561,208:3562,111:[1,3563]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($VG,$VT3),{121:[1,3564]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:3565,219:45,220:$Vk},{19:$VV8,21:$VW8,22:3567,100:[1,3578],108:[1,3579],109:[1,3580],110:3577,186:3568,196:3566,201:3571,202:3572,203:3573,206:3576,209:[1,3581],210:[1,3582],211:[1,3587],212:[1,3588],213:[1,3589],214:[1,3590],215:[1,3583],216:[1,3584],217:[1,3585],218:[1,3586],219:3570,220:$VX8},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:3591,219:45,220:$Vk},{19:$VY8,21:$VZ8,22:3593,100:[1,3604],108:[1,3605],109:[1,3606],110:3603,186:3594,196:3592,201:3597,202:3598,203:3599,206:3602,209:[1,3607],210:[1,3608],211:[1,3613],212:[1,3614],213:[1,3615],214:[1,3616],215:[1,3609],216:[1,3610],217:[1,3611],218:[1,3612],219:3596,220:$V_8},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,3617]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:3618,219:45,220:$Vk},{19:$V$8,21:$V09,22:3620,100:[1,3631],108:[1,3632],109:[1,3633],110:3630,186:3621,196:3619,201:3624,202:3625,203:3626,206:3629,209:[1,3634],210:[1,3635],211:[1,3640],212:[1,3641],213:[1,3642],214:[1,3643],215:[1,3636],216:[1,3637],217:[1,3638],218:[1,3639],219:3623,220:$V19},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($VI4,$Vp2,{84:3269,197:3270,83:3644,195:$VC8}),o($Vx3,$VA2),o($Vx3,$Vw),o($Vx3,$Vx),o($Vx3,$Vn),o($Vx3,$Vo),o($Vx3,$Vy),o($Vx3,$Vp),o($Vx3,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3645,121:$VW2,148:$VX2,194:$VY2}),o($VI4,$Vp2,{84:3269,197:3270,83:3646,195:$VC8}),o($VA3,$Vs2,{99:2737,95:3647,101:$VJ7,102:$VR,103:$VS,104:$VT}),o($VG4,$Vt2),o($VG4,$V13),o($Vx3,$Vw3),o($VL5,$VH3),o($Vz3,$VI3),o($VL5,$VJ3,{31:3648,198:[1,3649]}),{19:$VK3,21:$VL3,22:643,129:3650,204:$VM3,219:646,220:$VN3},o($Vx3,$VO3),o($VA3,$VI3),o($Vx3,$VJ3,{31:3651,198:[1,3652]}),{19:$VK3,21:$VL3,22:643,129:3653,204:$VM3,219:646,220:$VN3},o($VC3,$VP3),o($VD3,$VQ3),o($VD3,$VR3),o($VD3,$VS3),{100:[1,3654]},o($VD3,$VT1),{100:[1,3656],106:3655,108:[1,3657],109:[1,3658],110:3659,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3660]},o($VM5,$VT3),o($VB3,$VI3),o($VM5,$VJ3,{31:3661,198:[1,3662]}),{19:$VK3,21:$VL3,22:643,129:3663,204:$VM3,219:646,220:$VN3},o($VD3,$VU3),{121:[1,3664]},{19:[1,3667],21:[1,3670],22:3666,87:3665,219:3668,220:[1,3669]},o($VH4,$V71),o($VH4,$V81),o($VH4,$V91),o($Vz3,$Vi5),o($Vz3,$Vj5),{19:$VK7,21:$VL7,22:3672,87:3671,219:2772,220:$VM7},o($VI4,$V71),o($VI4,$V81),o($VI4,$V91),o($VA3,$Vi5),o($VA3,$Vj5),{19:$VN7,21:$VO7,22:3674,87:3673,219:2798,220:$VP7},o($VD3,$VD5),o($VD3,$VK1),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$Vp),o($VD3,$Vq),o($VK4,$V71),o($VK4,$V81),o($VK4,$V91),o($VB3,$Vi5),o($VB3,$Vj5),{19:$VQ7,21:$VR7,22:3676,87:3675,219:2825,220:$VS7},o($VH4,$V71),o($VH4,$V81),o($VH4,$V91),o($Vz3,$Vi5),o($Vz3,$Vj5),{19:$VT7,21:$VU7,22:3678,87:3677,219:2852,220:$VV7},o($VI4,$V71),o($VI4,$V81),o($VI4,$V91),o($VA3,$Vi5),o($VA3,$Vj5),{19:$VW7,21:$VX7,22:3680,87:3679,219:2878,220:$VY7},o($VD3,$VD5),o($VD3,$VK1),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$Vp),o($VD3,$Vq),o($VK4,$V71),o($VK4,$V81),o($VK4,$V91),o($VB3,$Vi5),o($VB3,$Vj5),{19:$VZ7,21:$V_7,22:3682,87:3681,219:2905,220:$V$7},o($Vn4,$V29),o($Vi7,$VI3),o($Vn4,$VJ3,{31:3683,198:[1,3684]}),{19:$VK3,21:$VL3,22:643,129:3685,204:$VM3,219:646,220:$VN3},o($Vi7,$V39),o($Vi7,$VJ6),o($V49,$VL6,{56:3686}),o($V59,$VN6,{60:3687}),o($VI,$VJ,{63:3688,73:3689,75:3690,76:3691,92:3694,94:3695,87:3697,88:3698,89:3699,78:3700,44:3701,95:3705,22:3706,91:3708,118:3709,99:3713,219:3716,105:3717,107:3718,19:[1,3715],21:[1,3720],69:[1,3692],71:[1,3693],79:[1,3710],80:[1,3711],81:[1,3712],85:[1,3696],96:[1,3702],97:[1,3703],98:[1,3704],101:$V69,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,3707],220:[1,3719]}),o($V46,[2,177]),o($VK6,$Vr7,{61:3721,53:[1,3722]}),o($VM6,$Vs7),o($VM6,$Vt7,{74:3723,76:3724,78:3725,44:3726,118:3727,79:[1,3728],80:[1,3729],81:[1,3730],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VM6,$Vu7),o($VM6,$Vv7,{77:3731,73:3732,92:3733,94:3734,95:3738,99:3739,96:[1,3735],97:[1,3736],98:[1,3737],101:$V79,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:3741,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VM6,$Vx7),o($Vy7,$Vy1,{93:3742}),o($Vz7,$Vz1,{99:3371,95:3743,101:$VH8,102:$VR,103:$VS,104:$VT}),o($VA7,$VB1,{86:3744}),o($VA7,$VB1,{86:3745}),o($VA7,$VB1,{86:3746}),o($VM6,$VC1,{105:3375,107:3376,91:3747,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB7,$VC7),o($VB7,$VD7),o($Vy7,$VG1),o($Vy7,$VH1),o($Vy7,$VI1),o($Vy7,$VJ1),o($VA7,$VK1),o($VL1,$VM1,{167:3748}),o($VE7,$VO1),{119:[1,3749],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VB7,$VE1),o($VB7,$VF1),{19:[1,3753],21:[1,3757],22:3751,33:3750,205:3752,219:3754,220:[1,3756],221:[1,3755]},{100:[1,3758]},o($Vy7,$VT1),o($VA7,$Vn),o($VA7,$Vo),{100:[1,3760],106:3759,108:[1,3761],109:[1,3762],110:3763,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3764]},o($VA7,$Vp),o($VA7,$Vq),o($VM6,$Vs7),o($VM6,$Vt7,{74:3765,76:3766,78:3767,44:3768,118:3769,79:[1,3770],80:[1,3771],81:[1,3772],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VM6,$Vu7),o($VM6,$Vv7,{77:3773,73:3774,92:3775,94:3776,95:3780,99:3781,96:[1,3777],97:[1,3778],98:[1,3779],101:$V89,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:3783,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VM6,$Vx7),o($Vy7,$Vy1,{93:3784}),o($Vz7,$Vz1,{99:3404,95:3785,101:$VJ8,102:$VR,103:$VS,104:$VT}),o($VA7,$VB1,{86:3786}),o($VA7,$VB1,{86:3787}),o($VA7,$VB1,{86:3788}),o($VM6,$VC1,{105:3408,107:3409,91:3789,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB7,$VC7),o($VB7,$VD7),o($Vy7,$VG1),o($Vy7,$VH1),o($Vy7,$VI1),o($Vy7,$VJ1),o($VA7,$VK1),o($VL1,$VM1,{167:3790}),o($VE7,$VO1),{119:[1,3791],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VB7,$VE1),o($VB7,$VF1),{19:[1,3795],21:[1,3799],22:3793,33:3792,205:3794,219:3796,220:[1,3798],221:[1,3797]},{100:[1,3800]},o($Vy7,$VT1),o($VA7,$Vn),o($VA7,$Vo),{100:[1,3802],106:3801,108:[1,3803],109:[1,3804],110:3805,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3806]},o($VA7,$Vp),o($VA7,$Vq),{121:[1,3807]},o($V88,$VP3),o($VA7,$V13),o($VA7,$V23),o($VA7,$V33),o($VA7,$V43),o($VA7,$V53),{111:[1,3808]},o($VA7,$Va3),o($VB7,$Vk5),o($VE7,$VD5),o($VE7,$VK1),o($VE7,$Vn),o($VE7,$Vo),o($VE7,$Vp),o($VE7,$Vq),o($Vn4,$V99),o($VL8,$Vs1,{82:3809}),o($V46,$V08,{156:3810,157:$V18}),o($Vg8,$V28),o($Vr,$Vs,{55:3811,59:3812,40:3813,43:$Vt}),o($Vh8,$V38),o($Vr,$Vs,{59:3814,40:3815,43:$Vt}),o($Vh8,$V48),o($Vh8,$V58),o($Vh8,$VC7),o($Vh8,$VD7),{119:[1,3816],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vh8,$VE1),o($Vh8,$VF1),{19:[1,3820],21:[1,3824],22:3818,33:3817,205:3819,219:3821,220:[1,3823],221:[1,3822]},o($Vh8,$V68),o($Vh8,$V78),o($Va9,$Vy1,{93:3825}),o($Vh8,$Vz1,{99:3451,95:3826,101:$VN8,102:$VR,103:$VS,104:$VT}),o($Va9,$VG1),o($Va9,$VH1),o($Va9,$VI1),o($Va9,$VJ1),{100:[1,3827]},o($Va9,$VT1),{70:[1,3828]},o($VP8,$Vs2,{99:2992,95:3829,101:$Vi8,102:$VR,103:$VS,104:$VT}),o($VO8,$Vt2),o($Vh8,$Vu2,{90:3830,95:3831,91:3832,99:3833,105:3835,107:3836,101:$Vb9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vw2,{90:3830,95:3831,91:3832,99:3833,105:3835,107:3836,101:$Vb9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vx2,{90:3830,95:3831,91:3832,99:3833,105:3835,107:3836,101:$Vb9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS8,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,3837],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3838,121:$VW2,148:$VX2,194:$VY2}),o($VR8,$VA2),o($VR8,$Vw),o($VR8,$Vx),o($VR8,$Vn),o($VR8,$Vo),o($VR8,$Vy),o($VR8,$Vp),o($VR8,$Vq),o($VO8,$V13),o($VS8,$V23),o($VS8,$V33),o($VS8,$V43),o($VS8,$V53),{111:[1,3839]},o($VS8,$Va3),o($VL8,$Vs1,{82:3840}),o($Vq2,$Vp2,{84:3498,197:3499,83:3841,195:$VT8}),o($VG,$VA2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:3842,121:$VW2,148:$VX2,194:$VY2}),o($Vq2,$Vp2,{84:3498,197:3499,83:3843,195:$VT8}),o($Vt1,$Vs2,{99:3021,95:3844,101:$Vj8,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vt2),o($Vh2,$V13),o($VG,$Vw3),o($VG3,$VH3),o($Vr1,$VI3),o($VG3,$VJ3,{31:3845,198:[1,3846]}),{19:$VK3,21:$VL3,22:643,129:3847,204:$VM3,219:646,220:$VN3},o($VG,$VO3),o($Vt1,$VI3),o($VG,$VJ3,{31:3848,198:[1,3849]}),{19:$VK3,21:$VL3,22:643,129:3850,204:$VM3,219:646,220:$VN3},o($Vx1,$VP3),o($VA1,$VQ3),o($VA1,$VR3),o($VA1,$VS3),{100:[1,3851]},o($VA1,$VT1),{100:[1,3853],106:3852,108:[1,3854],109:[1,3855],110:3856,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,3857]},o($Vu1,$VT3),o($VD1,$VI3),o($Vu1,$VJ3,{31:3858,198:[1,3859]}),{19:$VK3,21:$VL3,22:643,129:3860,204:$VM3,219:646,220:$VN3},o($VA1,$VU3),{121:[1,3861]},{19:[1,3864],21:[1,3867],22:3863,87:3862,219:3865,220:[1,3866]},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$Vk8,21:$Vl8,22:3869,87:3868,219:3056,220:$Vm8},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$Vn8,21:$Vo8,22:3871,87:3870,219:3082,220:$Vp8},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$Vq8,21:$Vr8,22:3873,87:3872,219:3109,220:$Vs8},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$Vt8,21:$Vu8,22:3875,87:3874,219:3136,220:$Vv8},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$Vw8,21:$Vx8,22:3877,87:3876,219:3162,220:$Vy8},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$Vz8,21:$VA8,22:3879,87:3878,219:3189,220:$VB8},o($Vt1,$Vk5),{198:[1,3882],199:3880,200:[1,3881]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:3883,208:3884,111:[1,3885]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,3888],199:3886,200:[1,3887]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:3889,208:3890,111:[1,3891]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,3894],21:[1,3897],22:3893,87:3892,219:3895,220:[1,3896]},{198:[1,3900],199:3898,200:[1,3899]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:3901,208:3902,111:[1,3903]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($Vx3,$VT3),{121:[1,3904]},o($Vx3,$VH3),o($VG4,$VP3),o($VH4,$VO4),{19:$Vi,21:$Vj,22:3905,219:45,220:$Vk},{19:$Vc9,21:$Vd9,22:3907,100:[1,3918],108:[1,3919],109:[1,3920],110:3917,186:3908,196:3906,201:3911,202:3912,203:3913,206:3916,209:[1,3921],210:[1,3922],211:[1,3927],212:[1,3928],213:[1,3929],214:[1,3930],215:[1,3923],216:[1,3924],217:[1,3925],218:[1,3926],219:3910,220:$Ve9},o($VI4,$VO4),{19:$Vi,21:$Vj,22:3931,219:45,220:$Vk},{19:$Vf9,21:$Vg9,22:3933,100:[1,3944],108:[1,3945],109:[1,3946],110:3943,186:3934,196:3932,201:3937,202:3938,203:3939,206:3942,209:[1,3947],210:[1,3948],211:[1,3953],212:[1,3954],213:[1,3955],214:[1,3956],215:[1,3949],216:[1,3950],217:[1,3951],218:[1,3952],219:3936,220:$Vh9},o($VD3,$V13),o($VD3,$V23),o($VD3,$V33),o($VD3,$V43),o($VD3,$V53),{111:[1,3957]},o($VD3,$Va3),o($VK4,$VO4),{19:$Vi,21:$Vj,22:3958,219:45,220:$Vk},{19:$Vi9,21:$Vj9,22:3960,100:[1,3971],108:[1,3972],109:[1,3973],110:3970,186:3961,196:3959,201:3964,202:3965,203:3966,206:3969,209:[1,3974],210:[1,3975],211:[1,3980],212:[1,3981],213:[1,3982],214:[1,3983],215:[1,3976],216:[1,3977],217:[1,3978],218:[1,3979],219:3963,220:$Vk9},o($VB3,$Vk5),o($VE3,$VD5),o($VE3,$VK1),o($VE3,$Vn),o($VE3,$Vo),o($VE3,$Vp),o($VE3,$Vq),o($Vz3,$VZ5),o($Vz3,$VK1),o($VA3,$VZ5),o($VA3,$VK1),o($VB3,$VZ5),o($VB3,$VK1),o($Vz3,$VZ5),o($Vz3,$VK1),o($VA3,$VZ5),o($VA3,$VK1),o($VB3,$VZ5),o($VB3,$VK1),o($VE8,$VO4),{19:$Vi,21:$Vj,22:3984,219:45,220:$Vk},{19:$Vl9,21:$Vm9,22:3986,100:[1,3997],108:[1,3998],109:[1,3999],110:3996,186:3987,196:3985,201:3990,202:3991,203:3992,206:3995,209:[1,4000],210:[1,4001],211:[1,4006],212:[1,4007],213:[1,4008],214:[1,4009],215:[1,4002],216:[1,4003],217:[1,4004],218:[1,4005],219:3989,220:$Vn9},o($Vi7,$Vq7,{57:4010,51:[1,4011]}),o($V49,$Vr7,{61:4012,53:[1,4013]}),o($V59,$Vs7),o($V59,$Vt7,{74:4014,76:4015,78:4016,44:4017,118:4018,79:[1,4019],80:[1,4020],81:[1,4021],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($V59,$Vu7),o($V59,$Vv7,{77:4022,73:4023,92:4024,94:4025,95:4029,99:4030,96:[1,4026],97:[1,4027],98:[1,4028],101:$Vo9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4032,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($V59,$Vx7),o($Vp9,$Vy1,{93:4033}),o($Vq9,$Vz1,{99:3713,95:4034,101:$V69,102:$VR,103:$VS,104:$VT}),o($Vr9,$VB1,{86:4035}),o($Vr9,$VB1,{86:4036}),o($Vr9,$VB1,{86:4037}),o($V59,$VC1,{105:3717,107:3718,91:4038,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs9,$VC7),o($Vs9,$VD7),o($Vp9,$VG1),o($Vp9,$VH1),o($Vp9,$VI1),o($Vp9,$VJ1),o($Vr9,$VK1),o($VL1,$VM1,{167:4039}),o($Vt9,$VO1),{119:[1,4040],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vs9,$VE1),o($Vs9,$VF1),{19:[1,4044],21:[1,4048],22:4042,33:4041,205:4043,219:4045,220:[1,4047],221:[1,4046]},{100:[1,4049]},o($Vp9,$VT1),o($Vr9,$Vn),o($Vr9,$Vo),{100:[1,4051],106:4050,108:[1,4052],109:[1,4053],110:4054,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4055]},o($Vr9,$Vp),o($Vr9,$Vq),o($VM6,$V38),o($Vr,$Vs,{59:4056,40:4057,43:$Vt}),o($VM6,$V48),o($VM6,$V58),o($VM6,$VC7),o($VM6,$VD7),{119:[1,4058],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VM6,$VE1),o($VM6,$VF1),{19:[1,4062],21:[1,4066],22:4060,33:4059,205:4061,219:4063,220:[1,4065],221:[1,4064]},o($VM6,$V68),o($VM6,$V78),o($V88,$Vy1,{93:4067}),o($VM6,$Vz1,{99:3739,95:4068,101:$V79,102:$VR,103:$VS,104:$VT}),o($V88,$VG1),o($V88,$VH1),o($V88,$VI1),o($V88,$VJ1),{100:[1,4069]},o($V88,$VT1),{70:[1,4070]},o($Vz7,$Vs2,{99:3371,95:4071,101:$VH8,102:$VR,103:$VS,104:$VT}),o($Vy7,$Vt2),o($VM6,$Vu2,{90:4072,95:4073,91:4074,99:4075,105:4077,107:4078,101:$Vu9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vw2,{90:4072,95:4073,91:4074,99:4075,105:4077,107:4078,101:$Vu9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vx2,{90:4072,95:4073,91:4074,99:4075,105:4077,107:4078,101:$Vu9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE7,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4079],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4080,121:$VW2,148:$VX2,194:$VY2}),o($VB7,$VA2),o($VB7,$Vw),o($VB7,$Vx),o($VB7,$Vn),o($VB7,$Vo),o($VB7,$Vy),o($VB7,$Vp),o($VB7,$Vq),o($Vy7,$V13),o($VE7,$V23),o($VE7,$V33),o($VE7,$V43),o($VE7,$V53),{111:[1,4081]},o($VE7,$Va3),o($VM6,$V48),o($VM6,$V58),o($VM6,$VC7),o($VM6,$VD7),{119:[1,4082],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VM6,$VE1),o($VM6,$VF1),{19:[1,4086],21:[1,4090],22:4084,33:4083,205:4085,219:4087,220:[1,4089],221:[1,4088]},o($VM6,$V68),o($VM6,$V78),o($V88,$Vy1,{93:4091}),o($VM6,$Vz1,{99:3781,95:4092,101:$V89,102:$VR,103:$VS,104:$VT}),o($V88,$VG1),o($V88,$VH1),o($V88,$VI1),o($V88,$VJ1),{100:[1,4093]},o($V88,$VT1),{70:[1,4094]},o($Vz7,$Vs2,{99:3404,95:4095,101:$VJ8,102:$VR,103:$VS,104:$VT}),o($Vy7,$Vt2),o($VM6,$Vu2,{90:4096,95:4097,91:4098,99:4099,105:4101,107:4102,101:$Vv9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vw2,{90:4096,95:4097,91:4098,99:4099,105:4101,107:4102,101:$Vv9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vx2,{90:4096,95:4097,91:4098,99:4099,105:4101,107:4102,101:$Vv9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE7,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4103],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4104,121:$VW2,148:$VX2,194:$VY2}),o($VB7,$VA2),o($VB7,$Vw),o($VB7,$Vx),o($VB7,$Vn),o($VB7,$Vo),o($VB7,$Vy),o($VB7,$Vp),o($VB7,$Vq),o($Vy7,$V13),o($VE7,$V23),o($VE7,$V33),o($VE7,$V43),o($VE7,$V53),{111:[1,4105]},o($VE7,$Va3),o($VM6,$Vk5),{19:[1,4108],21:[1,4111],22:4107,87:4106,219:4109,220:[1,4110]},o($Vw9,$Vp2,{83:4112,84:4113,197:4114,195:$Vx9}),o($Vr,$Vs,{46:4116,47:4117,55:4118,59:4119,40:4120,43:$Vt}),o($Vg8,$VG8),o($Vh8,$VN6,{60:4121}),o($VI,$VJ,{63:4122,73:4123,75:4124,76:4125,92:4128,94:4129,87:4131,88:4132,89:4133,78:4134,44:4135,95:4139,22:4140,91:4142,118:4143,99:4147,219:4150,105:4151,107:4152,19:[1,4149],21:[1,4154],69:[1,4126],71:[1,4127],79:[1,4144],80:[1,4145],81:[1,4146],85:[1,4130],96:[1,4136],97:[1,4137],98:[1,4138],101:$Vy9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4141],220:[1,4153]}),o($Vh8,$VI8),o($VI,$VJ,{63:4155,73:4156,75:4157,76:4158,92:4161,94:4162,87:4164,88:4165,89:4166,78:4167,44:4168,95:4172,22:4173,91:4175,118:4176,99:4180,219:4183,105:4184,107:4185,19:[1,4182],21:[1,4187],69:[1,4159],71:[1,4160],79:[1,4177],80:[1,4178],81:[1,4179],85:[1,4163],96:[1,4169],97:[1,4170],98:[1,4171],101:$Vz9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4174],220:[1,4186]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4188,121:$VW2,148:$VX2,194:$VY2}),o($Vh8,$VA2),o($Vh8,$Vw),o($Vh8,$Vx),o($Vh8,$Vn),o($Vh8,$Vo),o($Vh8,$Vy),o($Vh8,$Vp),o($Vh8,$Vq),o($Vh8,$Vs2,{99:3451,95:4189,101:$VN8,102:$VR,103:$VS,104:$VT}),o($Va9,$Vt2),o($Va9,$V13),o($Vh8,$VK8),o($VO8,$VP3),o($VQ8,$VQ3),o($VQ8,$VR3),o($VQ8,$VS3),{100:[1,4190]},o($VQ8,$VT1),{100:[1,4192],106:4191,108:[1,4193],109:[1,4194],110:4195,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4196]},o($VQ8,$VU3),{121:[1,4197]},{19:[1,4200],21:[1,4203],22:4199,87:4198,219:4201,220:[1,4202]},o($Vw9,$Vp2,{84:4113,197:4114,83:4204,195:$Vx9}),o($VG,$VT3),{121:[1,4205]},o($VG,$VH3),o($Vh2,$VP3),o($Vo2,$VO4),{19:$Vi,21:$Vj,22:4206,219:45,220:$Vk},{19:$VA9,21:$VB9,22:4208,100:[1,4219],108:[1,4220],109:[1,4221],110:4218,186:4209,196:4207,201:4212,202:4213,203:4214,206:4217,209:[1,4222],210:[1,4223],211:[1,4228],212:[1,4229],213:[1,4230],214:[1,4231],215:[1,4224],216:[1,4225],217:[1,4226],218:[1,4227],219:4211,220:$VC9},o($Vq2,$VO4),{19:$Vi,21:$Vj,22:4232,219:45,220:$Vk},{19:$VD9,21:$VE9,22:4234,100:[1,4245],108:[1,4246],109:[1,4247],110:4244,186:4235,196:4233,201:4238,202:4239,203:4240,206:4243,209:[1,4248],210:[1,4249],211:[1,4254],212:[1,4255],213:[1,4256],214:[1,4257],215:[1,4250],216:[1,4251],217:[1,4252],218:[1,4253],219:4237,220:$VF9},o($VA1,$V13),o($VA1,$V23),o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),{111:[1,4258]},o($VA1,$Va3),o($Vz2,$VO4),{19:$Vi,21:$Vj,22:4259,219:45,220:$Vk},{19:$VG9,21:$VH9,22:4261,100:[1,4272],108:[1,4273],109:[1,4274],110:4271,186:4262,196:4260,201:4265,202:4266,203:4267,206:4270,209:[1,4275],210:[1,4276],211:[1,4281],212:[1,4282],213:[1,4283],214:[1,4284],215:[1,4277],216:[1,4278],217:[1,4279],218:[1,4280],219:4264,220:$VI9},o($VD1,$Vk5),o($VN1,$VD5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$VV8,21:$VW8,22:4286,87:4285,219:3570,220:$VX8},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$VY8,21:$VZ8,22:4288,87:4287,219:3596,220:$V_8},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$V$8,21:$V09,22:4290,87:4289,219:3623,220:$V19},o($VA3,$Vk5),{198:[1,4293],199:4291,200:[1,4292]},o($Vz3,$VP5),o($Vz3,$VQ5),o($Vz3,$VR5),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$VX3),o($Vz3,$VY3),o($Vz3,$VZ3),o($Vz3,$Vp),o($Vz3,$Vq),o($Vz3,$V_3),o($Vz3,$V$3,{207:4294,208:4295,111:[1,4296]}),o($Vz3,$V04),o($Vz3,$V14),o($Vz3,$V24),o($Vz3,$V34),o($Vz3,$V44),o($Vz3,$V54),o($Vz3,$V64),o($Vz3,$V74),o($Vz3,$V84),o($Ve7,$V63),o($Ve7,$V73),o($Ve7,$V83),o($Ve7,$V93),{198:[1,4299],199:4297,200:[1,4298]},o($VA3,$VP5),o($VA3,$VQ5),o($VA3,$VR5),o($VA3,$Vn),o($VA3,$Vo),o($VA3,$VX3),o($VA3,$VY3),o($VA3,$VZ3),o($VA3,$Vp),o($VA3,$Vq),o($VA3,$V_3),o($VA3,$V$3,{207:4300,208:4301,111:[1,4302]}),o($VA3,$V04),o($VA3,$V14),o($VA3,$V24),o($VA3,$V34),o($VA3,$V44),o($VA3,$V54),o($VA3,$V64),o($VA3,$V74),o($VA3,$V84),o($Vf7,$V63),o($Vf7,$V73),o($Vf7,$V83),o($Vf7,$V93),{19:[1,4305],21:[1,4308],22:4304,87:4303,219:4306,220:[1,4307]},{198:[1,4311],199:4309,200:[1,4310]},o($VB3,$VP5),o($VB3,$VQ5),o($VB3,$VR5),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VX3),o($VB3,$VY3),o($VB3,$VZ3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V_3),o($VB3,$V$3,{207:4312,208:4313,111:[1,4314]}),o($VB3,$V04),o($VB3,$V14),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($Vg7,$V63),o($Vg7,$V73),o($Vg7,$V83),o($Vg7,$V93),{198:[1,4317],199:4315,200:[1,4316]},o($Vi7,$VP5),o($Vi7,$VQ5),o($Vi7,$VR5),o($Vi7,$Vn),o($Vi7,$Vo),o($Vi7,$VX3),o($Vi7,$VY3),o($Vi7,$VZ3),o($Vi7,$Vp),o($Vi7,$Vq),o($Vi7,$V_3),o($Vi7,$V$3,{207:4318,208:4319,111:[1,4320]}),o($Vi7,$V04),o($Vi7,$V14),o($Vi7,$V24),o($Vi7,$V34),o($Vi7,$V44),o($Vi7,$V54),o($Vi7,$V64),o($Vi7,$V74),o($Vi7,$V84),o($VJ9,$V63),o($VJ9,$V73),o($VJ9,$V83),o($VJ9,$V93),o($V49,$V28),o($Vr,$Vs,{55:4321,59:4322,40:4323,43:$Vt}),o($V59,$V38),o($Vr,$Vs,{59:4324,40:4325,43:$Vt}),o($V59,$V48),o($V59,$V58),o($V59,$VC7),o($V59,$VD7),{119:[1,4326],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V59,$VE1),o($V59,$VF1),{19:[1,4330],21:[1,4334],22:4328,33:4327,205:4329,219:4331,220:[1,4333],221:[1,4332]},o($V59,$V68),o($V59,$V78),o($VK9,$Vy1,{93:4335}),o($V59,$Vz1,{99:4030,95:4336,101:$Vo9,102:$VR,103:$VS,104:$VT}),o($VK9,$VG1),o($VK9,$VH1),o($VK9,$VI1),o($VK9,$VJ1),{100:[1,4337]},o($VK9,$VT1),{70:[1,4338]},o($Vq9,$Vs2,{99:3713,95:4339,101:$V69,102:$VR,103:$VS,104:$VT}),o($Vp9,$Vt2),o($V59,$Vu2,{90:4340,95:4341,91:4342,99:4343,105:4345,107:4346,101:$VL9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vw2,{90:4340,95:4341,91:4342,99:4343,105:4345,107:4346,101:$VL9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vx2,{90:4340,95:4341,91:4342,99:4343,105:4345,107:4346,101:$VL9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt9,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4347],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4348,121:$VW2,148:$VX2,194:$VY2}),o($Vs9,$VA2),o($Vs9,$Vw),o($Vs9,$Vx),o($Vs9,$Vn),o($Vs9,$Vo),o($Vs9,$Vy),o($Vs9,$Vp),o($Vs9,$Vq),o($Vp9,$V13),o($Vt9,$V23),o($Vt9,$V33),o($Vt9,$V43),o($Vt9,$V53),{111:[1,4349]},o($Vt9,$Va3),o($VM6,$VI8),o($VI,$VJ,{63:4350,73:4351,75:4352,76:4353,92:4356,94:4357,87:4359,88:4360,89:4361,78:4362,44:4363,95:4367,22:4368,91:4370,118:4371,99:4375,219:4378,105:4379,107:4380,19:[1,4377],21:[1,4382],69:[1,4354],71:[1,4355],79:[1,4372],80:[1,4373],81:[1,4374],85:[1,4358],96:[1,4364],97:[1,4365],98:[1,4366],101:$VM9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4369],220:[1,4381]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4383,121:$VW2,148:$VX2,194:$VY2}),o($VM6,$VA2),o($VM6,$Vw),o($VM6,$Vx),o($VM6,$Vn),o($VM6,$Vo),o($VM6,$Vy),o($VM6,$Vp),o($VM6,$Vq),o($VM6,$Vs2,{99:3739,95:4384,101:$V79,102:$VR,103:$VS,104:$VT}),o($V88,$Vt2),o($V88,$V13),o($VM6,$VK8),o($Vy7,$VP3),o($VA7,$VQ3),o($VA7,$VR3),o($VA7,$VS3),{100:[1,4385]},o($VA7,$VT1),{100:[1,4387],106:4386,108:[1,4388],109:[1,4389],110:4390,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4391]},o($VA7,$VU3),{121:[1,4392]},{19:[1,4395],21:[1,4398],22:4394,87:4393,219:4396,220:[1,4397]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4399,121:$VW2,148:$VX2,194:$VY2}),o($VM6,$VA2),o($VM6,$Vw),o($VM6,$Vx),o($VM6,$Vn),o($VM6,$Vo),o($VM6,$Vy),o($VM6,$Vp),o($VM6,$Vq),o($VM6,$Vs2,{99:3781,95:4400,101:$V89,102:$VR,103:$VS,104:$VT}),o($V88,$Vt2),o($V88,$V13),o($VM6,$VK8),o($Vy7,$VP3),o($VA7,$VQ3),o($VA7,$VR3),o($VA7,$VS3),{100:[1,4401]},o($VA7,$VT1),{100:[1,4403],106:4402,108:[1,4404],109:[1,4405],110:4406,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4407]},o($VA7,$VU3),{121:[1,4408]},{19:[1,4411],21:[1,4414],22:4410,87:4409,219:4412,220:[1,4413]},o($VA7,$VD5),o($VA7,$VK1),o($VA7,$Vn),o($VA7,$Vo),o($VA7,$Vp),o($VA7,$Vq),o($V96,$V29),o($VL8,$VI3),o($V96,$VJ3,{31:4415,198:[1,4416]}),{19:$VK3,21:$VL3,22:643,129:4417,204:$VM3,219:646,220:$VN3},o($VL8,$V39),o($VL8,$VJ6),o($VN9,$VL6,{56:4418}),o($VO9,$VN6,{60:4419}),o($VI,$VJ,{63:4420,73:4421,75:4422,76:4423,92:4426,94:4427,87:4429,88:4430,89:4431,78:4432,44:4433,95:4437,22:4438,91:4440,118:4441,99:4445,219:4448,105:4449,107:4450,19:[1,4447],21:[1,4452],69:[1,4424],71:[1,4425],79:[1,4442],80:[1,4443],81:[1,4444],85:[1,4428],96:[1,4434],97:[1,4435],98:[1,4436],101:$VP9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4439],220:[1,4451]}),o($Vg8,$Vr7,{61:4453,53:[1,4454]}),o($Vh8,$Vs7),o($Vh8,$Vt7,{74:4455,76:4456,78:4457,44:4458,118:4459,79:[1,4460],80:[1,4461],81:[1,4462],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($Vh8,$Vu7),o($Vh8,$Vv7,{77:4463,73:4464,92:4465,94:4466,95:4470,99:4471,96:[1,4467],97:[1,4468],98:[1,4469],101:$VQ9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4473,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vh8,$Vx7),o($VO8,$Vy1,{93:4474}),o($VP8,$Vz1,{99:4147,95:4475,101:$Vy9,102:$VR,103:$VS,104:$VT}),o($VQ8,$VB1,{86:4476}),o($VQ8,$VB1,{86:4477}),o($VQ8,$VB1,{86:4478}),o($Vh8,$VC1,{105:4151,107:4152,91:4479,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VR8,$VC7),o($VR8,$VD7),o($VO8,$VG1),o($VO8,$VH1),o($VO8,$VI1),o($VO8,$VJ1),o($VQ8,$VK1),o($VL1,$VM1,{167:4480}),o($VS8,$VO1),{119:[1,4481],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VR8,$VE1),o($VR8,$VF1),{19:[1,4485],21:[1,4489],22:4483,33:4482,205:4484,219:4486,220:[1,4488],221:[1,4487]},{100:[1,4490]},o($VO8,$VT1),o($VQ8,$Vn),o($VQ8,$Vo),{100:[1,4492],106:4491,108:[1,4493],109:[1,4494],110:4495,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4496]},o($VQ8,$Vp),o($VQ8,$Vq),o($Vh8,$Vs7),o($Vh8,$Vt7,{74:4497,76:4498,78:4499,44:4500,118:4501,79:[1,4502],80:[1,4503],81:[1,4504],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($Vh8,$Vu7),o($Vh8,$Vv7,{77:4505,73:4506,92:4507,94:4508,95:4512,99:4513,96:[1,4509],97:[1,4510],98:[1,4511],101:$VR9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4515,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vh8,$Vx7),o($VO8,$Vy1,{93:4516}),o($VP8,$Vz1,{99:4180,95:4517,101:$Vz9,102:$VR,103:$VS,104:$VT}),o($VQ8,$VB1,{86:4518}),o($VQ8,$VB1,{86:4519}),o($VQ8,$VB1,{86:4520}),o($Vh8,$VC1,{105:4184,107:4185,91:4521,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VR8,$VC7),o($VR8,$VD7),o($VO8,$VG1),o($VO8,$VH1),o($VO8,$VI1),o($VO8,$VJ1),o($VQ8,$VK1),o($VL1,$VM1,{167:4522}),o($VS8,$VO1),{119:[1,4523],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VR8,$VE1),o($VR8,$VF1),{19:[1,4527],21:[1,4531],22:4525,33:4524,205:4526,219:4528,220:[1,4530],221:[1,4529]},{100:[1,4532]},o($VO8,$VT1),o($VQ8,$Vn),o($VQ8,$Vo),{100:[1,4534],106:4533,108:[1,4535],109:[1,4536],110:4537,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4538]},o($VQ8,$Vp),o($VQ8,$Vq),{121:[1,4539]},o($Va9,$VP3),o($VQ8,$V13),o($VQ8,$V23),o($VQ8,$V33),o($VQ8,$V43),o($VQ8,$V53),{111:[1,4540]},o($VQ8,$Va3),o($VR8,$Vk5),o($VS8,$VD5),o($VS8,$VK1),o($VS8,$Vn),o($VS8,$Vo),o($VS8,$Vp),o($VS8,$Vq),o($V96,$V99),o($Vt1,$Vk5),{198:[1,4543],199:4541,200:[1,4542]},o($Vr1,$VP5),o($Vr1,$VQ5),o($Vr1,$VR5),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VX3),o($Vr1,$VY3),o($Vr1,$VZ3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V_3),o($Vr1,$V$3,{207:4544,208:4545,111:[1,4546]}),o($Vr1,$V04),o($Vr1,$V14),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($VS5,$V63),o($VS5,$V73),o($VS5,$V83),o($VS5,$V93),{198:[1,4549],199:4547,200:[1,4548]},o($Vt1,$VP5),o($Vt1,$VQ5),o($Vt1,$VR5),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VX3),o($Vt1,$VY3),o($Vt1,$VZ3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V_3),o($Vt1,$V$3,{207:4550,208:4551,111:[1,4552]}),o($Vt1,$V04),o($Vt1,$V14),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($VT5,$V63),o($VT5,$V73),o($VT5,$V83),o($VT5,$V93),{19:[1,4555],21:[1,4558],22:4554,87:4553,219:4556,220:[1,4557]},{198:[1,4561],199:4559,200:[1,4560]},o($VD1,$VP5),o($VD1,$VQ5),o($VD1,$VR5),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VX3),o($VD1,$VY3),o($VD1,$VZ3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V_3),o($VD1,$V$3,{207:4562,208:4563,111:[1,4564]}),o($VD1,$V04),o($VD1,$V14),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VU5,$V63),o($VU5,$V73),o($VU5,$V83),o($VU5,$V93),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($VH4,$V71),o($VH4,$V81),o($VH4,$V91),o($Vz3,$Vi5),o($Vz3,$Vj5),{19:$Vc9,21:$Vd9,22:4566,87:4565,219:3910,220:$Ve9},o($VI4,$V71),o($VI4,$V81),o($VI4,$V91),o($VA3,$Vi5),o($VA3,$Vj5),{19:$Vf9,21:$Vg9,22:4568,87:4567,219:3936,220:$Vh9},o($VD3,$VD5),o($VD3,$VK1),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$Vp),o($VD3,$Vq),o($VK4,$V71),o($VK4,$V81),o($VK4,$V91),o($VB3,$Vi5),o($VB3,$Vj5),{19:$Vi9,21:$Vj9,22:4570,87:4569,219:3963,220:$Vk9},o($VE8,$V71),o($VE8,$V81),o($VE8,$V91),o($Vi7,$Vi5),o($Vi7,$Vj5),{19:$Vl9,21:$Vm9,22:4572,87:4571,219:3989,220:$Vn9},o($V49,$VG8),o($V59,$VN6,{60:4573}),o($VI,$VJ,{63:4574,73:4575,75:4576,76:4577,92:4580,94:4581,87:4583,88:4584,89:4585,78:4586,44:4587,95:4591,22:4592,91:4594,118:4595,99:4599,219:4602,105:4603,107:4604,19:[1,4601],21:[1,4606],69:[1,4578],71:[1,4579],79:[1,4596],80:[1,4597],81:[1,4598],85:[1,4582],96:[1,4588],97:[1,4589],98:[1,4590],101:$VS9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4593],220:[1,4605]}),o($V59,$VI8),o($VI,$VJ,{63:4607,73:4608,75:4609,76:4610,92:4613,94:4614,87:4616,88:4617,89:4618,78:4619,44:4620,95:4624,22:4625,91:4627,118:4628,99:4632,219:4635,105:4636,107:4637,19:[1,4634],21:[1,4639],69:[1,4611],71:[1,4612],79:[1,4629],80:[1,4630],81:[1,4631],85:[1,4615],96:[1,4621],97:[1,4622],98:[1,4623],101:$VT9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,4626],220:[1,4638]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4640,121:$VW2,148:$VX2,194:$VY2}),o($V59,$VA2),o($V59,$Vw),o($V59,$Vx),o($V59,$Vn),o($V59,$Vo),o($V59,$Vy),o($V59,$Vp),o($V59,$Vq),o($V59,$Vs2,{99:4030,95:4641,101:$Vo9,102:$VR,103:$VS,104:$VT}),o($VK9,$Vt2),o($VK9,$V13),o($V59,$VK8),o($Vp9,$VP3),o($Vr9,$VQ3),o($Vr9,$VR3),o($Vr9,$VS3),{100:[1,4642]},o($Vr9,$VT1),{100:[1,4644],106:4643,108:[1,4645],109:[1,4646],110:4647,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4648]},o($Vr9,$VU3),{121:[1,4649]},{19:[1,4652],21:[1,4655],22:4651,87:4650,219:4653,220:[1,4654]},o($VM6,$Vs7),o($VM6,$Vt7,{74:4656,76:4657,78:4658,44:4659,118:4660,79:[1,4661],80:[1,4662],81:[1,4663],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VM6,$Vu7),o($VM6,$Vv7,{77:4664,73:4665,92:4666,94:4667,95:4671,99:4672,96:[1,4668],97:[1,4669],98:[1,4670],101:$VU9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4674,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VM6,$Vx7),o($Vy7,$Vy1,{93:4675}),o($Vz7,$Vz1,{99:4375,95:4676,101:$VM9,102:$VR,103:$VS,104:$VT}),o($VA7,$VB1,{86:4677}),o($VA7,$VB1,{86:4678}),o($VA7,$VB1,{86:4679}),o($VM6,$VC1,{105:4379,107:4380,91:4680,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VB7,$VC7),o($VB7,$VD7),o($Vy7,$VG1),o($Vy7,$VH1),o($Vy7,$VI1),o($Vy7,$VJ1),o($VA7,$VK1),o($VL1,$VM1,{167:4681}),o($VE7,$VO1),{119:[1,4682],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VB7,$VE1),o($VB7,$VF1),{19:[1,4686],21:[1,4690],22:4684,33:4683,205:4685,219:4687,220:[1,4689],221:[1,4688]},{100:[1,4691]},o($Vy7,$VT1),o($VA7,$Vn),o($VA7,$Vo),{100:[1,4693],106:4692,108:[1,4694],109:[1,4695],110:4696,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4697]},o($VA7,$Vp),o($VA7,$Vq),{121:[1,4698]},o($V88,$VP3),o($VA7,$V13),o($VA7,$V23),o($VA7,$V33),o($VA7,$V43),o($VA7,$V53),{111:[1,4699]},o($VA7,$Va3),o($VB7,$Vk5),o($VE7,$VD5),o($VE7,$VK1),o($VE7,$Vn),o($VE7,$Vo),o($VE7,$Vp),o($VE7,$Vq),{121:[1,4700]},o($V88,$VP3),o($VA7,$V13),o($VA7,$V23),o($VA7,$V33),o($VA7,$V43),o($VA7,$V53),{111:[1,4701]},o($VA7,$Va3),o($VB7,$Vk5),o($VE7,$VD5),o($VE7,$VK1),o($VE7,$Vn),o($VE7,$Vo),o($VE7,$Vp),o($VE7,$Vq),o($Vw9,$VO4),{19:$Vi,21:$Vj,22:4702,219:45,220:$Vk},{19:$VV9,21:$VW9,22:4704,100:[1,4715],108:[1,4716],109:[1,4717],110:4714,186:4705,196:4703,201:4708,202:4709,203:4710,206:4713,209:[1,4718],210:[1,4719],211:[1,4724],212:[1,4725],213:[1,4726],214:[1,4727],215:[1,4720],216:[1,4721],217:[1,4722],218:[1,4723],219:4707,220:$VX9},o($VL8,$Vq7,{57:4728,51:[1,4729]}),o($VN9,$Vr7,{61:4730,53:[1,4731]}),o($VO9,$Vs7),o($VO9,$Vt7,{74:4732,76:4733,78:4734,44:4735,118:4736,79:[1,4737],80:[1,4738],81:[1,4739],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VO9,$Vu7),o($VO9,$Vv7,{77:4740,73:4741,92:4742,94:4743,95:4747,99:4748,96:[1,4744],97:[1,4745],98:[1,4746],101:$VY9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4750,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VO9,$Vx7),o($VZ9,$Vy1,{93:4751}),o($V_9,$Vz1,{99:4445,95:4752,101:$VP9,102:$VR,103:$VS,104:$VT}),o($V$9,$VB1,{86:4753}),o($V$9,$VB1,{86:4754}),o($V$9,$VB1,{86:4755}),o($VO9,$VC1,{105:4449,107:4450,91:4756,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V0a,$VC7),o($V0a,$VD7),o($VZ9,$VG1),o($VZ9,$VH1),o($VZ9,$VI1),o($VZ9,$VJ1),o($V$9,$VK1),o($VL1,$VM1,{167:4757}),o($V1a,$VO1),{119:[1,4758],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V0a,$VE1),o($V0a,$VF1),{19:[1,4762],21:[1,4766],22:4760,33:4759,205:4761,219:4763,220:[1,4765],221:[1,4764]},{100:[1,4767]},o($VZ9,$VT1),o($V$9,$Vn),o($V$9,$Vo),{100:[1,4769],106:4768,108:[1,4770],109:[1,4771],110:4772,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4773]},o($V$9,$Vp),o($V$9,$Vq),o($Vh8,$V38),o($Vr,$Vs,{59:4774,40:4775,43:$Vt}),o($Vh8,$V48),o($Vh8,$V58),o($Vh8,$VC7),o($Vh8,$VD7),{119:[1,4776],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vh8,$VE1),o($Vh8,$VF1),{19:[1,4780],21:[1,4784],22:4778,33:4777,205:4779,219:4781,220:[1,4783],221:[1,4782]},o($Vh8,$V68),o($Vh8,$V78),o($Va9,$Vy1,{93:4785}),o($Vh8,$Vz1,{99:4471,95:4786,101:$VQ9,102:$VR,103:$VS,104:$VT}),o($Va9,$VG1),o($Va9,$VH1),o($Va9,$VI1),o($Va9,$VJ1),{100:[1,4787]},o($Va9,$VT1),{70:[1,4788]},o($VP8,$Vs2,{99:4147,95:4789,101:$Vy9,102:$VR,103:$VS,104:$VT}),o($VO8,$Vt2),o($Vh8,$Vu2,{90:4790,95:4791,91:4792,99:4793,105:4795,107:4796,101:$V2a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vw2,{90:4790,95:4791,91:4792,99:4793,105:4795,107:4796,101:$V2a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vx2,{90:4790,95:4791,91:4792,99:4793,105:4795,107:4796,101:$V2a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS8,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4797],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4798,121:$VW2,148:$VX2,194:$VY2}),o($VR8,$VA2),o($VR8,$Vw),o($VR8,$Vx),o($VR8,$Vn),o($VR8,$Vo),o($VR8,$Vy),o($VR8,$Vp),o($VR8,$Vq),o($VO8,$V13),o($VS8,$V23),o($VS8,$V33),o($VS8,$V43),o($VS8,$V53),{111:[1,4799]},o($VS8,$Va3),o($Vh8,$V48),o($Vh8,$V58),o($Vh8,$VC7),o($Vh8,$VD7),{119:[1,4800],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vh8,$VE1),o($Vh8,$VF1),{19:[1,4804],21:[1,4808],22:4802,33:4801,205:4803,219:4805,220:[1,4807],221:[1,4806]},o($Vh8,$V68),o($Vh8,$V78),o($Va9,$Vy1,{93:4809}),o($Vh8,$Vz1,{99:4513,95:4810,101:$VR9,102:$VR,103:$VS,104:$VT}),o($Va9,$VG1),o($Va9,$VH1),o($Va9,$VI1),o($Va9,$VJ1),{100:[1,4811]},o($Va9,$VT1),{70:[1,4812]},o($VP8,$Vs2,{99:4180,95:4813,101:$Vz9,102:$VR,103:$VS,104:$VT}),o($VO8,$Vt2),o($Vh8,$Vu2,{90:4814,95:4815,91:4816,99:4817,105:4819,107:4820,101:$V3a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vw2,{90:4814,95:4815,91:4816,99:4817,105:4819,107:4820,101:$V3a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vx2,{90:4814,95:4815,91:4816,99:4817,105:4819,107:4820,101:$V3a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS8,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4821],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4822,121:$VW2,148:$VX2,194:$VY2}),o($VR8,$VA2),o($VR8,$Vw),o($VR8,$Vx),o($VR8,$Vn),o($VR8,$Vo),o($VR8,$Vy),o($VR8,$Vp),o($VR8,$Vq),o($VO8,$V13),o($VS8,$V23),o($VS8,$V33),o($VS8,$V43),o($VS8,$V53),{111:[1,4823]},o($VS8,$Va3),o($Vh8,$Vk5),{19:[1,4826],21:[1,4829],22:4825,87:4824,219:4827,220:[1,4828]},o($Vo2,$V71),o($Vo2,$V81),o($Vo2,$V91),o($Vr1,$Vi5),o($Vr1,$Vj5),{19:$VA9,21:$VB9,22:4831,87:4830,219:4211,220:$VC9},o($Vq2,$V71),o($Vq2,$V81),o($Vq2,$V91),o($Vt1,$Vi5),o($Vt1,$Vj5),{19:$VD9,21:$VE9,22:4833,87:4832,219:4237,220:$VF9},o($VA1,$VD5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($Vz2,$V71),o($Vz2,$V81),o($Vz2,$V91),o($VD1,$Vi5),o($VD1,$Vj5),{19:$VG9,21:$VH9,22:4835,87:4834,219:4264,220:$VI9},o($Vz3,$VZ5),o($Vz3,$VK1),o($VA3,$VZ5),o($VA3,$VK1),o($VB3,$VZ5),o($VB3,$VK1),o($Vi7,$VZ5),o($Vi7,$VK1),o($V49,$Vr7,{61:4836,53:[1,4837]}),o($V59,$Vs7),o($V59,$Vt7,{74:4838,76:4839,78:4840,44:4841,118:4842,79:[1,4843],80:[1,4844],81:[1,4845],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($V59,$Vu7),o($V59,$Vv7,{77:4846,73:4847,92:4848,94:4849,95:4853,99:4854,96:[1,4850],97:[1,4851],98:[1,4852],101:$V4a,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4856,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($V59,$Vx7),o($Vp9,$Vy1,{93:4857}),o($Vq9,$Vz1,{99:4599,95:4858,101:$VS9,102:$VR,103:$VS,104:$VT}),o($Vr9,$VB1,{86:4859}),o($Vr9,$VB1,{86:4860}),o($Vr9,$VB1,{86:4861}),o($V59,$VC1,{105:4603,107:4604,91:4862,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs9,$VC7),o($Vs9,$VD7),o($Vp9,$VG1),o($Vp9,$VH1),o($Vp9,$VI1),o($Vp9,$VJ1),o($Vr9,$VK1),o($VL1,$VM1,{167:4863}),o($Vt9,$VO1),{119:[1,4864],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vs9,$VE1),o($Vs9,$VF1),{19:[1,4868],21:[1,4872],22:4866,33:4865,205:4867,219:4869,220:[1,4871],221:[1,4870]},{100:[1,4873]},o($Vp9,$VT1),o($Vr9,$Vn),o($Vr9,$Vo),{100:[1,4875],106:4874,108:[1,4876],109:[1,4877],110:4878,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4879]},o($Vr9,$Vp),o($Vr9,$Vq),o($V59,$Vs7),o($V59,$Vt7,{74:4880,76:4881,78:4882,44:4883,118:4884,79:[1,4885],80:[1,4886],81:[1,4887],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($V59,$Vu7),o($V59,$Vv7,{77:4888,73:4889,92:4890,94:4891,95:4895,99:4896,96:[1,4892],97:[1,4893],98:[1,4894],101:$V5a,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:4898,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($V59,$Vx7),o($Vp9,$Vy1,{93:4899}),o($Vq9,$Vz1,{99:4632,95:4900,101:$VT9,102:$VR,103:$VS,104:$VT}),o($Vr9,$VB1,{86:4901}),o($Vr9,$VB1,{86:4902}),o($Vr9,$VB1,{86:4903}),o($V59,$VC1,{105:4636,107:4637,91:4904,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs9,$VC7),o($Vs9,$VD7),o($Vp9,$VG1),o($Vp9,$VH1),o($Vp9,$VI1),o($Vp9,$VJ1),o($Vr9,$VK1),o($VL1,$VM1,{167:4905}),o($Vt9,$VO1),{119:[1,4906],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vs9,$VE1),o($Vs9,$VF1),{19:[1,4910],21:[1,4914],22:4908,33:4907,205:4909,219:4911,220:[1,4913],221:[1,4912]},{100:[1,4915]},o($Vp9,$VT1),o($Vr9,$Vn),o($Vr9,$Vo),{100:[1,4917],106:4916,108:[1,4918],109:[1,4919],110:4920,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,4921]},o($Vr9,$Vp),o($Vr9,$Vq),{121:[1,4922]},o($VK9,$VP3),o($Vr9,$V13),o($Vr9,$V23),o($Vr9,$V33),o($Vr9,$V43),o($Vr9,$V53),{111:[1,4923]},o($Vr9,$Va3),o($Vs9,$Vk5),o($Vt9,$VD5),o($Vt9,$VK1),o($Vt9,$Vn),o($Vt9,$Vo),o($Vt9,$Vp),o($Vt9,$Vq),o($VM6,$V48),o($VM6,$V58),o($VM6,$VC7),o($VM6,$VD7),{119:[1,4924],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VM6,$VE1),o($VM6,$VF1),{19:[1,4928],21:[1,4932],22:4926,33:4925,205:4927,219:4929,220:[1,4931],221:[1,4930]},o($VM6,$V68),o($VM6,$V78),o($V88,$Vy1,{93:4933}),o($VM6,$Vz1,{99:4672,95:4934,101:$VU9,102:$VR,103:$VS,104:$VT}),o($V88,$VG1),o($V88,$VH1),o($V88,$VI1),o($V88,$VJ1),{100:[1,4935]},o($V88,$VT1),{70:[1,4936]},o($Vz7,$Vs2,{99:4375,95:4937,101:$VM9,102:$VR,103:$VS,104:$VT}),o($Vy7,$Vt2),o($VM6,$Vu2,{90:4938,95:4939,91:4940,99:4941,105:4943,107:4944,101:$V6a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vw2,{90:4938,95:4939,91:4940,99:4941,105:4943,107:4944,101:$V6a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VM6,$Vx2,{90:4938,95:4939,91:4940,99:4941,105:4943,107:4944,101:$V6a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VE7,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4945],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4946,121:$VW2,148:$VX2,194:$VY2}),o($VB7,$VA2),o($VB7,$Vw),o($VB7,$Vx),o($VB7,$Vn),o($VB7,$Vo),o($VB7,$Vy),o($VB7,$Vp),o($VB7,$Vq),o($Vy7,$V13),o($VE7,$V23),o($VE7,$V33),o($VE7,$V43),o($VE7,$V53),{111:[1,4947]},o($VE7,$Va3),o($VM6,$Vk5),{19:[1,4950],21:[1,4953],22:4949,87:4948,219:4951,220:[1,4952]},o($VM6,$Vk5),{19:[1,4956],21:[1,4959],22:4955,87:4954,219:4957,220:[1,4958]},{198:[1,4962],199:4960,200:[1,4961]},o($VL8,$VP5),o($VL8,$VQ5),o($VL8,$VR5),o($VL8,$Vn),o($VL8,$Vo),o($VL8,$VX3),o($VL8,$VY3),o($VL8,$VZ3),o($VL8,$Vp),o($VL8,$Vq),o($VL8,$V_3),o($VL8,$V$3,{207:4963,208:4964,111:[1,4965]}),o($VL8,$V04),o($VL8,$V14),o($VL8,$V24),o($VL8,$V34),o($VL8,$V44),o($VL8,$V54),o($VL8,$V64),o($VL8,$V74),o($VL8,$V84),o($V7a,$V63),o($V7a,$V73),o($V7a,$V83),o($V7a,$V93),o($VN9,$V28),o($Vr,$Vs,{55:4966,59:4967,40:4968,43:$Vt}),o($VO9,$V38),o($Vr,$Vs,{59:4969,40:4970,43:$Vt}),o($VO9,$V48),o($VO9,$V58),o($VO9,$VC7),o($VO9,$VD7),{119:[1,4971],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VO9,$VE1),o($VO9,$VF1),{19:[1,4975],21:[1,4979],22:4973,33:4972,205:4974,219:4976,220:[1,4978],221:[1,4977]},o($VO9,$V68),o($VO9,$V78),o($V8a,$Vy1,{93:4980}),o($VO9,$Vz1,{99:4748,95:4981,101:$VY9,102:$VR,103:$VS,104:$VT}),o($V8a,$VG1),o($V8a,$VH1),o($V8a,$VI1),o($V8a,$VJ1),{100:[1,4982]},o($V8a,$VT1),{70:[1,4983]},o($V_9,$Vs2,{99:4445,95:4984,101:$VP9,102:$VR,103:$VS,104:$VT}),o($VZ9,$Vt2),o($VO9,$Vu2,{90:4985,95:4986,91:4987,99:4988,105:4990,107:4991,101:$V9a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vw2,{90:4985,95:4986,91:4987,99:4988,105:4990,107:4991,101:$V9a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vx2,{90:4985,95:4986,91:4987,99:4988,105:4990,107:4991,101:$V9a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V1a,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,4992],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:4993,121:$VW2,148:$VX2,194:$VY2}),o($V0a,$VA2),o($V0a,$Vw),o($V0a,$Vx),o($V0a,$Vn),o($V0a,$Vo),o($V0a,$Vy),o($V0a,$Vp),o($V0a,$Vq),o($VZ9,$V13),o($V1a,$V23),o($V1a,$V33),o($V1a,$V43),o($V1a,$V53),{111:[1,4994]},o($V1a,$Va3),o($Vh8,$VI8),o($VI,$VJ,{63:4995,73:4996,75:4997,76:4998,92:5001,94:5002,87:5004,88:5005,89:5006,78:5007,44:5008,95:5012,22:5013,91:5015,118:5016,99:5020,219:5023,105:5024,107:5025,19:[1,5022],21:[1,5027],69:[1,4999],71:[1,5000],79:[1,5017],80:[1,5018],81:[1,5019],85:[1,5003],96:[1,5009],97:[1,5010],98:[1,5011],101:$Vaa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5014],220:[1,5026]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5028,121:$VW2,148:$VX2,194:$VY2}),o($Vh8,$VA2),o($Vh8,$Vw),o($Vh8,$Vx),o($Vh8,$Vn),o($Vh8,$Vo),o($Vh8,$Vy),o($Vh8,$Vp),o($Vh8,$Vq),o($Vh8,$Vs2,{99:4471,95:5029,101:$VQ9,102:$VR,103:$VS,104:$VT}),o($Va9,$Vt2),o($Va9,$V13),o($Vh8,$VK8),o($VO8,$VP3),o($VQ8,$VQ3),o($VQ8,$VR3),o($VQ8,$VS3),{100:[1,5030]},o($VQ8,$VT1),{100:[1,5032],106:5031,108:[1,5033],109:[1,5034],110:5035,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5036]},o($VQ8,$VU3),{121:[1,5037]},{19:[1,5040],21:[1,5043],22:5039,87:5038,219:5041,220:[1,5042]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5044,121:$VW2,148:$VX2,194:$VY2}),o($Vh8,$VA2),o($Vh8,$Vw),o($Vh8,$Vx),o($Vh8,$Vn),o($Vh8,$Vo),o($Vh8,$Vy),o($Vh8,$Vp),o($Vh8,$Vq),o($Vh8,$Vs2,{99:4513,95:5045,101:$VR9,102:$VR,103:$VS,104:$VT}),o($Va9,$Vt2),o($Va9,$V13),o($Vh8,$VK8),o($VO8,$VP3),o($VQ8,$VQ3),o($VQ8,$VR3),o($VQ8,$VS3),{100:[1,5046]},o($VQ8,$VT1),{100:[1,5048],106:5047,108:[1,5049],109:[1,5050],110:5051,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5052]},o($VQ8,$VU3),{121:[1,5053]},{19:[1,5056],21:[1,5059],22:5055,87:5054,219:5057,220:[1,5058]},o($VQ8,$VD5),o($VQ8,$VK1),o($VQ8,$Vn),o($VQ8,$Vo),o($VQ8,$Vp),o($VQ8,$Vq),o($Vr1,$VZ5),o($Vr1,$VK1),o($Vt1,$VZ5),o($Vt1,$VK1),o($VD1,$VZ5),o($VD1,$VK1),o($V59,$V38),o($Vr,$Vs,{59:5060,40:5061,43:$Vt}),o($V59,$V48),o($V59,$V58),o($V59,$VC7),o($V59,$VD7),{119:[1,5062],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V59,$VE1),o($V59,$VF1),{19:[1,5066],21:[1,5070],22:5064,33:5063,205:5065,219:5067,220:[1,5069],221:[1,5068]},o($V59,$V68),o($V59,$V78),o($VK9,$Vy1,{93:5071}),o($V59,$Vz1,{99:4854,95:5072,101:$V4a,102:$VR,103:$VS,104:$VT}),o($VK9,$VG1),o($VK9,$VH1),o($VK9,$VI1),o($VK9,$VJ1),{100:[1,5073]},o($VK9,$VT1),{70:[1,5074]},o($Vq9,$Vs2,{99:4599,95:5075,101:$VS9,102:$VR,103:$VS,104:$VT}),o($Vp9,$Vt2),o($V59,$Vu2,{90:5076,95:5077,91:5078,99:5079,105:5081,107:5082,101:$Vba,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vw2,{90:5076,95:5077,91:5078,99:5079,105:5081,107:5082,101:$Vba,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vx2,{90:5076,95:5077,91:5078,99:5079,105:5081,107:5082,101:$Vba,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt9,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5083],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5084,121:$VW2,148:$VX2,194:$VY2}),o($Vs9,$VA2),o($Vs9,$Vw),o($Vs9,$Vx),o($Vs9,$Vn),o($Vs9,$Vo),o($Vs9,$Vy),o($Vs9,$Vp),o($Vs9,$Vq),o($Vp9,$V13),o($Vt9,$V23),o($Vt9,$V33),o($Vt9,$V43),o($Vt9,$V53),{111:[1,5085]},o($Vt9,$Va3),o($V59,$V48),o($V59,$V58),o($V59,$VC7),o($V59,$VD7),{119:[1,5086],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V59,$VE1),o($V59,$VF1),{19:[1,5090],21:[1,5094],22:5088,33:5087,205:5089,219:5091,220:[1,5093],221:[1,5092]},o($V59,$V68),o($V59,$V78),o($VK9,$Vy1,{93:5095}),o($V59,$Vz1,{99:4896,95:5096,101:$V5a,102:$VR,103:$VS,104:$VT}),o($VK9,$VG1),o($VK9,$VH1),o($VK9,$VI1),o($VK9,$VJ1),{100:[1,5097]},o($VK9,$VT1),{70:[1,5098]},o($Vq9,$Vs2,{99:4632,95:5099,101:$VT9,102:$VR,103:$VS,104:$VT}),o($Vp9,$Vt2),o($V59,$Vu2,{90:5100,95:5101,91:5102,99:5103,105:5105,107:5106,101:$Vca,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vw2,{90:5100,95:5101,91:5102,99:5103,105:5105,107:5106,101:$Vca,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vx2,{90:5100,95:5101,91:5102,99:5103,105:5105,107:5106,101:$Vca,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt9,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5107],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5108,121:$VW2,148:$VX2,194:$VY2}),o($Vs9,$VA2),o($Vs9,$Vw),o($Vs9,$Vx),o($Vs9,$Vn),o($Vs9,$Vo),o($Vs9,$Vy),o($Vs9,$Vp),o($Vs9,$Vq),o($Vp9,$V13),o($Vt9,$V23),o($Vt9,$V33),o($Vt9,$V43),o($Vt9,$V53),{111:[1,5109]},o($Vt9,$Va3),o($V59,$Vk5),{19:[1,5112],21:[1,5115],22:5111,87:5110,219:5113,220:[1,5114]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5116,121:$VW2,148:$VX2,194:$VY2}),o($VM6,$VA2),o($VM6,$Vw),o($VM6,$Vx),o($VM6,$Vn),o($VM6,$Vo),o($VM6,$Vy),o($VM6,$Vp),o($VM6,$Vq),o($VM6,$Vs2,{99:4672,95:5117,101:$VU9,102:$VR,103:$VS,104:$VT}),o($V88,$Vt2),o($V88,$V13),o($VM6,$VK8),o($Vy7,$VP3),o($VA7,$VQ3),o($VA7,$VR3),o($VA7,$VS3),{100:[1,5118]},o($VA7,$VT1),{100:[1,5120],106:5119,108:[1,5121],109:[1,5122],110:5123,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5124]},o($VA7,$VU3),{121:[1,5125]},{19:[1,5128],21:[1,5131],22:5127,87:5126,219:5129,220:[1,5130]},o($VA7,$VD5),o($VA7,$VK1),o($VA7,$Vn),o($VA7,$Vo),o($VA7,$Vp),o($VA7,$Vq),o($VA7,$VD5),o($VA7,$VK1),o($VA7,$Vn),o($VA7,$Vo),o($VA7,$Vp),o($VA7,$Vq),o($Vw9,$V71),o($Vw9,$V81),o($Vw9,$V91),o($VL8,$Vi5),o($VL8,$Vj5),{19:$VV9,21:$VW9,22:5133,87:5132,219:4707,220:$VX9},o($VN9,$VG8),o($VO9,$VN6,{60:5134}),o($VI,$VJ,{63:5135,73:5136,75:5137,76:5138,92:5141,94:5142,87:5144,88:5145,89:5146,78:5147,44:5148,95:5152,22:5153,91:5155,118:5156,99:5160,219:5163,105:5164,107:5165,19:[1,5162],21:[1,5167],69:[1,5139],71:[1,5140],79:[1,5157],80:[1,5158],81:[1,5159],85:[1,5143],96:[1,5149],97:[1,5150],98:[1,5151],101:$Vda,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5154],220:[1,5166]}),o($VO9,$VI8),o($VI,$VJ,{63:5168,73:5169,75:5170,76:5171,92:5174,94:5175,87:5177,88:5178,89:5179,78:5180,44:5181,95:5185,22:5186,91:5188,118:5189,99:5193,219:5196,105:5197,107:5198,19:[1,5195],21:[1,5200],69:[1,5172],71:[1,5173],79:[1,5190],80:[1,5191],81:[1,5192],85:[1,5176],96:[1,5182],97:[1,5183],98:[1,5184],101:$Vea,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5187],220:[1,5199]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5201,121:$VW2,148:$VX2,194:$VY2}),o($VO9,$VA2),o($VO9,$Vw),o($VO9,$Vx),o($VO9,$Vn),o($VO9,$Vo),o($VO9,$Vy),o($VO9,$Vp),o($VO9,$Vq),o($VO9,$Vs2,{99:4748,95:5202,101:$VY9,102:$VR,103:$VS,104:$VT}),o($V8a,$Vt2),o($V8a,$V13),o($VO9,$VK8),o($VZ9,$VP3),o($V$9,$VQ3),o($V$9,$VR3),o($V$9,$VS3),{100:[1,5203]},o($V$9,$VT1),{100:[1,5205],106:5204,108:[1,5206],109:[1,5207],110:5208,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5209]},o($V$9,$VU3),{121:[1,5210]},{19:[1,5213],21:[1,5216],22:5212,87:5211,219:5214,220:[1,5215]},o($Vh8,$Vs7),o($Vh8,$Vt7,{74:5217,76:5218,78:5219,44:5220,118:5221,79:[1,5222],80:[1,5223],81:[1,5224],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($Vh8,$Vu7),o($Vh8,$Vv7,{77:5225,73:5226,92:5227,94:5228,95:5232,99:5233,96:[1,5229],97:[1,5230],98:[1,5231],101:$Vfa,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5235,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($Vh8,$Vx7),o($VO8,$Vy1,{93:5236}),o($VP8,$Vz1,{99:5020,95:5237,101:$Vaa,102:$VR,103:$VS,104:$VT}),o($VQ8,$VB1,{86:5238}),o($VQ8,$VB1,{86:5239}),o($VQ8,$VB1,{86:5240}),o($Vh8,$VC1,{105:5024,107:5025,91:5241,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VR8,$VC7),o($VR8,$VD7),o($VO8,$VG1),o($VO8,$VH1),o($VO8,$VI1),o($VO8,$VJ1),o($VQ8,$VK1),o($VL1,$VM1,{167:5242}),o($VS8,$VO1),{119:[1,5243],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VR8,$VE1),o($VR8,$VF1),{19:[1,5247],21:[1,5251],22:5245,33:5244,205:5246,219:5248,220:[1,5250],221:[1,5249]},{100:[1,5252]},o($VO8,$VT1),o($VQ8,$Vn),o($VQ8,$Vo),{100:[1,5254],106:5253,108:[1,5255],109:[1,5256],110:5257,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5258]},o($VQ8,$Vp),o($VQ8,$Vq),{121:[1,5259]},o($Va9,$VP3),o($VQ8,$V13),o($VQ8,$V23),o($VQ8,$V33),o($VQ8,$V43),o($VQ8,$V53),{111:[1,5260]},o($VQ8,$Va3),o($VR8,$Vk5),o($VS8,$VD5),o($VS8,$VK1),o($VS8,$Vn),o($VS8,$Vo),o($VS8,$Vp),o($VS8,$Vq),{121:[1,5261]},o($Va9,$VP3),o($VQ8,$V13),o($VQ8,$V23),o($VQ8,$V33),o($VQ8,$V43),o($VQ8,$V53),{111:[1,5262]},o($VQ8,$Va3),o($VR8,$Vk5),o($VS8,$VD5),o($VS8,$VK1),o($VS8,$Vn),o($VS8,$Vo),o($VS8,$Vp),o($VS8,$Vq),o($V59,$VI8),o($VI,$VJ,{63:5263,73:5264,75:5265,76:5266,92:5269,94:5270,87:5272,88:5273,89:5274,78:5275,44:5276,95:5280,22:5281,91:5283,118:5284,99:5288,219:5291,105:5292,107:5293,19:[1,5290],21:[1,5295],69:[1,5267],71:[1,5268],79:[1,5285],80:[1,5286],81:[1,5287],85:[1,5271],96:[1,5277],97:[1,5278],98:[1,5279],101:$Vga,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5282],220:[1,5294]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5296,121:$VW2,148:$VX2,194:$VY2}),o($V59,$VA2),o($V59,$Vw),o($V59,$Vx),o($V59,$Vn),o($V59,$Vo),o($V59,$Vy),o($V59,$Vp),o($V59,$Vq),o($V59,$Vs2,{99:4854,95:5297,101:$V4a,102:$VR,103:$VS,104:$VT}),o($VK9,$Vt2),o($VK9,$V13),o($V59,$VK8),o($Vp9,$VP3),o($Vr9,$VQ3),o($Vr9,$VR3),o($Vr9,$VS3),{100:[1,5298]},o($Vr9,$VT1),{100:[1,5300],106:5299,108:[1,5301],109:[1,5302],110:5303,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5304]},o($Vr9,$VU3),{121:[1,5305]},{19:[1,5308],21:[1,5311],22:5307,87:5306,219:5309,220:[1,5310]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5312,121:$VW2,148:$VX2,194:$VY2}),o($V59,$VA2),o($V59,$Vw),o($V59,$Vx),o($V59,$Vn),o($V59,$Vo),o($V59,$Vy),o($V59,$Vp),o($V59,$Vq),o($V59,$Vs2,{99:4896,95:5313,101:$V5a,102:$VR,103:$VS,104:$VT}),o($VK9,$Vt2),o($VK9,$V13),o($V59,$VK8),o($Vp9,$VP3),o($Vr9,$VQ3),o($Vr9,$VR3),o($Vr9,$VS3),{100:[1,5314]},o($Vr9,$VT1),{100:[1,5316],106:5315,108:[1,5317],109:[1,5318],110:5319,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5320]},o($Vr9,$VU3),{121:[1,5321]},{19:[1,5324],21:[1,5327],22:5323,87:5322,219:5325,220:[1,5326]},o($Vr9,$VD5),o($Vr9,$VK1),o($Vr9,$Vn),o($Vr9,$Vo),o($Vr9,$Vp),o($Vr9,$Vq),{121:[1,5328]},o($V88,$VP3),o($VA7,$V13),o($VA7,$V23),o($VA7,$V33),o($VA7,$V43),o($VA7,$V53),{111:[1,5329]},o($VA7,$Va3),o($VB7,$Vk5),o($VE7,$VD5),o($VE7,$VK1),o($VE7,$Vn),o($VE7,$Vo),o($VE7,$Vp),o($VE7,$Vq),o($VL8,$VZ5),o($VL8,$VK1),o($VN9,$Vr7,{61:5330,53:[1,5331]}),o($VO9,$Vs7),o($VO9,$Vt7,{74:5332,76:5333,78:5334,44:5335,118:5336,79:[1,5337],80:[1,5338],81:[1,5339],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VO9,$Vu7),o($VO9,$Vv7,{77:5340,73:5341,92:5342,94:5343,95:5347,99:5348,96:[1,5344],97:[1,5345],98:[1,5346],101:$Vha,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5350,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VO9,$Vx7),o($VZ9,$Vy1,{93:5351}),o($V_9,$Vz1,{99:5160,95:5352,101:$Vda,102:$VR,103:$VS,104:$VT}),o($V$9,$VB1,{86:5353}),o($V$9,$VB1,{86:5354}),o($V$9,$VB1,{86:5355}),o($VO9,$VC1,{105:5164,107:5165,91:5356,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V0a,$VC7),o($V0a,$VD7),o($VZ9,$VG1),o($VZ9,$VH1),o($VZ9,$VI1),o($VZ9,$VJ1),o($V$9,$VK1),o($VL1,$VM1,{167:5357}),o($V1a,$VO1),{119:[1,5358],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V0a,$VE1),o($V0a,$VF1),{19:[1,5362],21:[1,5366],22:5360,33:5359,205:5361,219:5363,220:[1,5365],221:[1,5364]},{100:[1,5367]},o($VZ9,$VT1),o($V$9,$Vn),o($V$9,$Vo),{100:[1,5369],106:5368,108:[1,5370],109:[1,5371],110:5372,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5373]},o($V$9,$Vp),o($V$9,$Vq),o($VO9,$Vs7),o($VO9,$Vt7,{74:5374,76:5375,78:5376,44:5377,118:5378,79:[1,5379],80:[1,5380],81:[1,5381],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VO9,$Vu7),o($VO9,$Vv7,{77:5382,73:5383,92:5384,94:5385,95:5389,99:5390,96:[1,5386],97:[1,5387],98:[1,5388],101:$Via,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5392,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VO9,$Vx7),o($VZ9,$Vy1,{93:5393}),o($V_9,$Vz1,{99:5193,95:5394,101:$Vea,102:$VR,103:$VS,104:$VT}),o($V$9,$VB1,{86:5395}),o($V$9,$VB1,{86:5396}),o($V$9,$VB1,{86:5397}),o($VO9,$VC1,{105:5197,107:5198,91:5398,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V0a,$VC7),o($V0a,$VD7),o($VZ9,$VG1),o($VZ9,$VH1),o($VZ9,$VI1),o($VZ9,$VJ1),o($V$9,$VK1),o($VL1,$VM1,{167:5399}),o($V1a,$VO1),{119:[1,5400],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V0a,$VE1),o($V0a,$VF1),{19:[1,5404],21:[1,5408],22:5402,33:5401,205:5403,219:5405,220:[1,5407],221:[1,5406]},{100:[1,5409]},o($VZ9,$VT1),o($V$9,$Vn),o($V$9,$Vo),{100:[1,5411],106:5410,108:[1,5412],109:[1,5413],110:5414,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5415]},o($V$9,$Vp),o($V$9,$Vq),{121:[1,5416]},o($V8a,$VP3),o($V$9,$V13),o($V$9,$V23),o($V$9,$V33),o($V$9,$V43),o($V$9,$V53),{111:[1,5417]},o($V$9,$Va3),o($V0a,$Vk5),o($V1a,$VD5),o($V1a,$VK1),o($V1a,$Vn),o($V1a,$Vo),o($V1a,$Vp),o($V1a,$Vq),o($Vh8,$V48),o($Vh8,$V58),o($Vh8,$VC7),o($Vh8,$VD7),{119:[1,5418],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vh8,$VE1),o($Vh8,$VF1),{19:[1,5422],21:[1,5426],22:5420,33:5419,205:5421,219:5423,220:[1,5425],221:[1,5424]},o($Vh8,$V68),o($Vh8,$V78),o($Va9,$Vy1,{93:5427}),o($Vh8,$Vz1,{99:5233,95:5428,101:$Vfa,102:$VR,103:$VS,104:$VT}),o($Va9,$VG1),o($Va9,$VH1),o($Va9,$VI1),o($Va9,$VJ1),{100:[1,5429]},o($Va9,$VT1),{70:[1,5430]},o($VP8,$Vs2,{99:5020,95:5431,101:$Vaa,102:$VR,103:$VS,104:$VT}),o($VO8,$Vt2),o($Vh8,$Vu2,{90:5432,95:5433,91:5434,99:5435,105:5437,107:5438,101:$Vja,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vw2,{90:5432,95:5433,91:5434,99:5435,105:5437,107:5438,101:$Vja,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vh8,$Vx2,{90:5432,95:5433,91:5434,99:5435,105:5437,107:5438,101:$Vja,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS8,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5439],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5440,121:$VW2,148:$VX2,194:$VY2}),o($VR8,$VA2),o($VR8,$Vw),o($VR8,$Vx),o($VR8,$Vn),o($VR8,$Vo),o($VR8,$Vy),o($VR8,$Vp),o($VR8,$Vq),o($VO8,$V13),o($VS8,$V23),o($VS8,$V33),o($VS8,$V43),o($VS8,$V53),{111:[1,5441]},o($VS8,$Va3),o($Vh8,$Vk5),{19:[1,5444],21:[1,5447],22:5443,87:5442,219:5445,220:[1,5446]},o($Vh8,$Vk5),{19:[1,5450],21:[1,5453],22:5449,87:5448,219:5451,220:[1,5452]},o($V59,$Vs7),o($V59,$Vt7,{74:5454,76:5455,78:5456,44:5457,118:5458,79:[1,5459],80:[1,5460],81:[1,5461],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($V59,$Vu7),o($V59,$Vv7,{77:5462,73:5463,92:5464,94:5465,95:5469,99:5470,96:[1,5466],97:[1,5467],98:[1,5468],101:$Vka,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5472,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($V59,$Vx7),o($Vp9,$Vy1,{93:5473}),o($Vq9,$Vz1,{99:5288,95:5474,101:$Vga,102:$VR,103:$VS,104:$VT}),o($Vr9,$VB1,{86:5475}),o($Vr9,$VB1,{86:5476}),o($Vr9,$VB1,{86:5477}),o($V59,$VC1,{105:5292,107:5293,91:5478,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs9,$VC7),o($Vs9,$VD7),o($Vp9,$VG1),o($Vp9,$VH1),o($Vp9,$VI1),o($Vp9,$VJ1),o($Vr9,$VK1),o($VL1,$VM1,{167:5479}),o($Vt9,$VO1),{119:[1,5480],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($Vs9,$VE1),o($Vs9,$VF1),{19:[1,5484],21:[1,5488],22:5482,33:5481,205:5483,219:5485,220:[1,5487],221:[1,5486]},{100:[1,5489]},o($Vp9,$VT1),o($Vr9,$Vn),o($Vr9,$Vo),{100:[1,5491],106:5490,108:[1,5492],109:[1,5493],110:5494,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5495]},o($Vr9,$Vp),o($Vr9,$Vq),{121:[1,5496]},o($VK9,$VP3),o($Vr9,$V13),o($Vr9,$V23),o($Vr9,$V33),o($Vr9,$V43),o($Vr9,$V53),{111:[1,5497]},o($Vr9,$Va3),o($Vs9,$Vk5),o($Vt9,$VD5),o($Vt9,$VK1),o($Vt9,$Vn),o($Vt9,$Vo),o($Vt9,$Vp),o($Vt9,$Vq),{121:[1,5498]},o($VK9,$VP3),o($Vr9,$V13),o($Vr9,$V23),o($Vr9,$V33),o($Vr9,$V43),o($Vr9,$V53),{111:[1,5499]},o($Vr9,$Va3),o($Vs9,$Vk5),o($Vt9,$VD5),o($Vt9,$VK1),o($Vt9,$Vn),o($Vt9,$Vo),o($Vt9,$Vp),o($Vt9,$Vq),o($VM6,$Vk5),{19:[1,5502],21:[1,5505],22:5501,87:5500,219:5503,220:[1,5504]},o($VO9,$V38),o($Vr,$Vs,{59:5506,40:5507,43:$Vt}),o($VO9,$V48),o($VO9,$V58),o($VO9,$VC7),o($VO9,$VD7),{119:[1,5508],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VO9,$VE1),o($VO9,$VF1),{19:[1,5512],21:[1,5516],22:5510,33:5509,205:5511,219:5513,220:[1,5515],221:[1,5514]},o($VO9,$V68),o($VO9,$V78),o($V8a,$Vy1,{93:5517}),o($VO9,$Vz1,{99:5348,95:5518,101:$Vha,102:$VR,103:$VS,104:$VT}),o($V8a,$VG1),o($V8a,$VH1),o($V8a,$VI1),o($V8a,$VJ1),{100:[1,5519]},o($V8a,$VT1),{70:[1,5520]},o($V_9,$Vs2,{99:5160,95:5521,101:$Vda,102:$VR,103:$VS,104:$VT}),o($VZ9,$Vt2),o($VO9,$Vu2,{90:5522,95:5523,91:5524,99:5525,105:5527,107:5528,101:$Vla,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vw2,{90:5522,95:5523,91:5524,99:5525,105:5527,107:5528,101:$Vla,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vx2,{90:5522,95:5523,91:5524,99:5525,105:5527,107:5528,101:$Vla,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V1a,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5529],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5530,121:$VW2,148:$VX2,194:$VY2}),o($V0a,$VA2),o($V0a,$Vw),o($V0a,$Vx),o($V0a,$Vn),o($V0a,$Vo),o($V0a,$Vy),o($V0a,$Vp),o($V0a,$Vq),o($VZ9,$V13),o($V1a,$V23),o($V1a,$V33),o($V1a,$V43),o($V1a,$V53),{111:[1,5531]},o($V1a,$Va3),o($VO9,$V48),o($VO9,$V58),o($VO9,$VC7),o($VO9,$VD7),{119:[1,5532],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VO9,$VE1),o($VO9,$VF1),{19:[1,5536],21:[1,5540],22:5534,33:5533,205:5535,219:5537,220:[1,5539],221:[1,5538]},o($VO9,$V68),o($VO9,$V78),o($V8a,$Vy1,{93:5541}),o($VO9,$Vz1,{99:5390,95:5542,101:$Via,102:$VR,103:$VS,104:$VT}),o($V8a,$VG1),o($V8a,$VH1),o($V8a,$VI1),o($V8a,$VJ1),{100:[1,5543]},o($V8a,$VT1),{70:[1,5544]},o($V_9,$Vs2,{99:5193,95:5545,101:$Vea,102:$VR,103:$VS,104:$VT}),o($VZ9,$Vt2),o($VO9,$Vu2,{90:5546,95:5547,91:5548,99:5549,105:5551,107:5552,101:$Vma,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vw2,{90:5546,95:5547,91:5548,99:5549,105:5551,107:5552,101:$Vma,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vx2,{90:5546,95:5547,91:5548,99:5549,105:5551,107:5552,101:$Vma,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V1a,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5553],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5554,121:$VW2,148:$VX2,194:$VY2}),o($V0a,$VA2),o($V0a,$Vw),o($V0a,$Vx),o($V0a,$Vn),o($V0a,$Vo),o($V0a,$Vy),o($V0a,$Vp),o($V0a,$Vq),o($VZ9,$V13),o($V1a,$V23),o($V1a,$V33),o($V1a,$V43),o($V1a,$V53),{111:[1,5555]},o($V1a,$Va3),o($VO9,$Vk5),{19:[1,5558],21:[1,5561],22:5557,87:5556,219:5559,220:[1,5560]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5562,121:$VW2,148:$VX2,194:$VY2}),o($Vh8,$VA2),o($Vh8,$Vw),o($Vh8,$Vx),o($Vh8,$Vn),o($Vh8,$Vo),o($Vh8,$Vy),o($Vh8,$Vp),o($Vh8,$Vq),o($Vh8,$Vs2,{99:5233,95:5563,101:$Vfa,102:$VR,103:$VS,104:$VT}),o($Va9,$Vt2),o($Va9,$V13),o($Vh8,$VK8),o($VO8,$VP3),o($VQ8,$VQ3),o($VQ8,$VR3),o($VQ8,$VS3),{100:[1,5564]},o($VQ8,$VT1),{100:[1,5566],106:5565,108:[1,5567],109:[1,5568],110:5569,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5570]},o($VQ8,$VU3),{121:[1,5571]},{19:[1,5574],21:[1,5577],22:5573,87:5572,219:5575,220:[1,5576]},o($VQ8,$VD5),o($VQ8,$VK1),o($VQ8,$Vn),o($VQ8,$Vo),o($VQ8,$Vp),o($VQ8,$Vq),o($VQ8,$VD5),o($VQ8,$VK1),o($VQ8,$Vn),o($VQ8,$Vo),o($VQ8,$Vp),o($VQ8,$Vq),o($V59,$V48),o($V59,$V58),o($V59,$VC7),o($V59,$VD7),{119:[1,5578],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V59,$VE1),o($V59,$VF1),{19:[1,5582],21:[1,5586],22:5580,33:5579,205:5581,219:5583,220:[1,5585],221:[1,5584]},o($V59,$V68),o($V59,$V78),o($VK9,$Vy1,{93:5587}),o($V59,$Vz1,{99:5470,95:5588,101:$Vka,102:$VR,103:$VS,104:$VT}),o($VK9,$VG1),o($VK9,$VH1),o($VK9,$VI1),o($VK9,$VJ1),{100:[1,5589]},o($VK9,$VT1),{70:[1,5590]},o($Vq9,$Vs2,{99:5288,95:5591,101:$Vga,102:$VR,103:$VS,104:$VT}),o($Vp9,$Vt2),o($V59,$Vu2,{90:5592,95:5593,91:5594,99:5595,105:5597,107:5598,101:$Vna,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vw2,{90:5592,95:5593,91:5594,99:5595,105:5597,107:5598,101:$Vna,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V59,$Vx2,{90:5592,95:5593,91:5594,99:5595,105:5597,107:5598,101:$Vna,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt9,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5599],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5600,121:$VW2,148:$VX2,194:$VY2}),o($Vs9,$VA2),o($Vs9,$Vw),o($Vs9,$Vx),o($Vs9,$Vn),o($Vs9,$Vo),o($Vs9,$Vy),o($Vs9,$Vp),o($Vs9,$Vq),o($Vp9,$V13),o($Vt9,$V23),o($Vt9,$V33),o($Vt9,$V43),o($Vt9,$V53),{111:[1,5601]},o($Vt9,$Va3),o($V59,$Vk5),{19:[1,5604],21:[1,5607],22:5603,87:5602,219:5605,220:[1,5606]},o($V59,$Vk5),{19:[1,5610],21:[1,5613],22:5609,87:5608,219:5611,220:[1,5612]},o($VA7,$VD5),o($VA7,$VK1),o($VA7,$Vn),o($VA7,$Vo),o($VA7,$Vp),o($VA7,$Vq),o($VO9,$VI8),o($VI,$VJ,{63:5614,73:5615,75:5616,76:5617,92:5620,94:5621,87:5623,88:5624,89:5625,78:5626,44:5627,95:5631,22:5632,91:5634,118:5635,99:5639,219:5642,105:5643,107:5644,19:[1,5641],21:[1,5646],69:[1,5618],71:[1,5619],79:[1,5636],80:[1,5637],81:[1,5638],85:[1,5622],96:[1,5628],97:[1,5629],98:[1,5630],101:$Voa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,166:[1,5633],220:[1,5645]}),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5647,121:$VW2,148:$VX2,194:$VY2}),o($VO9,$VA2),o($VO9,$Vw),o($VO9,$Vx),o($VO9,$Vn),o($VO9,$Vo),o($VO9,$Vy),o($VO9,$Vp),o($VO9,$Vq),o($VO9,$Vs2,{99:5348,95:5648,101:$Vha,102:$VR,103:$VS,104:$VT}),o($V8a,$Vt2),o($V8a,$V13),o($VO9,$VK8),o($VZ9,$VP3),o($V$9,$VQ3),o($V$9,$VR3),o($V$9,$VS3),{100:[1,5649]},o($V$9,$VT1),{100:[1,5651],106:5650,108:[1,5652],109:[1,5653],110:5654,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5655]},o($V$9,$VU3),{121:[1,5656]},{19:[1,5659],21:[1,5662],22:5658,87:5657,219:5660,220:[1,5661]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5663,121:$VW2,148:$VX2,194:$VY2}),o($VO9,$VA2),o($VO9,$Vw),o($VO9,$Vx),o($VO9,$Vn),o($VO9,$Vo),o($VO9,$Vy),o($VO9,$Vp),o($VO9,$Vq),o($VO9,$Vs2,{99:5390,95:5664,101:$Via,102:$VR,103:$VS,104:$VT}),o($V8a,$Vt2),o($V8a,$V13),o($VO9,$VK8),o($VZ9,$VP3),o($V$9,$VQ3),o($V$9,$VR3),o($V$9,$VS3),{100:[1,5665]},o($V$9,$VT1),{100:[1,5667],106:5666,108:[1,5668],109:[1,5669],110:5670,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5671]},o($V$9,$VU3),{121:[1,5672]},{19:[1,5675],21:[1,5678],22:5674,87:5673,219:5676,220:[1,5677]},o($V$9,$VD5),o($V$9,$VK1),o($V$9,$Vn),o($V$9,$Vo),o($V$9,$Vp),o($V$9,$Vq),{121:[1,5679]},o($Va9,$VP3),o($VQ8,$V13),o($VQ8,$V23),o($VQ8,$V33),o($VQ8,$V43),o($VQ8,$V53),{111:[1,5680]},o($VQ8,$Va3),o($VR8,$Vk5),o($VS8,$VD5),o($VS8,$VK1),o($VS8,$Vn),o($VS8,$Vo),o($VS8,$Vp),o($VS8,$Vq),o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5681,121:$VW2,148:$VX2,194:$VY2}),o($V59,$VA2),o($V59,$Vw),o($V59,$Vx),o($V59,$Vn),o($V59,$Vo),o($V59,$Vy),o($V59,$Vp),o($V59,$Vq),o($V59,$Vs2,{99:5470,95:5682,101:$Vka,102:$VR,103:$VS,104:$VT}),o($VK9,$Vt2),o($VK9,$V13),o($V59,$VK8),o($Vp9,$VP3),o($Vr9,$VQ3),o($Vr9,$VR3),o($Vr9,$VS3),{100:[1,5683]},o($Vr9,$VT1),{100:[1,5685],106:5684,108:[1,5686],109:[1,5687],110:5688,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5689]},o($Vr9,$VU3),{121:[1,5690]},{19:[1,5693],21:[1,5696],22:5692,87:5691,219:5694,220:[1,5695]},o($Vr9,$VD5),o($Vr9,$VK1),o($Vr9,$Vn),o($Vr9,$Vo),o($Vr9,$Vp),o($Vr9,$Vq),o($Vr9,$VD5),o($Vr9,$VK1),o($Vr9,$Vn),o($Vr9,$Vo),o($Vr9,$Vp),o($Vr9,$Vq),o($VO9,$Vs7),o($VO9,$Vt7,{74:5697,76:5698,78:5699,44:5700,118:5701,79:[1,5702],80:[1,5703],81:[1,5704],119:$VJ,125:$VJ,127:$VJ,194:$VJ,223:$VJ}),o($VO9,$Vu7),o($VO9,$Vv7,{77:5705,73:5706,92:5707,94:5708,95:5712,99:5713,96:[1,5709],97:[1,5710],98:[1,5711],101:$Vpa,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{40:169,44:171,38:5715,43:$Vp1,79:$V21,80:$V31,81:$V41}),o($VO9,$Vx7),o($VZ9,$Vy1,{93:5716}),o($V_9,$Vz1,{99:5639,95:5717,101:$Voa,102:$VR,103:$VS,104:$VT}),o($V$9,$VB1,{86:5718}),o($V$9,$VB1,{86:5719}),o($V$9,$VB1,{86:5720}),o($VO9,$VC1,{105:5643,107:5644,91:5721,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V0a,$VC7),o($V0a,$VD7),o($VZ9,$VG1),o($VZ9,$VH1),o($VZ9,$VI1),o($VZ9,$VJ1),o($V$9,$VK1),o($VL1,$VM1,{167:5722}),o($V1a,$VO1),{119:[1,5723],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($V0a,$VE1),o($V0a,$VF1),{19:[1,5727],21:[1,5731],22:5725,33:5724,205:5726,219:5728,220:[1,5730],221:[1,5729]},{100:[1,5732]},o($VZ9,$VT1),o($V$9,$Vn),o($V$9,$Vo),{100:[1,5734],106:5733,108:[1,5735],109:[1,5736],110:5737,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5738]},o($V$9,$Vp),o($V$9,$Vq),{121:[1,5739]},o($V8a,$VP3),o($V$9,$V13),o($V$9,$V23),o($V$9,$V33),o($V$9,$V43),o($V$9,$V53),{111:[1,5740]},o($V$9,$Va3),o($V0a,$Vk5),o($V1a,$VD5),o($V1a,$VK1),o($V1a,$Vn),o($V1a,$Vo),o($V1a,$Vp),o($V1a,$Vq),{121:[1,5741]},o($V8a,$VP3),o($V$9,$V13),o($V$9,$V23),o($V$9,$V33),o($V$9,$V43),o($V$9,$V53),{111:[1,5742]},o($V$9,$Va3),o($V0a,$Vk5),o($V1a,$VD5),o($V1a,$VK1),o($V1a,$Vn),o($V1a,$Vo),o($V1a,$Vp),o($V1a,$Vq),o($Vh8,$Vk5),{19:[1,5745],21:[1,5748],22:5744,87:5743,219:5746,220:[1,5747]},{121:[1,5749]},o($VK9,$VP3),o($Vr9,$V13),o($Vr9,$V23),o($Vr9,$V33),o($Vr9,$V43),o($Vr9,$V53),{111:[1,5750]},o($Vr9,$Va3),o($Vs9,$Vk5),o($Vt9,$VD5),o($Vt9,$VK1),o($Vt9,$Vn),o($Vt9,$Vo),o($Vt9,$Vp),o($Vt9,$Vq),o($VO9,$V48),o($VO9,$V58),o($VO9,$VC7),o($VO9,$VD7),{119:[1,5751],122:191,123:192,124:193,125:$VP1,127:$VQ1,194:$VR1,222:195,223:$VS1},o($VO9,$VE1),o($VO9,$VF1),{19:[1,5755],21:[1,5759],22:5753,33:5752,205:5754,219:5756,220:[1,5758],221:[1,5757]},o($VO9,$V68),o($VO9,$V78),o($V8a,$Vy1,{93:5760}),o($VO9,$Vz1,{99:5713,95:5761,101:$Vpa,102:$VR,103:$VS,104:$VT}),o($V8a,$VG1),o($V8a,$VH1),o($V8a,$VI1),o($V8a,$VJ1),{100:[1,5762]},o($V8a,$VT1),{70:[1,5763]},o($V_9,$Vs2,{99:5639,95:5764,101:$Voa,102:$VR,103:$VS,104:$VT}),o($VZ9,$Vt2),o($VO9,$Vu2,{90:5765,95:5766,91:5767,99:5768,105:5770,107:5771,101:$Vqa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vw2,{90:5765,95:5766,91:5767,99:5768,105:5770,107:5771,101:$Vqa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VO9,$Vx2,{90:5765,95:5766,91:5767,99:5768,105:5770,107:5771,101:$Vqa,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V1a,$Vy2),{19:$VB2,21:$VC2,22:370,71:$VD2,81:$VE2,100:$VF2,108:$VG2,109:$VH2,110:382,168:[1,5772],169:365,170:366,171:367,172:368,186:371,190:$VI2,201:376,202:377,203:378,206:381,209:$VJ2,210:$VK2,211:$VL2,212:$VM2,213:$VN2,214:$VO2,215:$VP2,216:$VQ2,217:$VR2,218:$VS2,219:375,220:$VT2},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5773,121:$VW2,148:$VX2,194:$VY2}),o($V0a,$VA2),o($V0a,$Vw),o($V0a,$Vx),o($V0a,$Vn),o($V0a,$Vo),o($V0a,$Vy),o($V0a,$Vp),o($V0a,$Vq),o($VZ9,$V13),o($V1a,$V23),o($V1a,$V33),o($V1a,$V43),o($V1a,$V53),{111:[1,5774]},o($V1a,$Va3),o($VO9,$Vk5),{19:[1,5777],21:[1,5780],22:5776,87:5775,219:5778,220:[1,5779]},o($VO9,$Vk5),{19:[1,5783],21:[1,5786],22:5782,87:5781,219:5784,220:[1,5785]},o($VQ8,$VD5),o($VQ8,$VK1),o($VQ8,$Vn),o($VQ8,$Vo),o($VQ8,$Vp),o($VQ8,$Vq),o($V59,$Vk5),{19:[1,5789],21:[1,5792],22:5788,87:5787,219:5790,220:[1,5791]},o($VU2,$VV2,{126:397,130:398,131:399,132:400,136:401,137:402,138:403,144:404,146:405,147:406,120:5793,121:$VW2,148:$VX2,194:$VY2}),o($VO9,$VA2),o($VO9,$Vw),o($VO9,$Vx),o($VO9,$Vn),o($VO9,$Vo),o($VO9,$Vy),o($VO9,$Vp),o($VO9,$Vq),o($VO9,$Vs2,{99:5713,95:5794,101:$Vpa,102:$VR,103:$VS,104:$VT}),o($V8a,$Vt2),o($V8a,$V13),o($VO9,$VK8),o($VZ9,$VP3),o($V$9,$VQ3),o($V$9,$VR3),o($V$9,$VS3),{100:[1,5795]},o($V$9,$VT1),{100:[1,5797],106:5796,108:[1,5798],109:[1,5799],110:5800,211:$VU1,212:$VV1,213:$VW1,214:$VX1},{100:[1,5801]},o($V$9,$VU3),{121:[1,5802]},{19:[1,5805],21:[1,5808],22:5804,87:5803,219:5806,220:[1,5807]},o($V$9,$VD5),o($V$9,$VK1),o($V$9,$Vn),o($V$9,$Vo),o($V$9,$Vp),o($V$9,$Vq),o($V$9,$VD5),o($V$9,$VK1),o($V$9,$Vn),o($V$9,$Vo),o($V$9,$Vp),o($V$9,$Vq),o($Vr9,$VD5),o($Vr9,$VK1),o($Vr9,$Vn),o($Vr9,$Vo),o($Vr9,$Vp),o($Vr9,$Vq),{121:[1,5809]},o($V8a,$VP3),o($V$9,$V13),o($V$9,$V23),o($V$9,$V33),o($V$9,$V43),o($V$9,$V53),{111:[1,5810]},o($V$9,$Va3),o($V0a,$Vk5),o($V1a,$VD5),o($V1a,$VK1),o($V1a,$Vn),o($V1a,$Vo),o($V1a,$Vp),o($V1a,$Vq),o($VO9,$Vk5),{19:[1,5813],21:[1,5816],22:5812,87:5811,219:5814,220:[1,5815]},o($V$9,$VD5),o($V$9,$VK1),o($V$9,$Vn),o($V$9,$Vo),o($V$9,$Vp),o($V$9,$Vq)],\ndefaultActions: {6:[2,11],24:[2,1],115:[2,119],116:[2,120],117:[2,121],124:[2,132],125:[2,133],205:[2,256],206:[2,257],207:[2,258],208:[2,259],337:[2,35],397:[2,142],398:[2,146],400:[2,148],585:[2,33],586:[2,37],623:[2,34],1120:[2,146],1122:[2,148]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: lexer.yylloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n  /*\n    ShEx parser in the Jison parser generator format.\n  */\n\n  var UNBOUNDED = -1;\n\n  var ShExUtil = __webpack_require__(/*! @shexjs/core */ \"./node_modules/@shexjs/core/shex-core.js\").Util;\n\n  // Common namespaces and entities\n  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n      RDF_TYPE  = RDF + 'type',\n      RDF_FIRST = RDF + 'first',\n      RDF_REST  = RDF + 'rest',\n      RDF_NIL   = RDF + 'nil',\n      XSD = 'http://www.w3.org/2001/XMLSchema#',\n      XSD_INTEGER  = XSD + 'integer',\n      XSD_DECIMAL  = XSD + 'decimal',\n      XSD_FLOAT   = XSD + 'float',\n      XSD_DOUBLE   = XSD + 'double',\n      XSD_BOOLEAN  = XSD + 'boolean',\n      XSD_TRUE =  '\"true\"^^'  + XSD_BOOLEAN,\n      XSD_FALSE = '\"false\"^^' + XSD_BOOLEAN,\n      XSD_PATTERN        = XSD + 'pattern',\n      XSD_MININCLUSIVE   = XSD + 'minInclusive',\n      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',\n      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',\n      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',\n      XSD_LENGTH         = XSD + 'length',\n      XSD_MINLENGTH      = XSD + 'minLength',\n      XSD_MAXLENGTH      = XSD + 'maxLength',\n      XSD_TOTALDIGITS    = XSD + 'totalDigits',\n      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';\n\n  var numericDatatypes = [\n      XSD + \"integer\",\n      XSD + \"decimal\",\n      XSD + \"float\",\n      XSD + \"double\",\n      XSD + \"string\",\n      XSD + \"boolean\",\n      XSD + \"dateTime\",\n      XSD + \"nonPositiveInteger\",\n      XSD + \"negativeInteger\",\n      XSD + \"long\",\n      XSD + \"int\",\n      XSD + \"short\",\n      XSD + \"byte\",\n      XSD + \"nonNegativeInteger\",\n      XSD + \"unsignedLong\",\n      XSD + \"unsignedInt\",\n      XSD + \"unsignedShort\",\n      XSD + \"unsignedByte\",\n      XSD + \"positiveInteger\"\n  ];\n\n  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,\n    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i,\n    dotSegments = /(?:^|\\/)\\.\\.?(?:$|[\\/#?])/;\n\n  var numericFacets = [\"mininclusive\", \"minexclusive\",\n                       \"maxinclusive\", \"maxexclusive\"];\n\n  // Returns a lowercase version of the given string\n  function lowercase(string) {\n    return string.toLowerCase();\n  }\n\n  // Appends the item to the array and returns the array\n  function appendTo(array, item) {\n    return array.push(item), array;\n  }\n\n  // Appends the items to the array and returns the array\n  function appendAllTo(array, items) {\n    return array.push.apply(array, items), array;\n  }\n\n  // Extends a base object with properties of other objects\n  function extend(base) {\n    if (!base) base = {};\n    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)\n      for (var name in arg)\n        base[name] = arg[name];\n    return base;\n  }\n\n  // Creates an array that contains all items of the given arrays\n  function unionAll() {\n    var union = [];\n    for (var i = 0, l = arguments.length; i < l; i++)\n      union = union.concat.apply(union, arguments[i]);\n    return union;\n  }\n\n  // N3.js:lib/N3Parser.js<0.4.5>:58 with\n  //   s/this\\./Parser./g\n  // ### `_setBase` sets the base IRI to resolve relative IRIs.\n  Parser._setBase = function (baseIRI) {\n    if (!baseIRI)\n      baseIRI = null;\n\n    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'\n    // else if (baseIRI.indexOf('#') >= 0)\n    //   throw new Error('Invalid base IRI ' + baseIRI);\n\n    // Set base IRI and its components\n    if (Parser._base = baseIRI) {\n      Parser._basePath   = baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(schemeAuthority);\n      Parser._baseRoot   = baseIRI[0];\n      Parser._baseScheme = baseIRI[1];\n    }\n  }\n\n  // N3.js:lib/N3Parser.js<0.4.5>:576 with\n  //   s/this\\./Parser./g\n  //   s/token/iri/\n  // ### `_resolveIRI` resolves a relative IRI token against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative.\n  function _resolveIRI (iri) {\n    switch (iri[0]) {\n    // An empty relative IRI indicates the base IRI\n    case undefined: return Parser._base;\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return Parser._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return Parser._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default: {\n      return _removeDotSegments(Parser._basePath + iri);\n    }\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.\n  function _removeDotSegments (iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!dotSegments.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return result + '/' + iri.substr(i + 1);\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // Creates an expression with the given type and attributes\n  function expression(expr, attr) {\n    var expression = { expression: expr };\n    if (attr)\n      for (var a in attr)\n        expression[a] = attr[a];\n    return expression;\n  }\n\n  // Creates a path with the given type and items\n  function path(type, items) {\n    return { type: 'path', pathType: type, items: items };\n  }\n\n  // Creates a literal with the given value and type\n  function createLiteral(value, type) {\n    return { value: value, type: type };\n  }\n\n  // Creates a new blank node identifier\n  function blank() {\n    return '_:b' + blankId++;\n  };\n  var blankId = 0;\n  Parser._resetBlanks = function () { blankId = 0; }\n  Parser.reset = function () {\n    Parser._prefixes = Parser._imports = Parser._sourceMap = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.\n    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;\n  }\n  var _fileName; // for debugging\n  Parser._setFileName = function (fn) { _fileName = fn; }\n\n  // Regular expression and replacement strings to escape strings\n  var stringEscapeReplacements = { '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n                                   't': '\\t', 'b': '\\b', 'n': '\\n', 'r': '\\r', 'f': '\\f' },\n      semactEscapeReplacements = { '\\\\': '\\\\', '%': '%' },\n      pnameEscapeReplacements = {\n        '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n        'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n      };\n\n\n  // Translates string escape codes in the string into their textual equivalent\n  function unescapeString(string, trimLength) {\n    string = string.substring(trimLength, string.length - trimLength);\n    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };\n  }\n\n  function unescapeLangString(string, trimLength) {\n    var at = string.lastIndexOf(\"@\");\n    var lang = string.substr(at);\n    string = string.substr(0, at);\n    var u = unescapeString(string, trimLength);\n    return extend(u, { language: lowercase(lang.substr(1)) });\n  }\n\n  // Translates regular expression escape codes in the string into their textual equivalent\n  function unescapeRegexp (regexp) {\n    var end = regexp.lastIndexOf(\"/\");\n    var s = regexp.substr(1, end-1);\n    var regexpEscapeReplacements = {\n      '.': \"\\\\.\", '\\\\': \"\\\\\\\\\", '?': \"\\\\?\", '*': \"\\\\*\", '+': \"\\\\+\",\n      '{': \"\\\\{\", '}': \"\\\\}\", '(': \"\\\\(\", ')': \"\\\\)\", '|': \"\\\\|\",\n      '^': \"\\\\^\", '$': \"\\\\$\", '[': \"\\\\[\", ']': \"\\\\]\", '/': \"\\\\/\",\n      't': '\\\\t', 'n': '\\\\n', 'r': '\\\\r', '-': \"\\\\-\", '/': '/'\n    };\n    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)\n    var ret = {\n      pattern: s\n    };\n    if (regexp.length > end+1)\n      ret.flags = regexp.substr(end+1);\n    return ret;\n  }\n\n  // Convenience function to return object with p1 key, value p2\n  function keyValObject(key, val) {\n    var ret = {};\n    ret[key] = val;\n    return ret;\n  }\n\n  // Return object with p1 key, p2 string value\n  function unescapeSemanticAction(key, string) {\n    string = string.substring(1, string.length - 2);\n    return {\n      type: \"SemAct\",\n      name: key,\n      code: ShExUtil.unescapeText(string, semactEscapeReplacements)\n    };\n  }\n\n  function error (e, yy) {\n    const hash = {\n      text: yy.lexer.match,\n      // token: this.terminals_[symbol] || symbol,\n      line: yy.lexer.yylineno,\n      loc: yy.lexer.yylloc,\n      // expected: expected\n      pos: yy.lexer.showPosition()\n    }\n    e.hash = hash;\n    if (Parser.recoverable) {\n      Parser.recoverable(e)\n    } else {\n      throw e;\n      Parser.reset();\n    }\n  }\n\n  // Expand declared prefix or throw Error\n  function expandPrefix (prefix, yy) {\n    if (!(prefix in Parser._prefixes))\n      error(new Error('Parse error; unknown prefix \"' + prefix + ':\"'), yy);\n    return Parser._prefixes[prefix];\n  }\n\n  // Add a shape to the map\n  function addShape (label, shape, yy) {\n    if (shape === EmptyShape)\n      shape = { type: \"Shape\" };\n    if (Parser.productions && label in Parser.productions)\n      error(new Error(\"Structural error: \"+label+\" is a triple expression\"), yy);\n    if (!Parser.shapes)\n      Parser.shapes = new Map();\n    if (label in Parser.shapes) {\n      if (Parser.options.duplicateShape === \"replace\")\n        Parser.shapes[label] = shape;\n      else if (Parser.options.duplicateShape !== \"ignore\")\n        error(new Error(\"Parse error: \"+label+\" already defined\"), yy);\n    } else {\n      shape.id = label;\n      Parser.shapes[label] = shape;\n    }\n  }\n\n  // Add a production to the map\n  function addProduction (label, production, yy) {\n    if (Parser.shapes && label in Parser.shapes)\n      error(new Error(\"Structural error: \"+label+\" is a shape expression\"), yy);\n    if (!Parser.productions)\n      Parser.productions = new Map();\n    if (label in Parser.productions) {\n      if (Parser.options.duplicateShape === \"replace\")\n        Parser.productions[label] = production;\n      else if (Parser.options.duplicateShape !== \"ignore\")\n        error(new Error(\"Parse error: \"+label+\" already defined\"), yy);\n    } else\n      Parser.productions[label] = production;\n  }\n\n  function addSourceMap (obj, yy) {\n    if (!Parser._sourceMap)\n      Parser._sourceMap = new Map();\n    let list = Parser._sourceMap.get(obj)\n    if (!list)\n      Parser._sourceMap.set(obj, list = []);\n    list.push(yy.lexer.yylloc);\n    return obj;\n  }\n\n  // shapeJunction judiciously takes a shapeAtom and an optional list of con/disjuncts.\n  // No created Shape{And,Or,Not} will have a `nested` shapeExpr.\n  // Don't nonest arguments to shapeJunction.\n  // shapeAtom emits `nested` so nonest every argument that can be a shapeAtom, i.e.\n  //   shapeAtom, inlineShapeAtom, shapeAtomNoRef\n  //   {,inline}shape{And,Or,Not}\n  //   this does NOT include shapeOrRef or nodeConstraint.\n  function shapeJunction (type, shapeAtom, juncts) {\n    if (juncts.length === 0) {\n      return nonest(shapeAtom);\n    } else if (shapeAtom.type === type && !shapeAtom.nested) {\n      nonest(shapeAtom).shapeExprs = nonest(shapeAtom).shapeExprs.concat(juncts);\n      return shapeAtom;\n    } else {\n      return { type: type, shapeExprs: [nonest(shapeAtom)].concat(juncts) };\n    }\n  }\n\n  // strip out .nested attribute\n  function nonest (shapeAtom) {\n    delete shapeAtom.nested;\n    return shapeAtom;\n  }\n\n  var EmptyObject = {  };\n  var EmptyShape = { type: \"Shape\" };\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/**/\nbreak;\ncase 1:return 79;\nbreak;\ncase 2:return 80;\nbreak;\ncase 3: yy_.yytext = yy_.yytext.substr(1); return 190; \nbreak;\ncase 4:return 81;\nbreak;\ncase 5:return 220;\nbreak;\ncase 6:return 164;\nbreak;\ncase 7:return 109;\nbreak;\ncase 8:return 108;\nbreak;\ncase 9:return 100;\nbreak;\ncase 10:return 'ANON';\nbreak;\ncase 11:return 19;\nbreak;\ncase 12:return 21;\nbreak;\ncase 13:return 204;\nbreak;\ncase 14:return 101;\nbreak;\ncase 15:return 221;\nbreak;\ncase 16:return 200;\nbreak;\ncase 17:return 216;\nbreak;\ncase 18:return 218;\nbreak;\ncase 19:return 215;\nbreak;\ncase 20:return 217;\nbreak;\ncase 21:return 212;\nbreak;\ncase 22:return 214;\nbreak;\ncase 23:return 211;\nbreak;\ncase 24:return 213;\nbreak;\ncase 25:return 18;\nbreak;\ncase 26:return 20;\nbreak;\ncase 27:return 23;\nbreak;\ncase 28:return 26;\nbreak;\ncase 29:return 39;\nbreak;\ncase 30:return 36;\nbreak;\ncase 31:return 225;\nbreak;\ncase 32:return 223;\nbreak;\ncase 33:return 125;\nbreak;\ncase 34:return 127;\nbreak;\ncase 35:return 85;\nbreak;\ncase 36:return 97;\nbreak;\ncase 37:return 96;\nbreak;\ncase 38:return 98;\nbreak;\ncase 39:return 53;\nbreak;\ncase 40:return 51;\nbreak;\ncase 41:return 43;\nbreak;\ncase 42:return 155;\nbreak;\ncase 43:return 157;\nbreak;\ncase 44:return 158;\nbreak;\ncase 45:return 112;\nbreak;\ncase 46:return 113;\nbreak;\ncase 47:return 114;\nbreak;\ncase 48:return 115;\nbreak;\ncase 49:return 102;\nbreak;\ncase 50:return 103;\nbreak;\ncase 51:return 104;\nbreak;\ncase 52:return 116;\nbreak;\ncase 53:return 117;\nbreak;\ncase 54:return 27;\nbreak;\ncase 55:return 195;\nbreak;\ncase 56:return 119;\nbreak;\ncase 57:return 121;\nbreak;\ncase 58:return 194;\nbreak;\ncase 59:return '||';\nbreak;\ncase 60:return 135;\nbreak;\ncase 61:return 140;\nbreak;\ncase 62:return 69;\nbreak;\ncase 63:return 70;\nbreak;\ncase 64:return 166;\nbreak;\ncase 65:return 168;\nbreak;\ncase 66:return 148;\nbreak;\ncase 67:return '!';\nbreak;\ncase 68:return 111;\nbreak;\ncase 69:return 165;\nbreak;\ncase 70:return 71;\nbreak;\ncase 71:return 183;\nbreak;\ncase 72:return 141;\nbreak;\ncase 73:return 161;\nbreak;\ncase 74:return 162;\nbreak;\ncase 75:return 163;\nbreak;\ncase 76:return 184;\nbreak;\ncase 77:return 198;\nbreak;\ncase 78:return 209;\nbreak;\ncase 79:return 210;\nbreak;\ncase 80:return 7;\nbreak;\ncase 81:return 'unexpected word \"'+yy_.yytext+'\"';\nbreak;\ncase 82:return 'invalid character '+yy_.yytext;\nbreak;\n}\n},\nrules: [/^(?:\\s+|(#[^\\u000a\\u000d]*|\\/\\*([^*]|\\*([^\\/]|\\\\\\/))*\\*\\/))/,/^(?:(@(((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])((((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))(((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*))))/,/^(?:(@((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])((((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])((((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))(((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*)))/,/^(?:(\\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\\*)?))?\\}))/,/^(?:(([+-])?((([0-9])+\\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\\u0000-\\u0020<>\\\"{}|^`\\\\]|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])((((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:))/,/^(?:a\\b)/,/^(?:(\\/([^\\u002f\\u005C\\u000A\\u000D]|\\\\[nrt\\\\|.?*+(){}$\\u002D\\u005B\\u005D\\u005E\\/]|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\\/[smix]*))/,/^(?:(_:((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|[0-9])((((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*((([A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_\\b)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?))/,/^(?:(\\{([^%\\\\]|\\\\[%\\\\]|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\\}))/,/^(?:('''(('|'')?([^\\'\\\\]|(\\\\[\\\"\\'\\\\bfnrt])|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:(\"\"\"((\"|\"\")?([^\\\"\\\\]|(\\\\[\\\"\\'\\\\bfnrt])|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*\"\"\"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('([^\\u0027\\u005c\\u000a\\u000d]|(\\\\[\\\"\\'\\\\bfnrt])|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:(\"([^\\u0022\\u005c\\u000a\\u000d]|(\\\\[\\\"\\'\\\\bfnrt])|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*\"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('''(('|'')?([^\\'\\\\]|(\\\\[\\\"\\'\\\\bfnrt])|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:(\"\"\"((\"|\"\")?([^\\\"\\\\]|(\\\\[\\\"\\'\\\\bfnrt])|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*\"\"\"))/,/^(?:('([^\\u0027\\u005c\\u000a\\u000d]|(\\\\[\\\"\\'\\\\bfnrt])|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:(\"([^\\u0022\\u005c\\u000a\\u000d]|(\\\\[\\\"\\'\\\\bfnrt])|(\\\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*\"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([iI][mM][pP][oO][rR][tT]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Aa][Bb][Ss][Tt][Rr][Aa][Cc][Tt]))/,/^(?:([Rr][Ee][Ss][Tt][Rr][Ii][Cc][Tt][Ss]))/,/^(?:([Ee][Xx][Tt][Ee][Nn][Dd][Ss]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Oo][Nn]))/,/^(?:([Ss][Hh][Aa][Pp][Ee]))/,/^(?:([Ee][Xx][Pp][Rr][Ee][Ss][Ss][Ii][Oo][Nn]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\\/\\/)/,/^(?:\\{)/,/^(?:\\})/,/^(?:&)/,/^(?:\\|\\|)/,/^(?:\\|)/,/^(?:,)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\[)/,/^(?:\\])/,/^(?:\\$)/,/^(?:!)/,/^(?:\\^\\^)/,/^(?:\\^)/,/^(?:\\.)/,/^(?:~)/,/^(?:;)/,/^(?:\\*)/,/^(?:\\+)/,/^(?:\\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\\b)/,/^(?:false\\b)/,/^(?:$)/,/^(?:[a-zA-Z0-9_-]+)/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (true) {\nexports.parser = ShExJison;\nexports.Parser = ShExJison.Parser;\nexports.parse = function () { return ShExJison.parse.apply(ShExJison, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\").readFileSync(__webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\").normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif ( true && __webpack_require__.c[__webpack_require__.s] === module) {\n  exports.main(process.argv.slice(1));\n}\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack://blues/./node_modules/@shexjs/parser/lib/ShExJison.js?");

/***/ }),

/***/ "./node_modules/@shexjs/parser/shex-parser.js":
/*!****************************************************!*\
  !*** ./node_modules/@shexjs/parser/shex-parser.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var ShExParser = (function () {\n\n// stolen as much as possible from SPARQL.js\nif (true) {\n  ShExJison = __webpack_require__(/*! ./lib/ShExJison */ \"./node_modules/@shexjs/parser/lib/ShExJison.js\").Parser; // node environment\n} else {}\n\n// Creates a ShEx parser with the given pre-defined prefixes\nvar prepareParser = function (baseIRI, prefixes, schemaOptions) {\n  schemaOptions = schemaOptions || {};\n  // Create a copy of the prefixes\n  var prefixesCopy = {};\n  for (var prefix in prefixes || {})\n    prefixesCopy[prefix] = prefixes[prefix];\n\n  // Create a new parser with the given prefixes\n  // (Workaround for https://github.com/zaach/jison/issues/241)\n  var parser = new ShExJison();\n\n  function runParser () {\n    // ShExJison.base = baseIRI || \"\";\n    // ShExJison.basePath = ShExJison.base.replace(/[^\\/]*$/, '');\n    // ShExJison.baseRoot = ShExJison.base.match(/^(?:[a-z]+:\\/*)?[^\\/]*/)[0];\n    ShExJison._prefixes = Object.create(prefixesCopy);\n    ShExJison._imports = [];\n    ShExJison._setBase(baseIRI);\n    ShExJison._setFileName(baseIRI);\n    ShExJison.options = schemaOptions;\n    let errors = [];\n    ShExJison.recoverable = e =>\n      errors.push(e);\n    let ret = null;\n    try {\n      ret = ShExJison.prototype.parse.apply(parser, arguments);\n    } catch (e) {\n      errors.push(e);\n    }\n    ShExJison.reset();\n    errors.forEach(e => {\n      if (\"hash\" in e) {\n        const hash = e.hash;\n        const location = hash.loc;\n        delete hash.loc;\n        Object.assign(e, hash, {location: location});\n      }\n      return e;\n    })\n    if (errors.length == 1) {\n      errors[0].parsed = ret;\n      throw errors[0];\n    } else if (errors.length) {\n      const all = new Error(\"\" + errors.length  + \" parser errors:\\n\" + errors.map(\n        e => contextError(e, parser.yy.lexer)\n      ).join(\"\\n\"));\n      all.errors = errors;\n      all.parsed = ret;\n      throw all;\n    } else {\n      return ret;\n    }\n  }\n  parser.parse = runParser;\n  parser._setBase = function (base) {\n    ShExJison._setBase;\n    baseIRI = base;\n  }\n  parser._setFileName = ShExJison._setFileName;\n  parser._setOptions = function (opts) { ShExJison.options = opts; };\n  parser._resetBlanks = ShExJison._resetBlanks;\n  parser.reset = ShExJison.reset;\n  ShExJison.options = schemaOptions;\n  return parser;\n\n  function contextError (e, lexer) {\n    // use the lexer's pretty-printing\n    var line = e.location.first_line;\n    var col  = e.location.first_column + 1;\n    var posStr = \"pos\" in e.hash ? \"\\n\" + e.hash.pos : \"\"\n    return `${baseIRI}\\n line: ${line}, column: ${col}: ${e.message}${posStr}`;\n  }\n}\n\nreturn {\n  construct: prepareParser\n};\n})();\n\nif (true)\n  module.exports = ShExParser;\n\n\n//# sourceURL=webpack://blues/./node_modules/@shexjs/parser/shex-parser.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/canonicalize/lib/canonicalize.js":
/*!*******************************************************!*\
  !*** ./node_modules/canonicalize/lib/canonicalize.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* jshint esversion: 6 */\n/* jslint node: true */\n\n\nmodule.exports = function (object) {\n  return serialize(object);\n\n  function serialize (object) {\n    if (object === null || typeof object !== 'object' || object.toJSON != null) {\n      return JSON.stringify(object);\n    }\n    if (Array.isArray(object) && object.length === 0) {\n      return '[]';\n    }\n    if (Array.isArray(object) && object.length === 1) {\n      return '[' + serialize(object[0]) + ']';\n    }\n    if (Array.isArray(object)) {\n      return '[' + object.reduce((t, cv, ci) => {\n        t = (ci === 1 ? serialize(t) : t);\n        return t + ',' + serialize(cv);\n      }) + ']';\n    }\n    const keys = Object.keys(object);\n    if (keys.length === 0) {\n      return '{}';\n    }\n    if (keys.length === 1) {\n      return '{' + serialize(keys[0]) + ':' + serialize(object[keys[0]]) + '}';\n    }\n    return '{' + keys.sort().reduce((t, cv, ci) => {\n      t = (ci === 1 ? serialize(t) + ':' + serialize(object[t]) : t);\n      return t + ',' + serialize(cv) + ':' + serialize(object[cv]);\n    }) + '}';\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/canonicalize/lib/canonicalize.js?");

/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://blues/./node_modules/core-util-is/lib/util.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/hierarchy-closure/hierarchy-closure.js":
/*!*************************************************************!*\
  !*** ./node_modules/hierarchy-closure/hierarchy-closure.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var HierarchyClosure = (function () {\n  /** create a hierarchy object\n   * This object keeps track of direct children and parents as well as transitive children and parents.\n   */\n  function makeHierarchy () {\n    let roots = {}\n    let parents = {}\n    let children = {}\n    let holders = {}\n    return {\n      add: function (parent, child) {\n        if (// test if this is a novel entry.\n          (parent in children && children[parent].indexOf(child) !== -1)) {\n          return\n        }\n        let target = parent in holders\n          ? getNode(parent)\n          : (roots[parent] = getNode(parent)) // add new parents to roots.\n        let value = getNode(child)\n\n        target[child] = value\n        delete roots[child]\n\n        // // maintain hierarchy (direct and confusing)\n        // children[parent] = children[parent].concat(child, children[child])\n        // children[child].forEach(c => parents[c] = parents[c].concat(parent, parents[parent]))\n        // parents[child] = parents[child].concat(parent, parents[parent])\n        // parents[parent].forEach(p => children[p] = children[p].concat(child, children[child]))\n\n        // maintain hierarchy (generic and confusing)\n        updateClosure(children, parents, child, parent)\n        updateClosure(parents, children, parent, child)\n        function updateClosure (container, members, near, far) {\n          container[far] = container[far].filter(\n            e => /* e !== near && */ container[near].indexOf(e) === -1\n          ).concat(container[near].indexOf(near) === -1 ? [near] : [], container[near])\n          container[near].forEach(\n            n => (members[n] = members[n].filter(\n              e => e !== far && members[far].indexOf(e) === -1\n            ).concat(members[far].indexOf(far) === -1 ? [far] : [], members[far]))\n          )\n        }\n\n        function getNode (node) {\n          if (!(node in holders)) {\n            parents[node] = []\n            children[node] = []\n            holders[node] = {}\n          }\n          return holders[node]\n        }\n      },\n      roots: roots,\n      parents: parents,\n      children: children\n    }\n  }\n\n  function depthFirst (n, f, p) {\n    return Object.keys(n).reduce((ret, k) => {\n      return ret.concat(\n        depthFirst(n[k], f, k),\n        p ? f(k, p) : []) // outer invocation can have null parent\n    }, [])\n  }\n\n  return { create: makeHierarchy, depthFirst }\n})()\n\n/* istanbul ignore next */\nif (true) {\n  module.exports = HierarchyClosure\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/hierarchy-closure/hierarchy-closure.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/ActiveContextCache.js":
/*!*******************************************************!*\
  !*** ./node_modules/jsonld/lib/ActiveContextCache.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst {clone} = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\n\nmodule.exports = class ActiveContextCache {\n  /**\n   * Creates an active context cache.\n   *\n   * @param size the maximum size of the cache.\n   */\n  constructor(size = 100) {\n    this.order = [];\n    this.cache = new Map();\n    this.size = size;\n  }\n\n  get(activeCtx, localCtx) {\n    const level1 = this.cache.get(activeCtx);\n    if(level1) {\n      const key = JSON.stringify(localCtx);\n      const result = level1.get(key);\n      return result || null;\n    }\n    return null;\n  }\n\n  set(activeCtx, localCtx, result) {\n    if(this.order.length === this.size) {\n      const entry = this.order.shift();\n      this.cache.get(entry.activeCtx).delete(entry.localCtx);\n    }\n    const key = JSON.stringify(localCtx);\n    this.order.push({activeCtx, localCtx: key});\n    let level1 = this.cache.get(activeCtx);\n    if(!level1) {\n      level1 = new Map();\n      this.cache.set(activeCtx, level1);\n    }\n    level1.set(key, clone(result));\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/ActiveContextCache.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/JsonLdError.js":
/*!************************************************!*\
  !*** ./node_modules/jsonld/lib/JsonLdError.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nmodule.exports = class JsonLdError extends Error {\n  /**\n   * Creates a JSON-LD Error.\n   *\n   * @param msg the error message.\n   * @param type the error type.\n   * @param details the error details.\n   */\n  constructor(\n    message = 'An unspecified JSON-LD error occurred.',\n    name = 'jsonld.Error',\n    details = {}) {\n    super(message);\n    this.name = name;\n    this.message = message;\n    this.details = details;\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/JsonLdError.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/JsonLdProcessor.js":
/*!****************************************************!*\
  !*** ./node_modules/jsonld/lib/JsonLdProcessor.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nmodule.exports = jsonld => {\n  class JsonLdProcessor {\n    toString() {\n      return '[object JsonLdProcessor]';\n    }\n  }\n  Object.defineProperty(JsonLdProcessor, 'prototype', {\n    writable: false,\n    enumerable: false\n  });\n  Object.defineProperty(JsonLdProcessor.prototype, 'constructor', {\n    writable: true,\n    enumerable: false,\n    configurable: true,\n    value: JsonLdProcessor\n  });\n\n  // The Web IDL test harness will check the number of parameters defined in\n  // the functions below. The number of parameters must exactly match the\n  // required (non-optional) parameters of the JsonLdProcessor interface as\n  // defined here:\n  // https://www.w3.org/TR/json-ld-api/#the-jsonldprocessor-interface\n\n  JsonLdProcessor.compact = function(input, ctx) {\n    if(arguments.length < 2) {\n      return Promise.reject(\n        new TypeError('Could not compact, too few arguments.'));\n    }\n    return jsonld.compact(input, ctx);\n  };\n  JsonLdProcessor.expand = function(input) {\n    if(arguments.length < 1) {\n      return Promise.reject(\n        new TypeError('Could not expand, too few arguments.'));\n    }\n    return jsonld.expand(input);\n  };\n  JsonLdProcessor.flatten = function(input) {\n    if(arguments.length < 1) {\n      return Promise.reject(\n        new TypeError('Could not flatten, too few arguments.'));\n    }\n    return jsonld.flatten(input);\n  };\n\n  return JsonLdProcessor;\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/JsonLdProcessor.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/NQuads.js":
/*!*******************************************!*\
  !*** ./node_modules/jsonld/lib/NQuads.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n// TODO: move `NQuads` to its own package\nmodule.exports = __webpack_require__(/*! rdf-canonize */ \"./node_modules/rdf-canonize/lib/index.js\").NQuads;\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/NQuads.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/Rdfa.js":
/*!*****************************************!*\
  !*** ./node_modules/jsonld/lib/Rdfa.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n/* global Node, XMLSerializer */\n\n\nconst {\n  RDF_LANGSTRING,\n  RDF_PLAIN_LITERAL,\n  RDF_OBJECT,\n  RDF_XML_LITERAL,\n  XSD_STRING,\n} = __webpack_require__(/*! ./constants */ \"./node_modules/jsonld/lib/constants.js\");\n\nlet _Node;\nif(typeof Node !== 'undefined') {\n  _Node = Node;\n} else {\n  _Node = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n}\n\nmodule.exports = class Rdfa {\n  /**\n   * Parses the RDF dataset found via the data object from the RDFa API.\n   *\n   * @param data the RDFa API data object.\n   *\n   * @return the RDF dataset.\n   */\n  parse(data) {\n    const dataset = {};\n    dataset['@default'] = [];\n\n    const subjects = data.getSubjects();\n    for(let si = 0; si < subjects.length; ++si) {\n      const subject = subjects[si];\n      if(subject === null) {\n        continue;\n      }\n\n      // get all related triples\n      const triples = data.getSubjectTriples(subject);\n      if(triples === null) {\n        continue;\n      }\n      const predicates = triples.predicates;\n      for(const predicate in predicates) {\n        // iterate over objects\n        const objects = predicates[predicate].objects;\n        for(let oi = 0; oi < objects.length; ++oi) {\n          const object = objects[oi];\n\n          // create RDF triple\n          const triple = {};\n\n          // add subject\n          if(subject.indexOf('_:') === 0) {\n            triple.subject = {type: 'blank node', value: subject};\n          } else {\n            triple.subject = {type: 'IRI', value: subject};\n          }\n\n          // add predicate\n          if(predicate.indexOf('_:') === 0) {\n            triple.predicate = {type: 'blank node', value: predicate};\n          } else {\n            triple.predicate = {type: 'IRI', value: predicate};\n          }\n\n          // serialize XML literal\n          let value = object.value;\n          if(object.type === RDF_XML_LITERAL) {\n            // initialize XMLSerializer\n            const XMLSerializer = getXMLSerializerClass();\n            const serializer = new XMLSerializer();\n            value = '';\n            for(let x = 0; x < object.value.length; x++) {\n              if(object.value[x].nodeType === _Node.ELEMENT_NODE) {\n                value += serializer.serializeToString(object.value[x]);\n              } else if(object.value[x].nodeType === _Node.TEXT_NODE) {\n                value += object.value[x].nodeValue;\n              }\n            }\n          }\n\n          // add object\n          triple.object = {};\n\n          // object is an IRI\n          if(object.type === RDF_OBJECT) {\n            if(object.value.indexOf('_:') === 0) {\n              triple.object.type = 'blank node';\n            } else {\n              triple.object.type = 'IRI';\n            }\n          } else {\n            // object is a literal\n            triple.object.type = 'literal';\n            if(object.type === RDF_PLAIN_LITERAL) {\n              if(object.language) {\n                triple.object.datatype = RDF_LANGSTRING;\n                triple.object.language = object.language;\n              } else {\n                triple.object.datatype = XSD_STRING;\n              }\n            } else {\n              triple.object.datatype = object.type;\n            }\n          }\n          triple.object.value = value;\n\n          // add triple to dataset in default graph\n          dataset['@default'].push(triple);\n        }\n      }\n    }\n\n    return dataset;\n  }\n};\n\nfunction getXMLSerializerClass() {\n  if(typeof XMLSerializer === 'undefined') {\n    return __webpack_require__(/*! xmldom */ 3).XMLSerializer;\n  }\n  return XMLSerializer;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/Rdfa.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/RequestQueue.js":
/*!*************************************************!*\
  !*** ./node_modules/jsonld/lib/RequestQueue.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst {callbackify, normalizeDocumentLoader} = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\n\nmodule.exports = class RequestQueue {\n  /**\n   * Creates a simple queue for requesting documents.\n   */\n  constructor() {\n    this._requests = {};\n    this.add = callbackify(this.add.bind(this));\n  }\n\n  wrapLoader(loader) {\n    const self = this;\n    self._loader = normalizeDocumentLoader(loader);\n    return function(/* url */) {\n      return self.add.apply(self, arguments);\n    };\n  }\n\n  async add(url) {\n    const self = this;\n\n    let promise = self._requests[url];\n    if(promise) {\n      // URL already queued, wait for it to load\n      return Promise.resolve(promise);\n    }\n\n    // queue URL and load it\n    promise = self._requests[url] = self._loader(url);\n\n    try {\n      return await promise;\n    } finally {\n      delete self._requests[url];\n    }\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/RequestQueue.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/compact.js":
/*!********************************************!*\
  !*** ./node_modules/jsonld/lib/compact.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst JsonLdError = __webpack_require__(/*! ./JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\n\nconst {\n  isList: _isList,\n  isValue: _isValue,\n  isGraph: _isGraph,\n  isSimpleGraph: _isSimpleGraph,\n  isSubjectReference: _isSubjectReference\n} = __webpack_require__(/*! ./graphTypes */ \"./node_modules/jsonld/lib/graphTypes.js\");\n\nconst {\n  expandIri: _expandIri,\n  getContextValue: _getContextValue,\n  isKeyword: _isKeyword,\n  process: _processContext\n} = __webpack_require__(/*! ./context */ \"./node_modules/jsonld/lib/context.js\");\n\nconst {\n  removeBase: _removeBase\n} = __webpack_require__(/*! ./url */ \"./node_modules/jsonld/lib/url.js\");\n\nconst {\n  addValue: _addValue,\n  asArray: _asArray,\n  compareShortestLeast: _compareShortestLeast\n} = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Recursively compacts an element using the given active context. All values\n * must be in expanded form before this method is called.\n *\n * @param activeCtx the active context to use.\n * @param activeProperty the compacted property associated with the element\n *          to compact, null for none.\n * @param element the element to compact.\n * @param options the compaction options.\n * @param compactionMap the compaction map to use.\n *\n * @return the compacted value.\n */\napi.compact = ({\n  activeCtx,\n  activeProperty = null,\n  element,\n  options = {},\n  compactionMap = () => undefined\n}) => {\n  // recursively compact array\n  if(_isArray(element)) {\n    let rval = [];\n    for(let i = 0; i < element.length; ++i) {\n      // compact, dropping any null values unless custom mapped\n      let compacted = api.compact({\n        activeCtx,\n        activeProperty,\n        element: element[i],\n        options,\n        compactionMap\n      });\n      if(compacted === null) {\n        // TODO: use `await` to support async\n        compacted = compactionMap({\n          unmappedValue: element[i],\n          activeCtx,\n          activeProperty,\n          parent: element,\n          index: i,\n          options\n        });\n        if(compacted === undefined) {\n          continue;\n        }\n      }\n      rval.push(compacted);\n    }\n    if(options.compactArrays && rval.length === 1) {\n      // use single element if no container is specified\n      const container = _getContextValue(\n        activeCtx, activeProperty, '@container') || [];\n      if(container.length === 0) {\n        rval = rval[0];\n      }\n    }\n    return rval;\n  }\n\n  // use any scoped context on activeProperty\n  const ctx = _getContextValue(activeCtx, activeProperty, '@context');\n  if(!_isUndefined(ctx)) {\n    // Note: spec's `from term` var is named `isPropertyTermScopedContext`\n    activeCtx = _processContext({\n      activeCtx,\n      localCtx: ctx,\n      isPropertyTermScopedContext: true,\n      options\n    });\n  }\n\n  // recursively compact object\n  if(_isObject(element)) {\n    if(options.link && '@id' in element &&\n      options.link.hasOwnProperty(element['@id'])) {\n      // check for a linked element to reuse\n      const linked = options.link[element['@id']];\n      for(let i = 0; i < linked.length; ++i) {\n        if(linked[i].expanded === element) {\n          return linked[i].compacted;\n        }\n      }\n    }\n\n    // do value compaction on @values and subject references\n    if(_isValue(element) || _isSubjectReference(element)) {\n      const rval =\n        api.compactValue({activeCtx, activeProperty, value: element, options});\n      if(options.link && _isSubjectReference(element)) {\n        // store linked element\n        if(!(options.link.hasOwnProperty(element['@id']))) {\n          options.link[element['@id']] = [];\n        }\n        options.link[element['@id']].push({expanded: element, compacted: rval});\n      }\n      return rval;\n    }\n\n    // if expanded property is @list and we're contained within a list\n    // container, recursively compact this item to an array\n    if(_isList(element)) {\n      const container = _getContextValue(\n        activeCtx, activeProperty, '@container') || [];\n      if(container.includes('@list')) {\n        return api.compact({\n          activeCtx,\n          activeProperty,\n          element: element['@list'],\n          options,\n          compactionMap\n        });\n      }\n    }\n\n    // FIXME: avoid misuse of active property as an expanded property?\n    const insideReverse = (activeProperty === '@reverse');\n\n    const rval = {};\n\n    // revert type scoped context\n    activeCtx = activeCtx.revertTypeScopedContext();\n\n    if(options.link && '@id' in element) {\n      // store linked element\n      if(!options.link.hasOwnProperty(element['@id'])) {\n        options.link[element['@id']] = [];\n      }\n      options.link[element['@id']].push({expanded: element, compacted: rval});\n    }\n\n    // apply any context defined on an alias of @type\n    // if key is @type and any compacted value is a term having a local\n    // context, overlay that context\n    let types = element['@type'] || [];\n    if(types.length > 1) {\n      types = Array.from(types).sort();\n    }\n    // find all type-scoped contexts based on current context, prior to\n    // updating it\n    const typeContext = activeCtx;\n    for(const type of types) {\n      const compactedType = api.compactIri(\n        {activeCtx: typeContext, iri: type, relativeTo: {vocab: true}});\n\n      // Use any type-scoped context defined on this value\n      const ctx = _getContextValue(typeContext, compactedType, '@context');\n      if(!_isUndefined(ctx)) {\n        activeCtx = _processContext({\n          activeCtx,\n          localCtx: ctx,\n          options,\n          isTypeScopedContext: true\n        });\n      }\n    }\n\n    // process element keys in order\n    const keys = Object.keys(element).sort();\n    for(const expandedProperty of keys) {\n      const expandedValue = element[expandedProperty];\n\n      // compact @id and @type(s)\n      if(expandedProperty === '@id' || expandedProperty === '@type') {\n        // if using a type-scoped context, resolve type values against previous\n        // context\n        const isType = expandedProperty === '@type';\n        const valueContext = isType ?\n          (activeCtx.previousContext || activeCtx) : activeCtx;\n        let compactedValue = _asArray(expandedValue).map(\n          expandedIri => api.compactIri({\n            activeCtx: valueContext,\n            iri: expandedIri,\n            relativeTo: {vocab: isType}\n          }));\n        if(compactedValue.length === 1) {\n          compactedValue = compactedValue[0];\n        }\n\n        // use keyword alias and add value\n        const alias = api.compactIri(\n          {activeCtx, iri: expandedProperty, relativeTo: {vocab: true}});\n        const isArray = _isArray(compactedValue) && expandedValue.length === 0;\n        _addValue(rval, alias, compactedValue, {propertyIsArray: isArray});\n        continue;\n      }\n\n      // handle @reverse\n      if(expandedProperty === '@reverse') {\n        // recursively compact expanded value\n        const compactedValue = api.compact({\n          activeCtx,\n          activeProperty: '@reverse',\n          element: expandedValue,\n          options,\n          compactionMap\n        });\n\n        // handle double-reversed properties\n        for(const compactedProperty in compactedValue) {\n          if(activeCtx.mappings.has(compactedProperty) &&\n            activeCtx.mappings.get(compactedProperty).reverse) {\n            const value = compactedValue[compactedProperty];\n            const container = _getContextValue(\n              activeCtx, compactedProperty, '@container') || [];\n            const useArray = (\n              container.includes('@set') || !options.compactArrays);\n            _addValue(\n              rval, compactedProperty, value, {propertyIsArray: useArray});\n            delete compactedValue[compactedProperty];\n          }\n        }\n\n        if(Object.keys(compactedValue).length > 0) {\n          // use keyword alias and add value\n          const alias = api.compactIri({\n            activeCtx,\n            iri: expandedProperty,\n            relativeTo: {vocab: true}\n          });\n          _addValue(rval, alias, compactedValue);\n        }\n\n        continue;\n      }\n\n      if(expandedProperty === '@preserve') {\n        // compact using activeProperty\n        const compactedValue = api.compact({\n          activeCtx,\n          activeProperty,\n          element: expandedValue,\n          options,\n          compactionMap});\n\n        if(!(_isArray(compactedValue) && compactedValue.length === 0)) {\n          _addValue(rval, expandedProperty, compactedValue);\n        }\n        continue;\n      }\n\n      // handle @index property\n      if(expandedProperty === '@index') {\n        // drop @index if inside an @index container\n        const container = _getContextValue(\n          activeCtx, activeProperty, '@container') || [];\n        if(container.includes('@index')) {\n          continue;\n        }\n\n        // use keyword alias and add value\n        const alias = api.compactIri({\n          activeCtx,\n          iri: expandedProperty,\n          relativeTo: {vocab: true}\n        });\n        _addValue(rval, alias, expandedValue);\n        continue;\n      }\n\n      // skip array processing for keywords that aren't @graph or @list\n      if(expandedProperty !== '@graph' && expandedProperty !== '@list' &&\n        _isKeyword(expandedProperty)) {\n        // use keyword alias and add value as is\n        const alias = api.compactIri({\n          activeCtx,\n          iri: expandedProperty,\n          relativeTo: {vocab: true}\n        });\n        _addValue(rval, alias, expandedValue);\n        continue;\n      }\n\n      // Note: expanded value must be an array due to expansion algorithm.\n      if(!_isArray(expandedValue)) {\n        throw new JsonLdError(\n          'JSON-LD expansion error; expanded value must be an array.',\n          'jsonld.SyntaxError');\n      }\n\n      // preserve empty arrays\n      if(expandedValue.length === 0) {\n        const itemActiveProperty = api.compactIri({\n          activeCtx,\n          iri: expandedProperty,\n          value: expandedValue,\n          relativeTo: {vocab: true},\n          reverse: insideReverse\n        });\n        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ?\n          activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;\n        let nestResult = rval;\n        if(nestProperty) {\n          _checkNestProperty(activeCtx, nestProperty, options);\n          if(!_isObject(rval[nestProperty])) {\n            rval[nestProperty] = {};\n          }\n          nestResult = rval[nestProperty];\n        }\n        _addValue(\n          nestResult, itemActiveProperty, expandedValue, {\n            propertyIsArray: true\n          });\n      }\n\n      // recusively process array values\n      for(const expandedItem of expandedValue) {\n        // compact property and get container type\n        const itemActiveProperty = api.compactIri({\n          activeCtx,\n          iri: expandedProperty,\n          value: expandedItem,\n          relativeTo: {vocab: true},\n          reverse: insideReverse\n        });\n\n        // if itemActiveProperty is a @nest property, add values to nestResult,\n        // otherwise rval\n        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ?\n          activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;\n        let nestResult = rval;\n        if(nestProperty) {\n          _checkNestProperty(activeCtx, nestProperty, options);\n          if(!_isObject(rval[nestProperty])) {\n            rval[nestProperty] = {};\n          }\n          nestResult = rval[nestProperty];\n        }\n\n        const container = _getContextValue(\n          activeCtx, itemActiveProperty, '@container') || [];\n\n        // get simple @graph or @list value if appropriate\n        const isGraph = _isGraph(expandedItem);\n        const isList = _isList(expandedItem);\n        let inner;\n        if(isList) {\n          inner = expandedItem['@list'];\n        } else if(isGraph) {\n          inner = expandedItem['@graph'];\n        }\n\n        // recursively compact expanded item\n        let compactedItem = api.compact({\n          activeCtx,\n          activeProperty: itemActiveProperty,\n          element: (isList || isGraph) ? inner : expandedItem,\n          options,\n          compactionMap\n        });\n\n        // handle @list\n        if(isList) {\n          // ensure @list value is an array\n          if(!_isArray(compactedItem)) {\n            compactedItem = [compactedItem];\n          }\n\n          if(!container.includes('@list')) {\n            // wrap using @list alias\n            compactedItem = {\n              [api.compactIri({\n                activeCtx,\n                iri: '@list',\n                relativeTo: {vocab: true}\n              })]: compactedItem\n            };\n\n            // include @index from expanded @list, if any\n            if('@index' in expandedItem) {\n              compactedItem[api.compactIri({\n                activeCtx,\n                iri: '@index',\n                relativeTo: {vocab: true}\n              })] = expandedItem['@index'];\n            }\n          } else {\n            _addValue(nestResult, itemActiveProperty, compactedItem, {\n              valueIsArray: true,\n              allowDuplicate: true\n            });\n            continue;\n          }\n        }\n\n        // Graph object compaction cases\n        if(isGraph) {\n          if(container.includes('@graph') && (container.includes('@id') ||\n            container.includes('@index') && _isSimpleGraph(expandedItem))) {\n            // get or create the map object\n            let mapObject;\n            if(nestResult.hasOwnProperty(itemActiveProperty)) {\n              mapObject = nestResult[itemActiveProperty];\n            } else {\n              nestResult[itemActiveProperty] = mapObject = {};\n            }\n\n            // index on @id or @index or alias of @none\n            const key = (container.includes('@id') ?\n              expandedItem['@id'] : expandedItem['@index']) ||\n              api.compactIri({activeCtx, iri: '@none', vocab: true});\n            // add compactedItem to map, using value of `@id` or a new blank\n            // node identifier\n\n            _addValue(\n              mapObject, key, compactedItem, {\n                propertyIsArray:\n                  (!options.compactArrays || container.includes('@set'))\n              });\n          } else if(container.includes('@graph') &&\n            _isSimpleGraph(expandedItem)) {\n            // container includes @graph but not @id or @index and value is a\n            // simple graph object add compact value\n            _addValue(\n              nestResult, itemActiveProperty, compactedItem, {\n                propertyIsArray:\n                  (!options.compactArrays || container.includes('@set'))\n              });\n          } else {\n            // wrap using @graph alias, remove array if only one item and\n            // compactArrays not set\n            if(_isArray(compactedItem) && compactedItem.length === 1 &&\n              options.compactArrays) {\n              compactedItem = compactedItem[0];\n            }\n            compactedItem = {\n              [api.compactIri({\n                activeCtx,\n                iri: '@graph',\n                relativeTo: {vocab: true}\n              })]: compactedItem\n            };\n\n            // include @id from expanded graph, if any\n            if('@id' in expandedItem) {\n              compactedItem[api.compactIri({\n                activeCtx,\n                iri: '@id',\n                relativeTo: {vocab: true}\n              })] = expandedItem['@id'];\n            }\n\n            // include @index from expanded graph, if any\n            if('@index' in expandedItem) {\n              compactedItem[api.compactIri({\n                activeCtx,\n                iri: '@index',\n                relativeTo: {vocab: true}\n              })] = expandedItem['@index'];\n            }\n            _addValue(\n              nestResult, itemActiveProperty, compactedItem, {\n                propertyIsArray:\n                  (!options.compactArrays || container.includes('@set'))\n              });\n          }\n        } else if(container.includes('@language') ||\n          container.includes('@index') || container.includes('@id') ||\n          container.includes('@type')) {\n          // handle language and index maps\n          // get or create the map object\n          let mapObject;\n          if(nestResult.hasOwnProperty(itemActiveProperty)) {\n            mapObject = nestResult[itemActiveProperty];\n          } else {\n            nestResult[itemActiveProperty] = mapObject = {};\n          }\n\n          let key;\n          if(container.includes('@language')) {\n          // if container is a language map, simplify compacted value to\n          // a simple string\n            if(_isValue(compactedItem)) {\n              compactedItem = compactedItem['@value'];\n            }\n            key = expandedItem['@language'];\n          } else if(container.includes('@index')) {\n            key = expandedItem['@index'];\n          } else if(container.includes('@id')) {\n            const idKey = api.compactIri({activeCtx, iri: '@id', vocab: true});\n            key = compactedItem[idKey];\n            delete compactedItem[idKey];\n          } else if(container.includes('@type')) {\n            const typeKey = api.compactIri({\n              activeCtx,\n              iri: '@type',\n              vocab: true\n            });\n            let types;\n            [key, ...types] = _asArray(compactedItem[typeKey] || []);\n            switch(types.length) {\n              case 0:\n                delete compactedItem[typeKey];\n                break;\n              case 1:\n                compactedItem[typeKey] = types[0];\n                break;\n              default:\n                compactedItem[typeKey] = types;\n                break;\n            }\n          }\n\n          // if compacting this value which has no key, index on @none\n          if(!key) {\n            key = api.compactIri({activeCtx, iri: '@none', vocab: true});\n          }\n          // add compact value to map object using key from expanded value\n          // based on the container type\n          _addValue(\n            mapObject, key, compactedItem, {\n              propertyIsArray: container.includes('@set')\n            });\n        } else {\n          // use an array if: compactArrays flag is false,\n          // @container is @set or @list , value is an empty\n          // array, or key is @graph\n          const isArray = (!options.compactArrays ||\n            container.includes('@set') || container.includes('@list') ||\n            (_isArray(compactedItem) && compactedItem.length === 0) ||\n            expandedProperty === '@list' || expandedProperty === '@graph');\n\n          // add compact value\n          _addValue(\n            nestResult, itemActiveProperty, compactedItem,\n            {propertyIsArray: isArray});\n        }\n      }\n    }\n\n    return rval;\n  }\n\n  // only primitives remain which are already compact\n  return element;\n};\n\n/**\n * Compacts an IRI or keyword into a term or prefix if it can be. If the\n * IRI has an associated value it may be passed.\n *\n * @param activeCtx the active context to use.\n * @param iri the IRI to compact.\n * @param value the value to check or null.\n * @param relativeTo options for how to compact IRIs:\n *          vocab: true to split after @vocab, false not to.\n * @param reverse true if a reverse property is being compacted, false if not.\n *\n * @return the compacted term, prefix, keyword alias, or the original IRI.\n */\napi.compactIri = ({\n  activeCtx,\n  iri,\n  value = null,\n  relativeTo = {vocab: false},\n  reverse = false\n}) => {\n  // can't compact null\n  if(iri === null) {\n    return iri;\n  }\n\n  // if context is from a property term scoped context composed with a\n  // type-scoped context, then use the previous context instead\n  if(activeCtx.isPropertyTermScoped && activeCtx.previousContext) {\n    activeCtx = activeCtx.previousContext;\n  }\n\n  const inverseCtx = activeCtx.getInverse();\n\n  // if term is a keyword, it may be compacted to a simple alias\n  if(_isKeyword(iri) &&\n    iri in inverseCtx &&\n    '@none' in inverseCtx[iri] &&\n    '@type' in inverseCtx[iri]['@none'] &&\n    '@none' in inverseCtx[iri]['@none']['@type']) {\n    return inverseCtx[iri]['@none']['@type']['@none'];\n  }\n\n  // use inverse context to pick a term if iri is relative to vocab\n  if(relativeTo.vocab && iri in inverseCtx) {\n    const defaultLanguage = activeCtx['@language'] || '@none';\n\n    // prefer @index if available in value\n    const containers = [];\n    if(_isObject(value) && '@index' in value && !('@graph' in value)) {\n      containers.push('@index', '@index@set');\n    }\n\n    // if value is a preserve object, use its value\n    if(_isObject(value) && '@preserve' in value) {\n      value = value['@preserve'][0];\n    }\n\n    // prefer most specific container including @graph, prefering @set\n    // variations\n    if(_isGraph(value)) {\n      // favor indexmap if the graph is indexed\n      if('@index' in value) {\n        containers.push(\n          '@graph@index', '@graph@index@set', '@index', '@index@set');\n      }\n      // favor idmap if the graph is has an @id\n      if('@id' in value) {\n        containers.push(\n          '@graph@id', '@graph@id@set');\n      }\n      containers.push('@graph', '@graph@set', '@set');\n      // allow indexmap if the graph is not indexed\n      if(!('@index' in value)) {\n        containers.push(\n          '@graph@index', '@graph@index@set', '@index', '@index@set');\n      }\n      // allow idmap if the graph does not have an @id\n      if(!('@id' in value)) {\n        containers.push('@graph@id', '@graph@id@set');\n      }\n    } else if(_isObject(value) && !_isValue(value)) {\n      containers.push('@id', '@id@set', '@type', '@set@type');\n    }\n\n    // defaults for term selection based on type/language\n    let typeOrLanguage = '@language';\n    let typeOrLanguageValue = '@null';\n\n    if(reverse) {\n      typeOrLanguage = '@type';\n      typeOrLanguageValue = '@reverse';\n      containers.push('@set');\n    } else if(_isList(value)) {\n      // choose the most specific term that works for all elements in @list\n      // only select @list containers if @index is NOT in value\n      if(!('@index' in value)) {\n        containers.push('@list');\n      }\n      const list = value['@list'];\n      if(list.length === 0) {\n        // any empty list can be matched against any term that uses the\n        // @list container regardless of @type or @language\n        typeOrLanguage = '@any';\n        typeOrLanguageValue = '@none';\n      } else {\n        let commonLanguage = (list.length === 0) ? defaultLanguage : null;\n        let commonType = null;\n        for(let i = 0; i < list.length; ++i) {\n          const item = list[i];\n          let itemLanguage = '@none';\n          let itemType = '@none';\n          if(_isValue(item)) {\n            if('@language' in item) {\n              itemLanguage = item['@language'];\n            } else if('@type' in item) {\n              itemType = item['@type'];\n            } else {\n              // plain literal\n              itemLanguage = '@null';\n            }\n          } else {\n            itemType = '@id';\n          }\n          if(commonLanguage === null) {\n            commonLanguage = itemLanguage;\n          } else if(itemLanguage !== commonLanguage && _isValue(item)) {\n            commonLanguage = '@none';\n          }\n          if(commonType === null) {\n            commonType = itemType;\n          } else if(itemType !== commonType) {\n            commonType = '@none';\n          }\n          // there are different languages and types in the list, so choose\n          // the most generic term, no need to keep iterating the list\n          if(commonLanguage === '@none' && commonType === '@none') {\n            break;\n          }\n        }\n        commonLanguage = commonLanguage || '@none';\n        commonType = commonType || '@none';\n        if(commonType !== '@none') {\n          typeOrLanguage = '@type';\n          typeOrLanguageValue = commonType;\n        } else {\n          typeOrLanguageValue = commonLanguage;\n        }\n      }\n    } else {\n      if(_isValue(value)) {\n        if('@language' in value && !('@index' in value)) {\n          containers.push('@language', '@language@set');\n          typeOrLanguageValue = value['@language'];\n        } else if('@type' in value) {\n          typeOrLanguage = '@type';\n          typeOrLanguageValue = value['@type'];\n        }\n      } else {\n        typeOrLanguage = '@type';\n        typeOrLanguageValue = '@id';\n      }\n      containers.push('@set');\n    }\n\n    // do term selection\n    containers.push('@none');\n\n    // an index map can be used to index values using @none, so add as a low\n    // priority\n    if(_isObject(value) && !('@index' in value)) {\n      // allow indexing even if no @index present\n      containers.push('@index', '@index@set');\n    }\n\n    // values without type or language can use @language map\n    if(_isValue(value) && Object.keys(value).length === 1) {\n      // allow indexing even if no @index present\n      containers.push('@language', '@language@set');\n    }\n\n    const term = _selectTerm(\n      activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue);\n    if(term !== null) {\n      return term;\n    }\n  }\n\n  // no term match, use @vocab if available\n  if(relativeTo.vocab) {\n    if('@vocab' in activeCtx) {\n      // determine if vocab is a prefix of the iri\n      const vocab = activeCtx['@vocab'];\n      if(iri.indexOf(vocab) === 0 && iri !== vocab) {\n        // use suffix as relative iri if it is not a term in the active context\n        const suffix = iri.substr(vocab.length);\n        if(!activeCtx.mappings.has(suffix)) {\n          return suffix;\n        }\n      }\n    }\n  }\n\n  // no term or @vocab match, check for possible CURIEs\n  let choice = null;\n  // TODO: make FastCurieMap a class with a method to do this lookup\n  const partialMatches = [];\n  let iriMap = activeCtx.fastCurieMap;\n  // check for partial matches of against `iri`, which means look until\n  // iri.length - 1, not full length\n  const maxPartialLength = iri.length - 1;\n  for(let i = 0; i < maxPartialLength && iri[i] in iriMap; ++i) {\n    iriMap = iriMap[iri[i]];\n    if('' in iriMap) {\n      partialMatches.push(iriMap[''][0]);\n    }\n  }\n  // check partial matches in reverse order to prefer longest ones first\n  for(let i = partialMatches.length - 1; i >= 0; --i) {\n    const entry = partialMatches[i];\n    const terms = entry.terms;\n    for(const term of terms) {\n      // a CURIE is usable if:\n      // 1. it has no mapping, OR\n      // 2. value is null, which means we're not compacting an @value, AND\n      //   the mapping matches the IRI\n      const curie = term + ':' + iri.substr(entry.iri.length);\n      const isUsableCurie = (activeCtx.mappings.get(term)._prefix &&\n        (!activeCtx.mappings.has(curie) ||\n        (value === null && activeCtx.mappings.get(curie)['@id'] === iri)));\n\n      // select curie if it is shorter or the same length but lexicographically\n      // less than the current choice\n      if(isUsableCurie && (choice === null ||\n        _compareShortestLeast(curie, choice) < 0)) {\n        choice = curie;\n      }\n    }\n  }\n\n  // return chosen curie\n  if(choice !== null) {\n    return choice;\n  }\n\n  // compact IRI relative to base\n  if(!relativeTo.vocab) {\n    return _removeBase(activeCtx['@base'], iri);\n  }\n\n  // return IRI as is\n  return iri;\n};\n\n/**\n * Performs value compaction on an object with '@value' or '@id' as the only\n * property.\n *\n * @param activeCtx the active context.\n * @param activeProperty the active property that points to the value.\n * @param value the value to compact.\n * @param {Object} [options] - processing options.\n *\n * @return the compaction result.\n */\napi.compactValue = ({activeCtx, activeProperty, value, options}) => {\n  // value is a @value\n  if(_isValue(value)) {\n    // get context rules\n    const type = _getContextValue(activeCtx, activeProperty, '@type');\n    const language = _getContextValue(activeCtx, activeProperty, '@language');\n    const container =\n      _getContextValue(activeCtx, activeProperty, '@container') || [];\n\n    // whether or not the value has an @index that must be preserved\n    const preserveIndex = '@index' in value && !container.includes('@index');\n\n    // if there's no @index to preserve ...\n    if(!preserveIndex) {\n      // matching @type or @language specified in context, compact value\n      if(value['@type'] === type || value['@language'] === language) {\n        return value['@value'];\n      }\n    }\n\n    // return just the value of @value if all are true:\n    // 1. @value is the only key or @index isn't being preserved\n    // 2. there is no default language or @value is not a string or\n    //   the key has a mapping with a null @language\n    const keyCount = Object.keys(value).length;\n    const isValueOnlyKey = (keyCount === 1 ||\n      (keyCount === 2 && '@index' in value && !preserveIndex));\n    const hasDefaultLanguage = ('@language' in activeCtx);\n    const isValueString = _isString(value['@value']);\n    const hasNullMapping = (activeCtx.mappings.has(activeProperty) &&\n      activeCtx.mappings.get(activeProperty)['@language'] === null);\n    if(isValueOnlyKey &&\n      (!hasDefaultLanguage || !isValueString || hasNullMapping)) {\n      return value['@value'];\n    }\n\n    const rval = {};\n\n    // preserve @index\n    if(preserveIndex) {\n      rval[api.compactIri({\n        activeCtx,\n        iri: '@index',\n        relativeTo: {vocab: true}\n      })] = value['@index'];\n    }\n\n    if('@type' in value) {\n      // compact @type IRI\n      rval[api.compactIri({\n        activeCtx,\n        iri: '@type',\n        relativeTo: {vocab: true}\n      })] = api.compactIri(\n        {activeCtx, iri: value['@type'], relativeTo: {vocab: true}});\n    } else if('@language' in value) {\n      // alias @language\n      rval[api.compactIri({\n        activeCtx,\n        iri: '@language',\n        relativeTo: {vocab: true}\n      })] = value['@language'];\n    }\n\n    // alias @value\n    rval[api.compactIri({\n      activeCtx,\n      iri: '@value',\n      relativeTo: {vocab: true}\n    })] = value['@value'];\n\n    return rval;\n  }\n\n  // value is a subject reference\n  const expandedProperty = _expandIri(activeCtx, activeProperty, {vocab: true},\n    options);\n  const type = _getContextValue(activeCtx, activeProperty, '@type');\n  const compacted = api.compactIri(\n    {activeCtx, iri: value['@id'], relativeTo: {vocab: type === '@vocab'}});\n\n  // compact to scalar\n  if(type === '@id' || type === '@vocab' || expandedProperty === '@graph') {\n    return compacted;\n  }\n\n  return {\n    [api.compactIri({\n      activeCtx,\n      iri: '@id',\n      relativeTo: {vocab: true}\n    })]: compacted\n  };\n};\n\n/**\n * Removes the @preserve keywords as the last step of the compaction\n * algorithm when it is running on framed output.\n *\n * @param ctx the active context used to compact the input.\n * @param input the framed, compacted output.\n * @param options the compaction options used.\n *\n * @return the resulting output.\n */\napi.removePreserve = (ctx, input, options) => {\n  // recurse through arrays\n  if(_isArray(input)) {\n    const output = [];\n    for(let i = 0; i < input.length; ++i) {\n      const result = api.removePreserve(ctx, input[i], options);\n      // drop nulls from arrays\n      if(result !== null) {\n        output.push(result);\n      }\n    }\n    input = output;\n  } else if(_isObject(input)) {\n    // remove @preserve\n    if('@preserve' in input) {\n      if(input['@preserve'] === '@null') {\n        return null;\n      }\n      return input['@preserve'];\n    }\n\n    // skip @values\n    if(_isValue(input)) {\n      return input;\n    }\n\n    // recurse through @lists\n    if(_isList(input)) {\n      input['@list'] = api.removePreserve(ctx, input['@list'], options);\n      return input;\n    }\n\n    // handle in-memory linked nodes\n    const idAlias = api.compactIri({\n      activeCtx: ctx,\n      iri: '@id',\n      relativeTo: {vocab: true}\n    });\n    if(input.hasOwnProperty(idAlias)) {\n      const id = input[idAlias];\n      if(options.link.hasOwnProperty(id)) {\n        const idx = options.link[id].indexOf(input);\n        if(idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        }\n        // prevent circular visitation\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    // recurse through properties\n    const graphAlias = api.compactIri({\n      activeCtx: ctx,\n      iri: '@graph',\n      relativeTo: {vocab: true}\n    });\n    for(const prop in input) {\n      // potentially remove the id, if it is an unreference bnode\n      if(prop === idAlias && options.bnodesToClear.includes(input[prop])) {\n        delete input[idAlias];\n        continue;\n      }\n\n      let result = api.removePreserve(ctx, input[prop], options);\n      const container = _getContextValue(ctx, prop, '@container') || [];\n      if(options.compactArrays && _isArray(result) && result.length === 1 &&\n        container.length === 0 && prop !== graphAlias) {\n        result = result[0];\n      }\n      input[prop] = result;\n    }\n  }\n  return input;\n};\n\n/**\n * Picks the preferred compaction term from the given inverse context entry.\n *\n * @param activeCtx the active context.\n * @param iri the IRI to pick the term for.\n * @param value the value to pick the term for.\n * @param containers the preferred containers.\n * @param typeOrLanguage either '@type' or '@language'.\n * @param typeOrLanguageValue the preferred value for '@type' or '@language'.\n *\n * @return the preferred term.\n */\nfunction _selectTerm(\n  activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue) {\n  if(typeOrLanguageValue === null) {\n    typeOrLanguageValue = '@null';\n  }\n\n  // preferences for the value of @type or @language\n  const prefs = [];\n\n  // determine prefs for @id based on whether or not value compacts to a term\n  if((typeOrLanguageValue === '@id' || typeOrLanguageValue === '@reverse') &&\n    _isSubjectReference(value)) {\n    // prefer @reverse first\n    if(typeOrLanguageValue === '@reverse') {\n      prefs.push('@reverse');\n    }\n    // try to compact value to a term\n    const term = api.compactIri(\n      {activeCtx, iri: value['@id'], relativeTo: {vocab: true}});\n    if(activeCtx.mappings.has(term) &&\n      activeCtx.mappings.get(term) &&\n      activeCtx.mappings.get(term)['@id'] === value['@id']) {\n      // prefer @vocab\n      prefs.push.apply(prefs, ['@vocab', '@id']);\n    } else {\n      // prefer @id\n      prefs.push.apply(prefs, ['@id', '@vocab']);\n    }\n  } else {\n    prefs.push(typeOrLanguageValue);\n  }\n  prefs.push('@none');\n\n  const containerMap = activeCtx.inverse[iri];\n  for(let ci = 0; ci < containers.length; ++ci) {\n    // if container not available in the map, continue\n    const container = containers[ci];\n    if(!(container in containerMap)) {\n      continue;\n    }\n\n    const typeOrLanguageValueMap = containerMap[container][typeOrLanguage];\n    for(let pi = 0; pi < prefs.length; ++pi) {\n      // if type/language option not available in the map, continue\n      const pref = prefs[pi];\n      if(!(pref in typeOrLanguageValueMap)) {\n        continue;\n      }\n\n      // select term\n      return typeOrLanguageValueMap[pref];\n    }\n  }\n\n  return null;\n}\n\n/**\n * The value of `@nest` in the term definition must either be `@nest`, or a term\n * which resolves to `@nest`.\n *\n * @param activeCtx the active context.\n * @param nestProperty a term in the active context or `@nest`.\n * @param {Object} [options] - processing options.\n */\nfunction _checkNestProperty(activeCtx, nestProperty, options) {\n  if(_expandIri(activeCtx, nestProperty, {vocab: true}, options) !== '@nest') {\n    throw new JsonLdError(\n      'JSON-LD compact error; nested property must have an @nest value ' +\n      'resolving to @nest.',\n      'jsonld.SyntaxError', {code: 'invalid @nest value'});\n  }\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/compact.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/constants.js":
/*!**********************************************!*\
  !*** ./node_modules/jsonld/lib/constants.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nconst XSD = 'http://www.w3.org/2001/XMLSchema#';\n\nmodule.exports = {\n  LINK_HEADER_REL: 'http://www.w3.org/ns/json-ld#context',\n\n  RDF,\n  RDF_LIST: RDF + 'List',\n  RDF_FIRST: RDF + 'first',\n  RDF_REST: RDF + 'rest',\n  RDF_NIL: RDF + 'nil',\n  RDF_TYPE: RDF + 'type',\n  RDF_PLAIN_LITERAL: RDF + 'PlainLiteral',\n  RDF_XML_LITERAL: RDF + 'XMLLiteral',\n  RDF_JSON_LITERAL: RDF + 'JSON',\n  RDF_OBJECT: RDF + 'object',\n  RDF_LANGSTRING: RDF + 'langString',\n\n  XSD,\n  XSD_BOOLEAN: XSD + 'boolean',\n  XSD_DOUBLE: XSD + 'double',\n  XSD_INTEGER: XSD + 'integer',\n  XSD_STRING: XSD + 'string',\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/constants.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/context.js":
/*!********************************************!*\
  !*** ./node_modules/jsonld/lib/context.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\nconst ActiveContextCache = __webpack_require__(/*! ./ActiveContextCache */ \"./node_modules/jsonld/lib/ActiveContextCache.js\");\nconst JsonLdError = __webpack_require__(/*! ./JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\n\nconst {\n  isAbsolute: _isAbsoluteIri,\n  isRelative: _isRelativeIri,\n  prependBase,\n  parse: parseUrl\n} = __webpack_require__(/*! ./url */ \"./node_modules/jsonld/lib/url.js\");\n\nconst {\n  asArray: _asArray,\n  compareShortestLeast: _compareShortestLeast\n} = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\n\nconst MAX_CONTEXT_URLS = 10;\n\nconst INITIAL_CONTEXT_CACHE = new Map();\nconst INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\n\nconst api = {};\nmodule.exports = api;\n\napi.cache = new ActiveContextCache();\n\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param isPropertyTermScopedContext `true` if `localCtx` is a scoped context\n *   from a property term.\n * @param isTypeScopedContext `true` if `localCtx` is a scoped context\n *   from a type.\n *\n * @return the new active context.\n */\napi.process = ({\n  activeCtx, localCtx, options,\n  isPropertyTermScopedContext = false,\n  isTypeScopedContext = false\n}) => {\n  // normalize local context to an array of @context objects\n  if(_isObject(localCtx) && '@context' in localCtx &&\n    _isArray(localCtx['@context'])) {\n    localCtx = localCtx['@context'];\n  }\n  const ctxs = _asArray(localCtx);\n\n  // no contexts in array, return current active context w/o changes\n  if(ctxs.length === 0) {\n    return activeCtx;\n  }\n\n  // track the previous context\n  const previousContext = activeCtx.previousContext || activeCtx;\n\n  // if context is property scoped and there's a previous context, amend it,\n  // not the current one\n  if(isPropertyTermScopedContext && activeCtx.previousContext) {\n    // TODO: consider optimizing to a shallow copy\n    activeCtx = activeCtx.clone();\n    activeCtx.isPropertyTermScoped = true;\n    activeCtx.previousContext = api.process({\n      activeCtx: activeCtx.previousContext,\n      localCtx: ctxs,\n      options,\n      isPropertyTermScopedContext\n    });\n    return activeCtx;\n  }\n\n  // process each context in order, update active context\n  // on each iteration to ensure proper caching\n  let rval = activeCtx;\n  for(let i = 0; i < ctxs.length; ++i) {\n    let ctx = ctxs[i];\n\n    // update active context to one computed from last iteration\n    activeCtx = rval;\n\n    // reset to initial context\n    if(ctx === null) {\n      // We can't nullify if there are protected terms and we're\n      // not processing a property term scoped context\n      if(!isPropertyTermScopedContext &&\n        Object.keys(activeCtx.protected).length !== 0) {\n        const protectedMode = (options && options.protectedMode) || 'error';\n        if(protectedMode === 'error') {\n          throw new JsonLdError(\n            'Tried to nullify a context with protected terms outside of ' +\n            'a term definition.',\n            'jsonld.SyntaxError',\n            {code: 'invalid context nullification'});\n        } else if(protectedMode === 'warn') {\n          // FIXME: remove logging and use a handler\n          console.warn('WARNING: invalid context nullification');\n          const oldActiveCtx = activeCtx;\n          // copy all protected term definitions to fresh initial context\n          rval = activeCtx = api.getInitialContext(options).clone();\n          for(const [term, _protected] of\n            Object.entries(oldActiveCtx.protected)) {\n            if(_protected) {\n              activeCtx.mappings[term] =\n                util.clone(oldActiveCtx.mappings[term]);\n            }\n          }\n          activeCtx.protected = util.clone(oldActiveCtx.protected);\n\n          // cache result\n          if(api.cache) {\n            api.cache.set(oldActiveCtx, ctx, rval);\n          }\n\n          continue;\n        }\n        throw new JsonLdError(\n          'Invalid protectedMode.',\n          'jsonld.SyntaxError',\n          {code: 'invalid protected mode', context: localCtx, protectedMode});\n      }\n      rval = activeCtx = api.getInitialContext(options).clone();\n      // if context is type-scoped, ensure previous context has been set\n      if(isTypeScopedContext) {\n        rval.previousContext = previousContext.clone();\n      }\n      continue;\n    }\n\n    // get context from cache if available\n    if(api.cache) {\n      const cached = api.cache.get(activeCtx, ctx);\n      if(cached) {\n        rval = activeCtx = cached;\n        continue;\n      }\n    }\n\n    // dereference @context key if present\n    if(_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    }\n\n    // context must be an object by now, all URLs retrieved before this call\n    if(!_isObject(ctx)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context must be an object.',\n        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});\n    }\n\n    // TODO: there is likely a `preivousContext` cloning optimization that\n    // could be applied here (no need to copy it under certain conditions)\n\n    // clone context before updating it\n    rval = rval.clone();\n\n    // define context mappings for keys in local context\n    const defined = new Map();\n\n    // handle @version\n    if('@version' in ctx) {\n      if(ctx['@version'] !== 1.1) {\n        throw new JsonLdError(\n          'Unsupported JSON-LD version: ' + ctx['@version'],\n          'jsonld.UnsupportedVersion',\n          {code: 'invalid @version value', context: ctx});\n      }\n      if(activeCtx.processingMode &&\n        activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          '@version: ' + ctx['@version'] + ' not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.ProcessingModeConflict',\n          {code: 'processing mode conflict', context: ctx});\n      }\n      rval.processingMode = 'json-ld-1.1';\n      rval['@version'] = ctx['@version'];\n      defined.set('@version', true);\n    }\n\n    // if not set explicitly, set processingMode to \"json-ld-1.0\"\n    rval.processingMode =\n      rval.processingMode || activeCtx.processingMode || 'json-ld-1.0';\n\n    // handle @base\n    if('@base' in ctx) {\n      let base = ctx['@base'];\n\n      if(base === null) {\n        // no action\n      } else if(_isAbsoluteIri(base)) {\n        base = parseUrl(base);\n      } else if(_isRelativeIri(base)) {\n        base = parseUrl(prependBase(activeCtx['@base'].href, base));\n      } else {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@base\" in a ' +\n          '@context must be an absolute IRI, a relative IRI, or null.',\n          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});\n      }\n\n      rval['@base'] = base;\n      defined.set('@base', true);\n    }\n\n    // handle @vocab\n    if('@vocab' in ctx) {\n      const value = ctx['@vocab'];\n      if(value === null) {\n        delete rval['@vocab'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else if(!_isAbsoluteIri(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be an absolute IRI.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else {\n        rval['@vocab'] = value;\n      }\n      defined.set('@vocab', true);\n    }\n\n    // handle @language\n    if('@language' in ctx) {\n      const value = ctx['@language'];\n      if(value === null) {\n        delete rval['@language'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@language\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError',\n          {code: 'invalid default language', context: ctx});\n      } else {\n        rval['@language'] = value.toLowerCase();\n      }\n      defined.set('@language', true);\n    }\n\n    // handle @protected; determine whether this sub-context is declaring\n    // all its terms to be \"protected\" (exceptions can be made on a\n    // per-definition basis)\n    defined.set('@protected', ctx['@protected'] || false);\n\n    // process all other keys\n    for(const key in ctx) {\n      api.createTermDefinition(\n        rval, ctx, key, defined, options,\n        isPropertyTermScopedContext);\n    }\n\n    // if context is type-scoped, ensure previous context has been set\n    if(isTypeScopedContext && !rval.previousContext) {\n      rval.previousContext = previousContext.clone();\n    }\n\n    // cache result\n    if(api.cache) {\n      api.cache.set(activeCtx, ctx, rval);\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param {string} [options.protectedMode=\"error\"] - \"error\" to throw error\n *   on `@protected` constraint violation, \"warn\" to allow violations and\n *   signal a warning.\n * @param isPropertyTermScopedContext `true` if `localCtx` is a scoped context\n *   from a property term.\n */\napi.createTermDefinition = (\n  activeCtx, localCtx, term, defined, options,\n  isPropertyTermScopedContext = false) => {\n  if(defined.has(term)) {\n    // term already defined\n    if(defined.get(term)) {\n      return;\n    }\n    // cycle detected\n    throw new JsonLdError(\n      'Cyclical context definition detected.',\n      'jsonld.CyclicalContext',\n      {code: 'cyclic IRI mapping', context: localCtx, term});\n  }\n\n  // now defining term\n  defined.set(term, false);\n\n  if(api.isKeyword(term)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; keywords cannot be overridden.',\n      'jsonld.SyntaxError',\n      {code: 'keyword redefinition', context: localCtx, term});\n  }\n\n  if(term === '') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a term cannot be an empty string.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // keep reference to previous mapping for potential `@protected` check\n  const previousMapping = activeCtx.mappings.get(term);\n\n  // remove old mapping\n  if(activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  }\n\n  // get context term value\n  let value;\n  if(localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  }\n\n  // clear context entry\n  if(value === null || (_isObject(value) && value['@id'] === null)) {\n    activeCtx.mappings.set(term, null);\n    defined.set(term, true);\n    return;\n  }\n\n  // convert short-hand value to object w/@id\n  let simpleTerm = false;\n  if(_isString(value)) {\n    simpleTerm = true;\n    value = {'@id': value};\n  }\n\n  if(!_isObject(value)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context term values must be ' +\n      'strings or objects.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // create new mapping\n  const mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false;\n\n  // make sure term definition only has expected keywords\n  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];\n\n  // JSON-LD 1.1 support\n  if(api.processingMode(activeCtx, 1.1)) {\n    validKeys.push('@context', '@nest', '@prefix', '@protected');\n  }\n\n  for(const kw in value) {\n    if(!validKeys.includes(kw)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a term definition must not contain ' + kw,\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n  }\n\n  // always compute whether term has a colon as an optimization for\n  // _compactIri\n  const colon = term.indexOf(':');\n  mapping._termHasColon = (colon !== -1);\n\n  if('@reverse' in value) {\n    if('@id' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @id.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    if('@nest' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @nest.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    const reverse = value['@reverse'];\n    if(!_isString(reverse)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n\n    // expand and add @id mapping\n    const id = _expandIri(\n      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined,\n      options);\n    if(!_isAbsoluteIri(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +\n        'absolute IRI or a blank node identifier.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n    mapping['@id'] = id;\n    mapping.reverse = true;\n  } else if('@id' in value) {\n    let id = value['@id'];\n    if(!_isString(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @id value must be an array ' +\n        'of strings or a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n    if(id !== term) {\n      // expand and add @id mapping\n      id = _expandIri(\n        activeCtx, id, {vocab: true, base: false}, localCtx, defined, options);\n      if(!_isAbsoluteIri(id) && !api.isKeyword(id)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; a @context @id value must be an ' +\n          'absolute IRI, a blank node identifier, or a keyword.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx});\n      }\n      mapping['@id'] = id;\n      // indicate if this term may be used as a compact IRI prefix\n      mapping._prefix = (!mapping._termHasColon &&\n        id.match(/[:\\/\\?#\\[\\]@]$/) &&\n        (simpleTerm || api.processingMode(activeCtx, 1.0)));\n    }\n  }\n\n  if(!('@id' in mapping)) {\n    // see if the term has a prefix\n    if(mapping._termHasColon) {\n      const prefix = term.substr(0, colon);\n      if(localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition(activeCtx, localCtx, prefix, defined, options);\n      }\n\n      if(activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        const suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if(!('@vocab' in activeCtx)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @context terms must define an @id.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx, term});\n      }\n      // prepend vocab to term\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  }\n\n  // Handle term protection\n  if(value['@protected'] === true ||\n    (defined.get('@protected') === true && value['@protected'] !== false)) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  }\n\n  // IRI mapping now defined\n  defined.set(term, true);\n\n  if('@type' in value) {\n    let type = value['@type'];\n    if(!_isString(type)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an @context @type value must be a string.',\n        'jsonld.SyntaxError',\n        {code: 'invalid type mapping', context: localCtx});\n    }\n\n    if(type !== '@id' && type !== '@vocab' && type !== '@json') {\n      // expand @type to full IRI\n      type = _expandIri(\n        activeCtx, type, {vocab: true, base: false}, localCtx, defined,\n        options);\n      if(!_isAbsoluteIri(type)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an ' +\n          'absolute IRI.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n      if(type.indexOf('_:') === 0) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an IRI, ' +\n          'not a blank node identifier.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n    }\n\n    // add @type to mapping\n    mapping['@type'] = type;\n  }\n\n  if('@container' in value) {\n    // normalize container to an array form\n    const container = _isString(value['@container']) ?\n      [value['@container']] : (value['@container'] || []);\n    const validContainers = ['@list', '@set', '@index', '@language'];\n    let isValid = true;\n    const hasSet = container.includes('@set');\n\n    // JSON-LD 1.1 support\n    if(api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type');\n\n      // check container length\n      if(container.includes('@list')) {\n        if(container.length !== 1) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @list must ' +\n            'have no other values',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else if(container.includes('@graph')) {\n        if(container.some(key =>\n          key !== '@graph' && key !== '@id' && key !== '@index' &&\n          key !== '@set')) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @graph must ' +\n            'have no other values other than @id, @index, and @set',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']);\n\n      // check container length\n      isValid &= container.length <= 1;\n    }\n\n    // check against valid containers\n    isValid &= container.every(c => validContainers.includes(c));\n\n    // @set not allowed with @list\n    isValid &= !(hasSet && container.includes('@list'));\n\n    if(!isValid) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value must be ' +\n        'one of the following: ' + validContainers.join(', '),\n        'jsonld.SyntaxError',\n        {code: 'invalid container mapping', context: localCtx});\n    }\n\n    if(mapping.reverse &&\n      !container.every(c => ['@index', '@set'].includes(c))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +\n        'type definition must be @index or @set.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n\n    // add @container to mapping\n    mapping['@container'] = container;\n  }\n\n  // scoped contexts\n  if('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n\n  if('@language' in value && !('@type' in value)) {\n    let language = value['@language'];\n    if(language !== null && !_isString(language)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @language value must be ' +\n        'a string or null.', 'jsonld.SyntaxError',\n        {code: 'invalid language mapping', context: localCtx});\n    }\n\n    // add @language to mapping\n    if(language !== null) {\n      language = language.toLowerCase();\n    }\n    mapping['@language'] = language;\n  }\n\n  // term may be used as a prefix\n  if('@prefix' in value) {\n    if(mapping._termHasColon) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @prefix used on a compact IRI term',\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context value for @prefix must be boolean',\n        'jsonld.SyntaxError',\n        {code: 'invalid @prefix value', context: localCtx});\n    }\n  }\n\n  if('@nest' in value) {\n    const nest = value['@nest'];\n    if(!_isString(nest) || (nest !== '@nest' && nest.indexOf('@') === 0)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @nest value must be ' +\n        'a string which is not a keyword other than @nest.',\n        'jsonld.SyntaxError',\n        {code: 'invalid @nest value', context: localCtx});\n    }\n    mapping['@nest'] = nest;\n  }\n\n  // disallow aliasing @context and @preserve\n  const id = mapping['@id'];\n  if(id === '@context' || id === '@preserve') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',\n      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});\n  }\n\n  // FIXME if(1.1) ... ?\n  if(previousMapping && previousMapping.protected &&\n    !isPropertyTermScopedContext) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n    if(!_deepCompare(previousMapping, mapping)) {\n      const protectedMode = (options && options.protectedMode) || 'error';\n      if(protectedMode === 'error') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; tried to redefine a protected term.',\n          'jsonld.SyntaxError',\n          {code: 'protected term redefinition', context: localCtx, term});\n      } else if(protectedMode === 'warn') {\n        // FIXME: remove logging and use a handler\n        console.warn('WARNING: protected term redefinition', {term});\n        return;\n      }\n      throw new JsonLdError(\n        'Invalid protectedMode.',\n        'jsonld.SyntaxError',\n        {code: 'invalid protected mode', context: localCtx, term,\n          protectedMode});\n    }\n  }\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\napi.expandIri = (activeCtx, value, relativeTo, options) => {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined,\n    options);\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if(value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  }\n\n  // define term dependency if not defined\n  if(localCtx && localCtx.hasOwnProperty(value) &&\n    defined.get(value) !== true) {\n    api.createTermDefinition(activeCtx, localCtx, value, defined, options);\n  }\n\n  // if context is from a property term scoped context composed with a\n  // type-scoped context, then use previous context instead\n  if(activeCtx.isPropertyTermScoped && activeCtx.previousContext) {\n    activeCtx = activeCtx.previousContext;\n  }\n\n  relativeTo = relativeTo || {};\n  if(relativeTo.vocab) {\n    const mapping = activeCtx.mappings.get(value);\n\n    // value is explicitly ignored with a null mapping\n    if(mapping === null) {\n      return null;\n    }\n\n    if(mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  }\n\n  // split value into prefix:suffix\n  const colon = value.indexOf(':');\n  if(colon !== -1) {\n    const prefix = value.substr(0, colon);\n    const suffix = value.substr(colon + 1);\n\n    // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n    if(prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    }\n\n    // prefix dependency not defined, define it\n    if(localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition(activeCtx, localCtx, prefix, defined, options);\n    }\n\n    // use mapping if prefix is defined\n    if(activeCtx.mappings.has(prefix)) {\n      const mapping = activeCtx.mappings.get(prefix);\n      return mapping['@id'] + suffix;\n    }\n\n    // already absolute IRI\n    return value;\n  }\n\n  // prepend vocab\n  if(relativeTo.vocab && '@vocab' in activeCtx) {\n    return activeCtx['@vocab'] + value;\n  }\n\n  // prepend base\n  if(relativeTo.base) {\n    return prependBase(activeCtx['@base'], value);\n  }\n\n  return value;\n}\n\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\napi.getInitialContext = options => {\n  const base = parseUrl(options.base || '');\n  const key = JSON.stringify({base, processingMode: options.processingMode});\n  const cached = INITIAL_CONTEXT_CACHE.get(key);\n  if(cached) {\n    return cached;\n  }\n\n  const initialContext = {\n    '@base': base,\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertTypeScopedContext: _revertTypeScopedContext,\n    protected: {}\n  };\n  // TODO: consider using LRU cache instead\n  if(INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n  function _createInverseContext() {\n    const activeCtx = this;\n\n    // lazily create inverse\n    if(activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n    const inverse = activeCtx.inverse = {};\n\n    // variables for building fast CURIE map\n    const fastCurieMap = activeCtx.fastCurieMap = {};\n    const irisToTerms = {};\n\n    // handle default language\n    const defaultLanguage = activeCtx['@language'] || '@none';\n\n    // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n    const mappings = activeCtx.mappings;\n    const terms = [...mappings.keys()].sort(_compareShortestLeast);\n    for(const term of terms) {\n      const mapping = mappings.get(term);\n      if(mapping === null) {\n        continue;\n      }\n\n      let container = mapping['@container'] || '@none';\n      container = [].concat(container).sort().join('');\n\n      // iterate over every IRI in the mapping\n      const ids = _asArray(mapping['@id']);\n      for(const iri of ids) {\n        let entry = inverse[iri];\n        const isKeyword = api.isKeyword(iri);\n\n        if(!entry) {\n          // initialize entry\n          inverse[iri] = entry = {};\n\n          if(!isKeyword && !mapping._termHasColon) {\n            // init IRI to term map and fast CURIE prefixes\n            irisToTerms[iri] = [term];\n            const fastCurieEntry = {iri, terms: irisToTerms[iri]};\n            if(iri[0] in fastCurieMap) {\n              fastCurieMap[iri[0]].push(fastCurieEntry);\n            } else {\n              fastCurieMap[iri[0]] = [fastCurieEntry];\n            }\n          }\n        } else if(!isKeyword && !mapping._termHasColon) {\n          // add IRI to term match\n          irisToTerms[iri].push(term);\n        }\n\n        // add new entry\n        if(!entry[container]) {\n          entry[container] = {\n            '@language': {},\n            '@type': {},\n            '@any': {}\n          };\n        }\n        entry = entry[container];\n        _addPreferredTerm(term, entry['@any'], '@none');\n\n        if(mapping.reverse) {\n          // term is preferred for values using @reverse\n          _addPreferredTerm(term, entry['@type'], '@reverse');\n        } else if('@type' in mapping) {\n          // term is preferred for values using specific type\n          _addPreferredTerm(term, entry['@type'], mapping['@type']);\n        } else if('@language' in mapping) {\n          // term is preferred for values using specific language\n          const language = mapping['@language'] || '@null';\n          _addPreferredTerm(term, entry['@language'], language);\n        } else {\n          // term is preferred for values w/default language or no type and\n          // no language\n          // add an entry for the default language\n          _addPreferredTerm(term, entry['@language'], defaultLanguage);\n\n          // add entries for no type and no language\n          _addPreferredTerm(term, entry['@type'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n        }\n      }\n    }\n\n    // build fast CURIE map\n    for(const key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, key, 1);\n    }\n\n    return inverse;\n  }\n\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n  function _buildIriMap(iriMap, key, idx) {\n    const entries = iriMap[key];\n    const next = iriMap[key] = {};\n\n    let iri;\n    let letter;\n    for(const entry of entries) {\n      iri = entry.iri;\n      if(idx >= iri.length) {\n        letter = '';\n      } else {\n        letter = iri[idx];\n      }\n      if(letter in next) {\n        next[letter].push(entry);\n      } else {\n        next[letter] = [entry];\n      }\n    }\n\n    for(const key in next) {\n      if(key === '') {\n        continue;\n      }\n      _buildIriMap(next, key, idx + 1);\n    }\n  }\n\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if(!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n  function _cloneActiveContext() {\n    const child = {};\n    child['@base'] = this['@base'];\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n    if(this.previousContext) {\n      child.isPropertyTermScoped = this.previousContext.isPropertyTermScoped;\n      child.previousContext = this.previousContext.clone();\n    }\n    child.revertTypeScopedContext = this.revertTypeScopedContext;\n    if('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n    if('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n    return child;\n  }\n\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n  function _revertTypeScopedContext() {\n    if(!this.previousContext) {\n      return this;\n    }\n    return this.previousContext.clone();\n  }\n};\n\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\napi.getContextValue = (ctx, key, type) => {\n  // invalid key\n  if(key === null) {\n    if(type === '@context') {\n      return undefined;\n    }\n    return null;\n  }\n\n  // get specific entry information\n  if(ctx.mappings.has(key)) {\n    const entry = ctx.mappings.get(key);\n\n    if(_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n    if(entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  }\n\n  // get default language\n  if(type === '@language' && ctx.hasOwnProperty(type)) {\n    return ctx[type];\n  }\n\n  if(type === '@context') {\n    return undefined;\n  }\n  return null;\n};\n\n/**\n * Retrieves external @context URLs using the given document loader. Every\n * instance of @context in the input that refers to a URL will be replaced\n * with the JSON @context found at that URL.\n *\n * @param input the JSON-LD input with possible contexts.\n * @param options the options to use:\n *          documentLoader(url, [callback(err, remoteDoc)]) the document loader.\n * @param callback(err, input) called once the operation completes.\n */\napi.getAllContexts = async (input, options) => {\n  return _retrieveContextUrls(input, options);\n};\n\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\napi.processingMode = (activeCtx, version) => {\n  if(version.toString() >= '1.1') {\n    return activeCtx.processingMode &&\n      activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return !activeCtx.processingMode ||\n      activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\napi.isKeyword = v => {\n  if(!_isString(v)) {\n    return false;\n  }\n  switch(v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@index':\n    case '@json':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n  return false;\n};\n\nasync function _retrieveContextUrls(input, options) {\n  const documentLoader = util.normalizeDocumentLoader(options.documentLoader);\n\n  // retrieve all @context URLs in input\n  await retrieve(input, new Set(), documentLoader);\n\n  return input;\n\n  // recursive function that will retrieve all @context URLs in documents\n  async function retrieve(doc, cycles, documentLoader) {\n    if(cycles.size > MAX_CONTEXT_URLS) {\n      throw new JsonLdError(\n        'Maximum number of @context URLs exceeded.',\n        'jsonld.ContextUrlError',\n        {code: 'loading remote context failed', max: MAX_CONTEXT_URLS});\n    }\n\n    // find all URLs in the given document\n    const urls = new Map();\n    _findContextUrls(doc, urls, false, options.base);\n    if(urls.size === 0) {\n      return;\n    }\n\n    // queue all unretrieved URLs\n    const queue = [...urls.keys()].filter(u => urls.get(u) === false);\n\n    // retrieve URLs in queue\n    return Promise.all(queue.map(async url => {\n      // check for context URL cycle\n      if(cycles.has(url)) {\n        throw new JsonLdError(\n          'Cyclical @context URLs detected.',\n          'jsonld.ContextUrlError',\n          {code: 'recursive context inclusion', url});\n      }\n\n      const _cycles = new Set(cycles);\n      _cycles.add(url);\n      let remoteDoc;\n      let ctx;\n\n      try {\n        remoteDoc = await documentLoader(url);\n        ctx = remoteDoc.document || null;\n        // parse string context as JSON\n        if(_isString(ctx)) {\n          ctx = JSON.parse(ctx);\n        }\n      } catch(e) {\n        throw new JsonLdError(\n          'Dereferencing a URL did not result in a valid JSON-LD object. ' +\n          'Possible causes are an inaccessible URL perhaps due to ' +\n          'a same-origin policy (ensure the server uses CORS if you are ' +\n          'using client-side JavaScript), too many redirects, a ' +\n          'non-JSON response, or more than one HTTP Link Header was ' +\n          'provided for a remote context.',\n          'jsonld.InvalidUrl',\n          {code: 'loading remote context failed', url, cause: e});\n      }\n\n      // ensure ctx is an object\n      if(!_isObject(ctx)) {\n        throw new JsonLdError(\n          'Dereferencing a URL did not result in a JSON object. The ' +\n          'response was valid JSON, but it was not a JSON object.',\n          'jsonld.InvalidUrl',\n          {code: 'invalid remote context', url});\n      }\n\n      // use empty context if no @context key is present\n      if(!('@context' in ctx)) {\n        ctx = {'@context': {}};\n      } else {\n        ctx = {'@context': ctx['@context']};\n      }\n\n      // append @context URL to context if given\n      if(remoteDoc.contextUrl) {\n        if(!_isArray(ctx['@context'])) {\n          ctx['@context'] = [ctx['@context']];\n        }\n        ctx['@context'].push(remoteDoc.contextUrl);\n      }\n\n      // recurse\n      await retrieve(ctx, _cycles, documentLoader);\n\n      // store retrieved context w/replaced @context URLs\n      urls.set(url, ctx['@context']);\n\n      // replace all @context URLs in the document\n      _findContextUrls(doc, urls, true, options.base);\n    }));\n  }\n}\n\n/**\n * Finds all @context URLs in the given JSON-LD input.\n *\n * @param input the JSON-LD input.\n * @param urls a map of URLs (url => false/@contexts).\n * @param replace true to replace the URLs in the given input with the\n *           @contexts from the urls map, false not to.\n * @param base the base IRI to use to resolve relative IRIs.\n *\n * @return true if new URLs to retrieve were found, false if not.\n */\nfunction _findContextUrls(input, urls, replace, base) {\n  if(_isArray(input)) {\n    for(const element of input) {\n      _findContextUrls(element, urls, replace, base);\n    }\n    return;\n  }\n\n  if(!_isObject(input)) {\n    // no @context URLs can be found in non-object input\n    return;\n  }\n\n  // input is an object\n  for(const key in input) {\n    if(key !== '@context') {\n      _findContextUrls(input[key], urls, replace, base);\n      continue;\n    }\n\n    // get @context\n    const ctx = input[key];\n\n    if(_isArray(ctx)) {\n      // array @context\n      let length = ctx.length;\n      for(let i = 0; i < length; ++i) {\n        const _ctx = ctx[i];\n        if(_isString(_ctx)) {\n          const prepended = prependBase(base, _ctx);\n          const resolved = urls.get(prepended);\n          // replace w/@context if requested\n          if(replace) {\n            if(_isArray(resolved)) {\n              // add flattened context\n              Array.prototype.splice.apply(ctx, [i, 1].concat(resolved));\n              i += resolved.length - 1;\n              length = ctx.length;\n            } else if(resolved !== false) {\n              ctx[i] = resolved;\n            }\n          } else if(resolved === undefined) {\n            // @context URL found\n            urls.set(prepended, false);\n          }\n        } else {\n          // look for scoped context\n          for(const key in _ctx) {\n            if(_isObject(_ctx[key])) {\n              _findContextUrls(_ctx[key], urls, replace, base);\n            }\n          }\n        }\n      }\n    } else if(_isString(ctx)) {\n      // string @context\n      const prepended = prependBase(base, ctx);\n      const resolved = urls.get(prepended);\n      // replace w/@context if requested\n      if(replace) {\n        if(resolved !== false) {\n          input[key] = resolved;\n        }\n      } else if(resolved === undefined) {\n        // @context URL found\n        urls.set(prepended, false);\n      }\n    } else {\n      // look for scoped context\n      for(const key in ctx) {\n        if(_isObject(ctx[key])) {\n          _findContextUrls(ctx[key], urls, replace, base);\n        }\n      }\n    }\n  }\n}\n\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if((!(x1 && typeof x1 === 'object')) ||\n     (!(x2 && typeof x2 === 'object'))) {\n    return x1 === x2;\n  }\n  // x1 and x2 are objects (also potentially arrays)\n  const x1Array = Array.isArray(x1);\n  if(x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n  if(x1Array) {\n    if(x1.length !== x2.length) {\n      return false;\n    }\n    for(let i = 0; i < x1.length; ++i) {\n      if(!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // x1 and x2 are non-array objects\n  const k1s = Object.keys(x1);\n  const k2s = Object.keys(x2);\n  if(k1s.length !== k2s.length) {\n    return false;\n  }\n  for(const k1 in x1) {\n    let v1 = x1[k1];\n    let v2 = x2[k1];\n    // special case: `@container` can be in any order\n    if(k1 === '@container') {\n      if(Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n    if(!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/context.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/documentLoaders/node.js":
/*!*********************************************************!*\
  !*** ./node_modules/jsonld/lib/documentLoaders/node.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst {parseLinkHeader, buildHeaders} = __webpack_require__(/*! ../util */ \"./node_modules/jsonld/lib/util.js\");\nconst {LINK_HEADER_REL} = __webpack_require__(/*! ../constants */ \"./node_modules/jsonld/lib/constants.js\");\nconst JsonLdError = __webpack_require__(/*! ../JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\nconst RequestQueue = __webpack_require__(/*! ../RequestQueue */ \"./node_modules/jsonld/lib/RequestQueue.js\");\n\n/**\n * Creates a built-in node document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          strictSSL: true to require SSL certificates to be valid,\n *            false not to (default: true).\n *          maxRedirects: the maximum number of redirects to permit, none by\n *            default.\n *          request: the object which will make the request, default is\n *            provided by `https://www.npmjs.com/package/request`.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *\n * @return the node document loader.\n */\nmodule.exports = ({\n  secure,\n  strictSSL = true,\n  maxRedirects = -1,\n  request,\n  headers = {}\n} = {strictSSL: true, maxRedirects: -1, headers: {}}) => {\n  headers = buildHeaders(headers);\n  // TODO: use `r2`\n  request = request || __webpack_require__(/*! request */ 4);\n  const http = __webpack_require__(/*! http */ 5);\n  // TODO: disable cache until HTTP caching implemented\n  //const cache = new DocumentCache();\n\n  const queue = new RequestQueue();\n  return queue.wrapLoader(function(url) {\n    return loadDocument(url, []);\n  });\n\n  async function loadDocument(url, redirects) {\n    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; only \"http\" and \"https\" URLs are ' +\n        'supported.',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    if(secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; secure mode is enabled and ' +\n        'the URL\\'s scheme is not \"https\".',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    // TODO: disable cache until HTTP caching implemented\n    let doc = null;//cache.get(url);\n    if(doc !== null) {\n      return doc;\n    }\n\n    let result;\n    try {\n      result = await _request(request, {\n        url,\n        headers,\n        strictSSL,\n        followRedirect: false\n      });\n    } catch(e) {\n      throw new JsonLdError(\n        'URL could not be dereferenced, an error occurred.',\n        'jsonld.LoadDocumentError',\n        {code: 'loading document failed', url, cause: e});\n    }\n\n    const {res, body} = result;\n\n    doc = {contextUrl: null, documentUrl: url, document: body || null};\n\n    // handle error\n    const statusText = http.STATUS_CODES[res.statusCode];\n    if(res.statusCode >= 400) {\n      throw new JsonLdError(\n        'URL could not be dereferenced: ' + statusText,\n        'jsonld.InvalidUrl', {\n          code: 'loading document failed',\n          url,\n          httpStatusCode: res.statusCode\n        });\n    }\n\n    // handle Link Header\n    if(res.headers.link &&\n      res.headers['content-type'] !== 'application/ld+json') {\n      // only 1 related link header permitted\n      const linkHeader = parseLinkHeader(res.headers.link)[LINK_HEADER_REL];\n      if(Array.isArray(linkHeader)) {\n        throw new JsonLdError(\n          'URL could not be dereferenced, it has more than one associated ' +\n          'HTTP Link Header.',\n          'jsonld.InvalidUrl',\n          {code: 'multiple context link headers', url});\n      }\n      if(linkHeader) {\n        doc.contextUrl = linkHeader.target;\n      }\n    }\n\n    // handle redirect\n    if(res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {\n      if(redirects.length === maxRedirects) {\n        throw new JsonLdError(\n          'URL could not be dereferenced; there were too many redirects.',\n          'jsonld.TooManyRedirects', {\n            code: 'loading document failed',\n            url,\n            httpStatusCode: res.statusCode,\n            redirects\n          });\n      }\n      if(redirects.indexOf(url) !== -1) {\n        throw new JsonLdError(\n          'URL could not be dereferenced; infinite redirection was detected.',\n          'jsonld.InfiniteRedirectDetected', {\n            code: 'recursive context inclusion',\n            url,\n            httpStatusCode: res.statusCode,\n            redirects\n          });\n      }\n      redirects.push(url);\n      return loadDocument(res.headers.location, redirects);\n    }\n\n    // cache for each redirected URL\n    redirects.push(url);\n    // TODO: disable cache until HTTP caching implemented\n    /*\n    for(let i = 0; i < redirects.length; ++i) {\n      cache.set(\n        redirects[i],\n        {contextUrl: null, documentUrl: redirects[i], document: body});\n    }\n    */\n\n    return doc;\n  }\n};\n\nfunction _request(request, options) {\n  return new Promise((resolve, reject) => {\n    request(options, (err, res, body) => {\n      if(err) {\n        reject(err);\n      } else {\n        resolve({res, body});\n      }\n    });\n  });\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/documentLoaders/node.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/documentLoaders/xhr.js":
/*!********************************************************!*\
  !*** ./node_modules/jsonld/lib/documentLoaders/xhr.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst {parseLinkHeader, buildHeaders} = __webpack_require__(/*! ../util */ \"./node_modules/jsonld/lib/util.js\");\nconst {LINK_HEADER_REL} = __webpack_require__(/*! ../constants */ \"./node_modules/jsonld/lib/constants.js\");\nconst JsonLdError = __webpack_require__(/*! ../JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\nconst RequestQueue = __webpack_require__(/*! ../RequestQueue */ \"./node_modules/jsonld/lib/RequestQueue.js\");\n\nconst REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\nmodule.exports = ({\n  secure,\n  headers = {},\n  xhr\n} = {headers: {}}) => {\n  headers = buildHeaders(headers);\n  const queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n\n  async function loader(url) {\n    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; only \"http\" and \"https\" URLs are ' +\n        'supported.',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    if(secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; secure mode is enabled and ' +\n        'the URL\\'s scheme is not \"https\".',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n\n    let req;\n    try {\n      req = await _get(xhr, url, headers);\n    } catch(e) {\n      throw new JsonLdError(\n        'URL could not be dereferenced, an error occurred.',\n        'jsonld.LoadDocumentError',\n        {code: 'loading document failed', url, cause: e});\n    }\n\n    if(req.status >= 400) {\n      throw new JsonLdError(\n        'URL could not be dereferenced: ' + req.statusText,\n        'jsonld.LoadDocumentError', {\n          code: 'loading document failed',\n          url,\n          httpStatusCode: req.status\n        });\n    }\n\n    const doc = {contextUrl: null, documentUrl: url, document: req.response};\n\n    // handle Link Header (avoid unsafe header warning by existence testing)\n    const contentType = req.getResponseHeader('Content-Type');\n    let linkHeader;\n    if(REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n      linkHeader = req.getResponseHeader('Link');\n    }\n    if(linkHeader && contentType !== 'application/ld+json') {\n      // only 1 related link header permitted\n      linkHeader = parseLinkHeader(linkHeader)[LINK_HEADER_REL];\n      if(Array.isArray(linkHeader)) {\n        throw new JsonLdError(\n          'URL could not be dereferenced, it has more than one ' +\n          'associated HTTP Link Header.',\n          'jsonld.InvalidUrl',\n          {code: 'multiple context link headers', url});\n      }\n      if(linkHeader) {\n        doc.contextUrl = linkHeader.target;\n      }\n    }\n\n    return doc;\n  }\n};\n\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  const req = new xhr();\n  return new Promise((resolve, reject) => {\n    req.onload = () => resolve(req);\n    req.onerror = err => reject(err);\n    req.open('GET', url, true);\n    for(const k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n    req.send();\n  });\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/documentLoaders/xhr.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/expand.js":
/*!*******************************************!*\
  !*** ./node_modules/jsonld/lib/expand.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst JsonLdError = __webpack_require__(/*! ./JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isEmptyObject: _isEmptyObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\n\nconst {\n  isList: _isList,\n  isValue: _isValue,\n  isGraph: _isGraph\n} = __webpack_require__(/*! ./graphTypes */ \"./node_modules/jsonld/lib/graphTypes.js\");\n\nconst {\n  expandIri: _expandIri,\n  getContextValue: _getContextValue,\n  isKeyword: _isKeyword,\n  process: _processContext,\n  processingMode: _processingMode\n} = __webpack_require__(/*! ./context */ \"./node_modules/jsonld/lib/context.js\");\n\nconst {\n  isAbsolute: _isAbsoluteIri\n} = __webpack_require__(/*! ./url */ \"./node_modules/jsonld/lib/url.js\");\n\nconst {\n  addValue: _addValue,\n  asArray: _asArray,\n  getValues: _getValues,\n  validateTypeValue: _validateTypeValue\n} = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Recursively expands an element using the given context. Any context in\n * the element will be removed. All context URLs must have been retrieved\n * before calling this method.\n *\n * @param activeCtx the context to use.\n * @param activeProperty the property for the element, null for none.\n * @param element the element to expand.\n * @param options the expansion options.\n * @param insideList true if the element is a list, false if not.\n * @param insideIndex true if the element is inside an index container,\n *          false if not.\n * @param typeScopedContext an optional type-scoped active context for\n *          expanding values of nodes that were expressed according to\n *          a type-scoped context.\n * @param expansionMap(info) a function that can be used to custom map\n *          unmappable values (or to throw an error when they are detected);\n *          if this function returns `undefined` then the default behavior\n *          will be used.\n *\n * @return a Promise that resolves to the expanded value.\n */\napi.expand = ({\n  activeCtx,\n  activeProperty = null,\n  element,\n  options = {},\n  insideList = false,\n  insideIndex = false,\n  typeScopedContext = null,\n  expansionMap = () => undefined\n}) => {\n  // nothing to expand\n  if(element === null || element === undefined) {\n    return null;\n  }\n\n  // disable framing if activeProperty is @default\n  if(activeProperty === '@default') {\n    options = Object.assign({}, options, {isFrame: false});\n  }\n\n  if(!_isArray(element) && !_isObject(element)) {\n    // drop free-floating scalars that are not in lists unless custom mapped\n    if(!insideList && (activeProperty === null ||\n      _expandIri(activeCtx, activeProperty, {vocab: true},\n        options) === '@graph')) {\n      // TODO: use `await` to support async\n      const mapped = expansionMap({\n        unmappedValue: element,\n        activeCtx,\n        activeProperty,\n        options,\n        insideList\n      });\n      if(mapped === undefined) {\n        return null;\n      }\n      return mapped;\n    }\n\n    // expand element according to value expansion rules\n    return _expandValue({activeCtx, activeProperty, value: element, options});\n  }\n\n  // recursively expand array\n  if(_isArray(element)) {\n    let rval = [];\n    const container = _getContextValue(\n      activeCtx, activeProperty, '@container') || [];\n    insideList = insideList || container.includes('@list');\n    for(let i = 0; i < element.length; ++i) {\n      // expand element\n      let e = api.expand({\n        activeCtx,\n        activeProperty,\n        element: element[i],\n        options,\n        expansionMap,\n        insideIndex,\n        typeScopedContext\n      });\n      if(insideList && _isArray(e)) {\n        e = {'@list': e};\n      }\n\n      if(e === null) {\n        // TODO: add `await` for async support\n        e = expansionMap({\n          unmappedValue: element[i],\n          activeCtx,\n          activeProperty,\n          parent: element,\n          index: i,\n          options,\n          expandedParent: rval,\n          insideList\n        });\n        if(e === undefined) {\n          continue;\n        }\n      }\n\n      if(_isArray(e)) {\n        rval = rval.concat(e);\n      } else {\n        rval.push(e);\n      }\n    }\n    return rval;\n  }\n\n  // recursively expand object:\n\n  // first, expand the active property\n  const expandedActiveProperty = _expandIri(\n    activeCtx, activeProperty, {vocab: true}, options);\n\n  // second, determine if any type-scoped context should be reverted; it\n  // should only be reverted when the following are all true:\n  // 1. `element` is not a value or subject reference\n  // 2. `insideIndex` is false\n  typeScopedContext = typeScopedContext ||\n    (activeCtx.previousContext ? activeCtx : null);\n  let keys = Object.keys(element).sort();\n  let mustRevert = !insideIndex;\n  if(mustRevert && typeScopedContext && keys.length <= 2 &&\n    !keys.includes('@context')) {\n    for(const key of keys) {\n      const expandedProperty = _expandIri(\n        typeScopedContext, key, {vocab: true}, options);\n      if(expandedProperty === '@value') {\n        // value found, ensure type-scoped context is used to expand it\n        mustRevert = false;\n        activeCtx = typeScopedContext;\n        break;\n      }\n      if(expandedProperty === '@id' && keys.length === 1) {\n        // subject reference found, do not revert\n        mustRevert = false;\n        break;\n      }\n    }\n  }\n\n  if(mustRevert) {\n    // revert type scoped context\n    activeCtx = activeCtx.revertTypeScopedContext();\n  }\n\n  // if element has a context, process it\n  if('@context' in element) {\n    activeCtx = _processContext(\n      {activeCtx, localCtx: element['@context'], options});\n  }\n\n  // look for scoped contexts on `@type`\n  for(const key of keys) {\n    const expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);\n    if(expandedProperty === '@type') {\n      // set scoped contexts from @type\n      // avoid sorting if possible\n      const value = element[key];\n      const types =\n        Array.isArray(value) ?\n          (value.length > 1 ? value.slice().sort() : value) : [value];\n      for(const type of types) {\n        const ctx = _getContextValue(\n          activeCtx.previousContext || activeCtx, type, '@context');\n        if(!_isUndefined(ctx)) {\n          activeCtx = _processContext({\n            activeCtx,\n            localCtx: ctx,\n            options,\n            isTypeScopedContext: true\n          });\n        }\n      }\n    }\n  }\n\n  // process each key and value in element, ignoring @nest content\n  let rval = {};\n  _expandObject({\n    activeCtx,\n    activeProperty,\n    expandedActiveProperty,\n    element,\n    expandedParent: rval,\n    options,\n    insideList,\n    typeScopedContext,\n    expansionMap});\n\n  // get property count on expanded output\n  keys = Object.keys(rval);\n  let count = keys.length;\n\n  if('@value' in rval) {\n    // @value must only have @language or @type\n    if('@type' in rval && '@language' in rval) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an element containing \"@value\" may not ' +\n        'contain both \"@type\" and \"@language\".',\n        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});\n    }\n    let validCount = count - 1;\n    if('@type' in rval) {\n      validCount -= 1;\n    }\n    if('@index' in rval) {\n      validCount -= 1;\n    }\n    if('@language' in rval) {\n      validCount -= 1;\n    }\n    if(validCount !== 0) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an element containing \"@value\" may only ' +\n        'have an \"@index\" property and at most one other property ' +\n        'which can be \"@type\" or \"@language\".',\n        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});\n    }\n    const values = rval['@value'] === null ? [] : _asArray(rval['@value']);\n    const types = _getValues(rval, '@type');\n\n    // drop null @values unless custom mapped\n    if(values.length === 0) {\n      // TODO: use `await` to support async\n      const mapped = expansionMap({\n        unmappedValue: rval,\n        activeCtx,\n        activeProperty,\n        element,\n        options,\n        insideList\n      });\n      if(mapped !== undefined) {\n        rval = mapped;\n      } else {\n        rval = null;\n      }\n    } else if(!values.every(v => (_isString(v) || _isEmptyObject(v))) &&\n      '@language' in rval) {\n      // if @language is present, @value must be a string\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; only strings may be language-tagged.',\n        'jsonld.SyntaxError',\n        {code: 'invalid language-tagged value', element: rval});\n    } else if(_processingMode(activeCtx, 1.1) && types.includes('@json') &&\n      types.length === 1) {\n      // Any value of @value is okay if @type: @json\n    } else if(!types.every(t =>\n      (_isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) ||\n      _isEmptyObject(t)))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an element containing \"@value\" and \"@type\" ' +\n        'must have an absolute IRI for the value of \"@type\".',\n        'jsonld.SyntaxError', {code: 'invalid typed value', element: rval});\n    }\n  } else if('@type' in rval && !_isArray(rval['@type'])) {\n    // convert @type to an array\n    rval['@type'] = [rval['@type']];\n  } else if('@set' in rval || '@list' in rval) {\n    // handle @set and @list\n    if(count > 1 && !(count === 2 && '@index' in rval)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; if an element has the property \"@set\" ' +\n        'or \"@list\", then it can have at most one other property that is ' +\n        '\"@index\".', 'jsonld.SyntaxError',\n        {code: 'invalid set or list object', element: rval});\n    }\n    // optimize away @set\n    if('@set' in rval) {\n      rval = rval['@set'];\n      keys = Object.keys(rval);\n      count = keys.length;\n    }\n  } else if(count === 1 && '@language' in rval) {\n    // drop objects with only @language unless custom mapped\n    // TODO: use `await` to support async\n    const mapped = expansionMap(rval, {\n      unmappedValue: rval,\n      activeCtx,\n      activeProperty,\n      element,\n      options,\n      insideList\n    });\n    if(mapped !== undefined) {\n      rval = mapped;\n    } else {\n      rval = null;\n    }\n  }\n\n  // drop certain top-level objects that do not occur in lists, unless custom\n  // mapped\n  if(_isObject(rval) &&\n    !options.keepFreeFloatingNodes && !insideList &&\n    (activeProperty === null || expandedActiveProperty === '@graph')) {\n    // drop empty object, top-level @value/@list, or object with only @id\n    if(count === 0 || '@value' in rval || '@list' in rval ||\n      (count === 1 && '@id' in rval)) {\n      // TODO: use `await` to support async\n      const mapped = expansionMap({\n        unmappedValue: rval,\n        activeCtx,\n        activeProperty,\n        element,\n        options,\n        insideList\n      });\n      if(mapped !== undefined) {\n        rval = mapped;\n      } else {\n        rval = null;\n      }\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Expand each key and value of element adding to result\n *\n * @param activeCtx the context to use.\n * @param activeProperty the property for the element.\n * @param expandedActiveProperty the expansion of activeProperty\n * @param element the element to expand.\n * @param expandedParent the expanded result into which to add values.\n * @param options the expansion options.\n * @param insideList true if the element is a list, false if not.\n * @param expansionMap(info) a function that can be used to custom map\n *          unmappable values (or to throw an error when they are detected);\n *          if this function returns `undefined` then the default behavior\n *          will be used.\n */\nfunction _expandObject({\n  activeCtx,\n  activeProperty,\n  expandedActiveProperty,\n  element,\n  expandedParent,\n  options = {},\n  insideList,\n  expansionMap\n}) {\n  const keys = Object.keys(element).sort();\n  const nests = [];\n  for(const key of keys) {\n    let value = element[key];\n    let expandedValue;\n\n    // skip @context\n    if(key === '@context') {\n      continue;\n    }\n\n    // expand property\n    let expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);\n\n    // drop non-absolute IRI keys that aren't keywords unless custom mapped\n    if(expandedProperty === null ||\n      !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {\n      // TODO: use `await` to support async\n      expandedProperty = expansionMap({\n        unmappedProperty: key,\n        activeCtx,\n        activeProperty,\n        parent: element,\n        options,\n        insideList,\n        value,\n        expandedParent\n      });\n      if(expandedProperty === undefined) {\n        continue;\n      }\n    }\n\n    if(_isKeyword(expandedProperty)) {\n      if(expandedActiveProperty === '@reverse') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' +\n          'property.', 'jsonld.SyntaxError',\n          {code: 'invalid reverse property map', value});\n      }\n      if(expandedProperty in expandedParent) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; colliding keywords detected.',\n          'jsonld.SyntaxError',\n          {code: 'colliding keywords', keyword: expandedProperty});\n      }\n    }\n\n    // syntax error if @id is not a string\n    if(expandedProperty === '@id') {\n      if(!_isString(value)) {\n        if(!options.isFrame) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; \"@id\" value must a string.',\n            'jsonld.SyntaxError', {code: 'invalid @id value', value});\n        }\n        if(_isObject(value)) {\n          // empty object is a wildcard\n          if(!_isEmptyObject(value)) {\n            throw new JsonLdError(\n              'Invalid JSON-LD syntax; \"@id\" value an empty object or array ' +\n              'of strings, if framing',\n              'jsonld.SyntaxError', {code: 'invalid @id value', value});\n          }\n        } else if(_isArray(value)) {\n          if(!value.every(v => _isString(v))) {\n            throw new JsonLdError(\n              'Invalid JSON-LD syntax; \"@id\" value an empty object or array ' +\n              'of strings, if framing',\n              'jsonld.SyntaxError', {code: 'invalid @id value', value});\n          }\n        } else {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; \"@id\" value an empty object or array ' +\n            'of strings, if framing',\n            'jsonld.SyntaxError', {code: 'invalid @id value', value});\n        }\n      }\n\n      _addValue(\n        expandedParent, '@id',\n        _asArray(value).map(v =>\n          _isString(v) ? _expandIri(activeCtx, v, {base: true}, options) : v),\n        {propertyIsArray: options.isFrame});\n      continue;\n    }\n\n    if(expandedProperty === '@type') {\n      _validateTypeValue(value);\n      _addValue(\n        expandedParent, '@type',\n        _asArray(value).map(v =>\n          _isString(v) ?\n            _expandIri(activeCtx.previousContext || activeCtx, v,\n              {base: true, vocab: true}, options) : v),\n        {propertyIsArray: options.isFrame});\n      continue;\n    }\n\n    // @graph must be an array or an object\n    if(expandedProperty === '@graph' &&\n      !(_isObject(value) || _isArray(value))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; \"@graph\" value must not be an ' +\n        'object or an array.',\n        'jsonld.SyntaxError', {code: 'invalid @graph value', value});\n    }\n\n    if(expandedProperty === '@value') {\n      _addValue(\n        expandedParent, '@value', value, {propertyIsArray: options.isFrame});\n      continue;\n    }\n\n    // @language must be a string\n    if(expandedProperty === '@language') {\n      if(value === null) {\n        // drop null @language values, they expand as if they didn't exist\n        continue;\n      }\n      if(!_isString(value) && !options.isFrame) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; \"@language\" value must be a string.',\n          'jsonld.SyntaxError',\n          {code: 'invalid language-tagged string', value});\n      }\n      // ensure language value is lowercase\n      value = _asArray(value).map(v => _isString(v) ? v.toLowerCase() : v);\n\n      _addValue(\n        expandedParent, '@language', value, {propertyIsArray: options.isFrame});\n      continue;\n    }\n\n    // @index must be a string\n    if(expandedProperty === '@index') {\n      if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; \"@index\" value must be a string.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @index value', value});\n      }\n      _addValue(expandedParent, '@index', value);\n      continue;\n    }\n\n    // @reverse must be an object\n    if(expandedProperty === '@reverse') {\n      if(!_isObject(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; \"@reverse\" value must be an object.',\n          'jsonld.SyntaxError', {code: 'invalid @reverse value', value});\n      }\n\n      expandedValue = api.expand({\n        activeCtx,\n        activeProperty:\n        '@reverse',\n        element: value,\n        options,\n        expansionMap\n      });\n      // properties double-reversed\n      if('@reverse' in expandedValue) {\n        for(const property in expandedValue['@reverse']) {\n          _addValue(\n            expandedParent, property, expandedValue['@reverse'][property],\n            {propertyIsArray: true});\n        }\n      }\n\n      // FIXME: can this be merged with code below to simplify?\n      // merge in all reversed properties\n      let reverseMap = expandedParent['@reverse'] || null;\n      for(const property in expandedValue) {\n        if(property === '@reverse') {\n          continue;\n        }\n        if(reverseMap === null) {\n          reverseMap = expandedParent['@reverse'] = {};\n        }\n        _addValue(reverseMap, property, [], {propertyIsArray: true});\n        const items = expandedValue[property];\n        for(let ii = 0; ii < items.length; ++ii) {\n          const item = items[ii];\n          if(_isValue(item) || _isList(item)) {\n            throw new JsonLdError(\n              'Invalid JSON-LD syntax; \"@reverse\" value must not be a ' +\n              '@value or an @list.', 'jsonld.SyntaxError',\n              {code: 'invalid reverse property value', value: expandedValue});\n          }\n          _addValue(reverseMap, property, item, {propertyIsArray: true});\n        }\n      }\n\n      continue;\n    }\n\n    // nested keys\n    if(expandedProperty === '@nest') {\n      nests.push(key);\n      continue;\n    }\n\n    // use potential scoped context for key\n    let termCtx = activeCtx;\n    const ctx = _getContextValue(activeCtx, key, '@context');\n    if(!_isUndefined(ctx)) {\n      // Note: spec's `from term` var is named `isPropertyTermScopedContext`\n      termCtx = _processContext({\n        activeCtx,\n        localCtx: ctx,\n        isPropertyTermScopedContext: true,\n        options\n      });\n    }\n\n    const container = _getContextValue(termCtx, key, '@container') || [];\n\n    if(container.includes('@language') && _isObject(value)) {\n      // handle language map container (skip if value is not an object)\n      expandedValue = _expandLanguageMap(termCtx, value, options);\n    } else if(container.includes('@index') && _isObject(value)) {\n      // handle index container (skip if value is not an object)\n      const asGraph = container.includes('@graph');\n      expandedValue = _expandIndexMap({\n        activeCtx: termCtx,\n        options,\n        activeProperty: key,\n        value,\n        expansionMap,\n        asGraph,\n        indexKey: '@index'\n      });\n    } else if(container.includes('@id') && _isObject(value)) {\n      // handle id container (skip if value is not an object)\n      const asGraph = container.includes('@graph');\n      expandedValue = _expandIndexMap({\n        activeCtx: termCtx,\n        options,\n        activeProperty: key,\n        value,\n        expansionMap,\n        asGraph,\n        indexKey: '@id'\n      });\n    } else if(container.includes('@type') && _isObject(value)) {\n      // handle type container (skip if value is not an object)\n      expandedValue = _expandIndexMap({\n        // since container is `@type`, revert type scoped context when expanding\n        activeCtx: termCtx.revertTypeScopedContext(),\n        options,\n        activeProperty: key,\n        value,\n        expansionMap,\n        asGraph: false,\n        indexKey: '@type'\n      });\n    } else {\n      // recurse into @list or @set\n      const isList = (expandedProperty === '@list');\n      if(isList || expandedProperty === '@set') {\n        let nextActiveProperty = activeProperty;\n        if(isList && expandedActiveProperty === '@graph') {\n          nextActiveProperty = null;\n        }\n        expandedValue = api.expand({\n          activeCtx: termCtx,\n          activeProperty: nextActiveProperty,\n          element: value,\n          options,\n          insideList: isList,\n          expansionMap\n        });\n      } else if(\n        _getContextValue(activeCtx, key, '@type') === '@json') {\n        expandedValue = {\n          '@type': '@json',\n          '@value': value\n        };\n      } else {\n        // recursively expand value with key as new active property\n        expandedValue = api.expand({\n          activeCtx: termCtx,\n          activeProperty: key,\n          element: value,\n          options,\n          insideList: false,\n          expansionMap\n        });\n      }\n    }\n\n    // drop null values if property is not @value\n    if(expandedValue === null && expandedProperty !== '@value') {\n      // TODO: use `await` to support async\n      expandedValue = expansionMap({\n        unmappedValue: value,\n        expandedProperty,\n        activeCtx: termCtx,\n        activeProperty,\n        parent: element,\n        options,\n        insideList,\n        key,\n        expandedParent\n      });\n      if(expandedValue === undefined) {\n        continue;\n      }\n    }\n\n    // convert expanded value to @list if container specifies it\n    if(expandedProperty !== '@list' && !_isList(expandedValue) &&\n      container.includes('@list')) {\n      // ensure expanded value in @list is an array\n      expandedValue = {'@list': _asArray(expandedValue)};\n    }\n\n    // convert expanded value to @graph if container specifies it\n    // and value is not, itself, a graph\n    // index cases handled above\n    if(container.includes('@graph') &&\n      !container.some(key => key === '@id' || key === '@index')) {\n      // ensure expanded values are arrays\n      expandedValue = _asArray(expandedValue)\n        .map(v => _isGraph(v) ? v : {'@graph': _asArray(v)});\n    }\n\n    // FIXME: can this be merged with code above to simplify?\n    // merge in reverse properties\n    if(termCtx.mappings.has(key) && termCtx.mappings.get(key).reverse) {\n      const reverseMap =\n        expandedParent['@reverse'] = expandedParent['@reverse'] || {};\n      expandedValue = _asArray(expandedValue);\n      for(let ii = 0; ii < expandedValue.length; ++ii) {\n        const item = expandedValue[ii];\n        if(_isValue(item) || _isList(item)) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; \"@reverse\" value must not be a ' +\n            '@value or an @list.', 'jsonld.SyntaxError',\n            {code: 'invalid reverse property value', value: expandedValue});\n        }\n        _addValue(reverseMap, expandedProperty, item, {propertyIsArray: true});\n      }\n      continue;\n    }\n\n    // add value for property\n    // use an array except for certain keywords\n    const useArray =\n      !['@index', '@id', '@type', '@value', '@language']\n        .includes(expandedProperty);\n    _addValue(expandedParent, expandedProperty, expandedValue, {\n      propertyIsArray: useArray\n    });\n  }\n\n  // @value must not be an object or an array (unless framing) or if @type is\n  // @json\n  if('@value' in element) {\n    const value = element['@value'];\n    if(element['@type'] === '@json' && _processingMode(activeCtx, 1.1)) {\n      // allow any value, to be verified when the object is fully expanded and\n      // the @type is @json.\n    } else if((_isObject(value) || _isArray(value)) && !options.isFrame) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; \"@value\" value must not be an ' +\n        'object or an array.',\n        'jsonld.SyntaxError',\n        {code: 'invalid value object value', value});\n    }\n  }\n\n  // expand each nested key\n  for(const key of nests) {\n    const nestedValues = _isArray(element[key]) ? element[key] : [element[key]];\n    for(const nv of nestedValues) {\n      if(!_isObject(nv) || Object.keys(nv).some(k =>\n        _expandIri(activeCtx, k, {vocab: true}, options) === '@value')) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; nested value must be a node object.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @nest value', value: nv});\n      }\n      _expandObject({\n        activeCtx,\n        activeProperty,\n        expandedActiveProperty,\n        element: nv,\n        expandedParent,\n        options,\n        insideList,\n        expansionMap});\n    }\n  }\n}\n\n/**\n * Expands the given value by using the coercion and keyword rules in the\n * given context.\n *\n * @param activeCtx the active context to use.\n * @param activeProperty the active property the value is associated with.\n * @param value the value to expand.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandValue({activeCtx, activeProperty, value, options}) {\n  // nothing to expand\n  if(value === null || value === undefined) {\n    return null;\n  }\n\n  // special-case expand @id and @type (skips '@id' expansion)\n  const expandedProperty = _expandIri(\n    activeCtx, activeProperty, {vocab: true}, options);\n  if(expandedProperty === '@id') {\n    return _expandIri(activeCtx, value, {base: true}, options);\n  } else if(expandedProperty === '@type') {\n    return _expandIri(activeCtx, value, {vocab: true, base: true}, options);\n  }\n\n  // get type definition from context\n  const type = _getContextValue(activeCtx, activeProperty, '@type');\n\n  // do @id expansion (automatic for @graph)\n  if((type === '@id' || expandedProperty === '@graph') && _isString(value)) {\n    return {'@id': _expandIri(activeCtx, value, {base: true}, options)};\n  }\n  // do @id expansion w/vocab\n  if(type === '@vocab' && _isString(value)) {\n    return {\n      '@id': _expandIri(activeCtx, value, {vocab: true, base: true}, options)\n    };\n  }\n\n  // do not expand keyword values\n  if(_isKeyword(expandedProperty)) {\n    return value;\n  }\n\n  const rval = {};\n\n  if(type && !['@id', '@vocab'].includes(type)) {\n    // other type\n    rval['@type'] = type;\n  } else if(_isString(value)) {\n    // check for language tagging for strings\n    const language = _getContextValue(activeCtx, activeProperty, '@language');\n    if(language !== null) {\n      rval['@language'] = language;\n    }\n  }\n  // do conversion of values that aren't basic JSON types to strings\n  if(!['boolean', 'number', 'string'].includes(typeof value)) {\n    value = value.toString();\n  }\n  rval['@value'] = value;\n\n  return rval;\n}\n\n/**\n * Expands a language map.\n *\n * @param activeCtx the active context to use.\n * @param languageMap the language map to expand.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded language map.\n */\nfunction _expandLanguageMap(activeCtx, languageMap, options) {\n  const rval = [];\n  const keys = Object.keys(languageMap).sort();\n  for(const key of keys) {\n    const expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);\n    let val = languageMap[key];\n    if(!_isArray(val)) {\n      val = [val];\n    }\n    for(const item of val) {\n      if(item === null) {\n        // null values are allowed (8.5) but ignored (3.1)\n        continue;\n      }\n      if(!_isString(item)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; language map values must be strings.',\n          'jsonld.SyntaxError',\n          {code: 'invalid language map value', languageMap});\n      }\n      const val = {'@value': item};\n      if(expandedKey !== '@none') {\n        val['@language'] = key.toLowerCase();\n      }\n      rval.push(val);\n    }\n  }\n  return rval;\n}\n\nfunction _expandIndexMap(\n  {activeCtx, options, activeProperty, value, expansionMap, asGraph,\n    indexKey}) {\n  const rval = [];\n  const keys = Object.keys(value).sort();\n  const isTypeIndex = indexKey === '@type';\n  for(let key of keys) {\n    // if indexKey is @type, there may be a context defined for it\n    if(isTypeIndex) {\n      const ctx = _getContextValue(activeCtx, key, '@context');\n      if(!_isUndefined(ctx)) {\n        activeCtx = _processContext({\n          activeCtx,\n          localCtx: ctx,\n          isTypeScopedContext: true,\n          options\n        });\n      }\n    }\n\n    let val = value[key];\n    if(!_isArray(val)) {\n      val = [val];\n    }\n\n    // expand for @type, but also for @none\n    const expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);\n    if(indexKey === '@id') {\n      // expand document relative\n      key = _expandIri(activeCtx, key, {base: true}, options);\n    } else if(isTypeIndex) {\n      key = expandedKey;\n    }\n\n    val = api.expand({\n      activeCtx,\n      activeProperty,\n      element: val,\n      options,\n      insideList: false,\n      insideIndex: true,\n      expansionMap\n    });\n    for(let item of val) {\n      // If this is also a @graph container, turn items into graphs\n      if(asGraph && !_isGraph(item)) {\n        item = {'@graph': [item]};\n      }\n      if(indexKey === '@type') {\n        if(expandedKey === '@none') {\n          // ignore @none\n        } else if(item['@type']) {\n          item['@type'] = [key].concat(item['@type']);\n        } else {\n          item['@type'] = [key];\n        }\n      } else if(expandedKey !== '@none' && !(indexKey in item)) {\n        item[indexKey] = key;\n      }\n      rval.push(item);\n    }\n  }\n  return rval;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/expand.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/flatten.js":
/*!********************************************!*\
  !*** ./node_modules/jsonld/lib/flatten.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst {\n  isSubjectReference: _isSubjectReference\n} = __webpack_require__(/*! ./graphTypes */ \"./node_modules/jsonld/lib/graphTypes.js\");\n\nconst {\n  createMergedNodeMap: _createMergedNodeMap\n} = __webpack_require__(/*! ./nodeMap */ \"./node_modules/jsonld/lib/nodeMap.js\");\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Performs JSON-LD flattening.\n *\n * @param input the expanded JSON-LD to flatten.\n *\n * @return the flattened output.\n */\napi.flatten = input => {\n  const defaultGraph = _createMergedNodeMap(input);\n\n  // produce flattened output\n  const flattened = [];\n  const keys = Object.keys(defaultGraph).sort();\n  for(let ki = 0; ki < keys.length; ++ki) {\n    const node = defaultGraph[keys[ki]];\n    // only add full subjects to top-level\n    if(!_isSubjectReference(node)) {\n      flattened.push(node);\n    }\n  }\n  return flattened;\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/flatten.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/frame.js":
/*!******************************************!*\
  !*** ./node_modules/jsonld/lib/frame.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst {isKeyword} = __webpack_require__(/*! ./context */ \"./node_modules/jsonld/lib/context.js\");\nconst graphTypes = __webpack_require__(/*! ./graphTypes */ \"./node_modules/jsonld/lib/graphTypes.js\");\nconst types = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\nconst JsonLdError = __webpack_require__(/*! ./JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\nconst {\n  createNodeMap: _createNodeMap,\n  mergeNodeMapGraphs: _mergeNodeMapGraphs\n} = __webpack_require__(/*! ./nodeMap */ \"./node_modules/jsonld/lib/nodeMap.js\");\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\napi.frameMergedOrDefault = (input, frame, options) => {\n  // create framing state\n  const state = {\n    options,\n    graph: '@default',\n    graphMap: {'@default': {}},\n    graphStack: [],\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  };\n\n  // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n  const issuer = new util.IdentifierIssuer('_:b');\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n  if(options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n  state.subjects = state.graphMap[state.graph];\n\n  // frame the subjects\n  const framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);\n\n  // If pruning blank nodes, find those to prune\n  if(options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear =\n      Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);\n  }\n\n  return framed;\n};\n\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\napi.frame = (state, subjects, frame, parent, property = null) => {\n  // validate the frame\n  _validateFrame(frame);\n  frame = frame[0];\n\n  // get flags for current frame\n  const options = state.options;\n  const flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  };\n\n  // filter out subjects that match the frame\n  const matches = _filterSubjects(state, subjects, frame, flags);\n\n  // add matches to output\n  const ids = Object.keys(matches).sort();\n  for(const id of ids) {\n    const subject = matches[id];\n\n    if(flags.embed === '@link' && id in state.link) {\n      // TODO: may want to also match an existing linked subject against\n      // the current frame ... so different frames could produce different\n      // subjects that are only shared in-memory when the frames are the same\n\n      // add existing linked subject\n      _addFrameOutput(parent, property, state.link[id]);\n      continue;\n    }\n\n    /* Note: In order to treat each top-level match as a compartmentalized\n    result, clear the unique embedded subjects map when the property is null,\n    which only occurs at the top-level. */\n    if(property === null) {\n      state.uniqueEmbeds = {[state.graph]: {}};\n    } else {\n      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n    }\n\n    // start output for subject\n    const output = {};\n    output['@id'] = id;\n    if(id.indexOf('_:') === 0) {\n      util.addValue(state.bnodeMap, id, output, {propertyIsArray: true});\n    }\n    state.link[id] = output;\n\n    // if embed is @never or if a circular reference would be created by an\n    // embed, the subject cannot be embedded, just add the reference;\n    // note that a circular reference won't occur when the embed flag is\n    // `@link` as the above check will short-circuit before reaching this point\n    if(flags.embed === '@never' ||\n      _createsCircularReference(subject, state.graph, state.subjectStack)) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the last match should be embedded\n    if(flags.embed === '@last') {\n      // remove any existing embed\n      if(id in state.uniqueEmbeds[state.graph]) {\n        _removeEmbed(state, id);\n      }\n      state.uniqueEmbeds[state.graph][id] =\n        {parent, property};\n    }\n\n    // push matching subject onto stack to enable circular embed checks\n    state.subjectStack.push({subject, graph: state.graph});\n\n    // subject is also the name of a graph\n    if(id in state.graphMap) {\n      let recurse = false;\n      let subframe = null;\n      if(!('@graph' in frame)) {\n        recurse = state.graph !== '@merged';\n        subframe = {};\n      } else {\n        subframe = frame['@graph'][0];\n        if(!types.isObject(subframe)) {\n          subframe = {};\n        }\n        recurse = !(id === '@merged' || id === '@default');\n      }\n\n      if(recurse) {\n        state.graphStack.push(state.graph);\n        state.graph = id;\n        // recurse into graph\n        api.frame(\n          state,\n          Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n        state.graph = state.graphStack.pop;\n      }\n    }\n\n    // iterate over subject properties\n    for(const prop of Object.keys(subject).sort()) {\n      // copy keywords to output\n      if(isKeyword(prop)) {\n        output[prop] = util.clone(subject[prop]);\n\n        if(prop === '@type') {\n          // count bnode values of @type\n          for(const type of subject['@type']) {\n            if(type.indexOf('_:') === 0) {\n              util.addValue(\n                state.bnodeMap, type, output, {propertyIsArray: true});\n            }\n          }\n        }\n        continue;\n      }\n\n      // explicit is on and property isn't in the frame, skip processing\n      if(flags.explicit && !(prop in frame)) {\n        continue;\n      }\n\n      // add objects\n      for(let o of subject[prop]) {\n        const subframe = (prop in frame ?\n          frame[prop] : _createImplicitFrame(flags));\n\n        // recurse into list\n        if(graphTypes.isList(o)) {\n          // add empty list\n          const list = {'@list': []};\n          _addFrameOutput(output, prop, list);\n\n          // add list objects\n          const src = o['@list'];\n          for(const n in src) {\n            o = src[n];\n            if(graphTypes.isSubjectReference(o)) {\n              const subframe = (prop in frame ?\n                frame[prop][0]['@list'] : _createImplicitFrame(flags));\n              // recurse into subject reference\n              api.frame(state, [o['@id']], subframe, list, '@list');\n            } else {\n              // include other values automatically\n              _addFrameOutput(list, '@list', util.clone(o));\n            }\n          }\n          continue;\n        }\n\n        if(graphTypes.isSubjectReference(o)) {\n          // recurse into subject reference\n          api.frame(state, [o['@id']], subframe, output, prop);\n        } else if(_valueMatch(subframe[0], o)) {\n          // include other values, if they match\n          _addFrameOutput(output, prop, util.clone(o));\n        }\n      }\n    }\n\n    // handle defaults\n    for(const prop of Object.keys(frame).sort()) {\n      // skip keywords\n      if(isKeyword(prop)) {\n        continue;\n      }\n\n      // if omit default is off, then include default values for properties\n      // that appear in the next frame but are not in the matching subject\n      const next = frame[prop][0] || {};\n      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n      if(!omitDefaultOn && !(prop in output)) {\n        let preserve = '@null';\n        if('@default' in next) {\n          preserve = util.clone(next['@default']);\n        }\n        if(!types.isArray(preserve)) {\n          preserve = [preserve];\n        }\n        output[prop] = [{'@preserve': preserve}];\n      }\n    }\n\n    // if embed reverse values by finding nodes having this subject as a value\n    // of the associated property\n    if('@reverse' in frame) {\n      for(const reverseProp of Object.keys(frame['@reverse']).sort()) {\n        const subframe = frame['@reverse'][reverseProp];\n        for(const subject of Object.keys(state.subjects)) {\n          const nodeValues =\n            util.getValues(state.subjects[subject], reverseProp);\n          if(nodeValues.some(v => v['@id'] === id)) {\n            // node has property referencing this subject, recurse\n            output['@reverse'] = output['@reverse'] || {};\n            util.addValue(\n              output['@reverse'], reverseProp, [], {propertyIsArray: true});\n            api.frame(\n              state, [subject], subframe, output['@reverse'][reverseProp],\n              property);\n          }\n        }\n      }\n    }\n\n    // add output to parent\n    _addFrameOutput(parent, property, output);\n\n    // pop matching subject from circular ref-checking stack\n    state.subjectStack.pop();\n  }\n};\n\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\nfunction _createImplicitFrame(flags) {\n  const frame = {};\n  for(const key in flags) {\n    if(flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n  return [frame];\n}\n\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for(let i = subjectStack.length - 1; i >= 0; --i) {\n    const subject = subjectStack[i];\n    if(subject.graph === graph &&\n      subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\nfunction _getFrameFlag(frame, options, name) {\n  const flag = '@' + name;\n  let rval = (flag in frame ? frame[flag][0] : options[name]);\n  if(name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if(rval === true) {\n      rval = '@last';\n    } else if(rval === false) {\n      rval = '@never';\n    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link') {\n      rval = '@last';\n    }\n  }\n  return rval;\n}\n\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\nfunction _validateFrame(frame) {\n  if(!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',\n      'jsonld.SyntaxError', {frame});\n  }\n}\n\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  const rval = {};\n  for(const id of subjects) {\n    const subject = state.graphMap[state.graph][id];\n    if(_filterSubject(state, subject, frame, flags)) {\n      rval[id] = subject;\n    }\n  }\n  return rval;\n}\n\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  let wildcard = true;\n  let matchesSome = false;\n\n  for(const key in frame) {\n    let matchThis = false;\n    const nodeValues = util.getValues(subject, key);\n    const isEmpty = util.getValues(frame, key).length === 0;\n\n    if(isKeyword(key)) {\n      // skip non-@id and non-@type\n      if(key !== '@id' && key !== '@type') {\n        continue;\n      }\n      wildcard = false;\n\n      // check @id for a specific @id value\n      if(key === '@id') {\n        // if @id is not a wildcard and is not empty, then match or not on\n        // specific value\n        if(frame['@id'].length >= 0 && !types.isEmptyObject(frame['@id'][0])) {\n          return frame['@id'].includes(nodeValues[0]);\n        }\n        matchThis = true;\n        continue;\n      }\n\n      // check @type (object value means 'any' type, fall through to ducktyping)\n      if('@type' in frame) {\n        if(isEmpty) {\n          if(nodeValues.length > 0) {\n            // don't match on no @type\n            return false;\n          }\n          matchThis = true;\n        } else if(frame['@type'].length === 1 &&\n          types.isEmptyObject(frame['@type'][0])) {\n          // match on wildcard @type\n          matchThis = nodeValues.length > 0;\n        } else {\n          // match on a specific @type\n          for(const type of frame['@type']) {\n            if(nodeValues.some(tt => tt === type)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n    }\n\n    // Forc a copy of this frame entry so it can be manipulated\n    const thisFrame = util.getValues(frame, key)[0];\n    let hasDefault = false;\n    if(thisFrame) {\n      _validateFrame([thisFrame]);\n      hasDefault = '@default' in thisFrame;\n    }\n\n    // no longer a wildcard pattern if frame has any non-keyword properties\n    wildcard = false;\n\n    // skip, but allow match if node has no value for property, and frame has a\n    // default value\n    if(nodeValues.length === 0 && hasDefault) {\n      continue;\n    }\n\n    // if frame value is empty, don't match if subject has any value\n    if(nodeValues.length > 0 && isEmpty) {\n      return false;\n    }\n\n    if(thisFrame === undefined) {\n      // node does not match if values is not empty and the value of property\n      // in frame is match none.\n      if(nodeValues.length > 0) {\n        return false;\n      }\n      matchThis = true;\n    } else if(types.isObject(thisFrame)) {\n      // node matches if values is not empty and the value of property in frame\n      // is wildcard\n      matchThis = nodeValues.length > 0;\n    } else {\n      if(graphTypes.isValue(thisFrame)) {\n        // match on any matching value\n        matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));\n      } else if(graphTypes.isSubject(thisFrame) ||\n        graphTypes.isSubjectReference(thisFrame)) {\n        matchThis =\n          nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));\n      } else if(graphTypes.isList(thisFrame)) {\n        const listValue = thisFrame['@list'][0];\n        if(graphTypes.isList(nodeValues[0])) {\n          const nodeListValues = nodeValues[0]['@list'];\n\n          if(graphTypes.isValue(listValue)) {\n            // match on any matching value\n            matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));\n          } else if(graphTypes.isSubject(listValue) ||\n            graphTypes.isSubjectReference(listValue)) {\n            matchThis = nodeListValues.some(lv => _nodeMatch(\n              state, listValue, lv, flags));\n          }\n        } else {\n          // value must be a list to match\n          matchThis = false;\n        }\n      }\n    }\n\n    // all non-defaulted values must match if requireAll is set\n    if(!matchThis && flags.requireAll) {\n      return false;\n    }\n\n    matchesSome = matchesSome || matchThis;\n  }\n\n  // return true if wildcard or subject matches some properties\n  return wildcard || matchesSome;\n}\n\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  const embeds = state.uniqueEmbeds[state.graph];\n  const embed = embeds[id];\n  const parent = embed.parent;\n  const property = embed.property;\n\n  // create reference to replace embed\n  const subject = {'@id': id};\n\n  // remove existing embed\n  if(types.isArray(parent)) {\n    // replace subject with reference\n    for(let i = 0; i < parent.length; ++i) {\n      if(util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    const useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {propertyIsArray: useArray});\n    util.addValue(parent, property, subject, {propertyIsArray: useArray});\n  }\n\n  // recursively remove dependent dangling embeds\n  const removeDependents = id => {\n    // get embed keys as a separate array to enable deleting keys in map\n    const ids = Object.keys(embeds);\n    for(const next of ids) {\n      if(next in embeds && types.isObject(embeds[next].parent) &&\n        embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n  removeDependents(id);\n}\n\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\nfunction _addFrameOutput(parent, property, output) {\n  if(types.isObject(parent)) {\n    util.addValue(parent, property, output, {propertyIsArray: true});\n  } else {\n    parent.push(output);\n  }\n}\n\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\nfunction _nodeMatch(state, pattern, value, flags) {\n  if(!('@id' in value)) {\n    return false;\n  }\n  const nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\nfunction _valueMatch(pattern, value) {\n  const v1 = value['@value'];\n  const t1 = value['@type'];\n  const l1 = value['@language'];\n  const v2 = pattern['@value'] ?\n    (types.isArray(pattern['@value']) ?\n      pattern['@value'] : [pattern['@value']]) :\n    [];\n  const t2 = pattern['@type'] ?\n    (types.isArray(pattern['@type']) ?\n      pattern['@type'] : [pattern['@type']]) :\n    [];\n  const l2 = pattern['@language'] ?\n    (types.isArray(pattern['@language']) ?\n      pattern['@language'] : [pattern['@language']]) :\n    [];\n\n  if(v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n  if(!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n  if(!(!t1 && t2.length === 0 || t2.includes(t1) || t1 &&\n    types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n  if(!(!l1 && l2.length === 0 || l2.includes(l1) || l1 &&\n    types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n  return true;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/frame.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/fromRdf.js":
/*!********************************************!*\
  !*** ./node_modules/jsonld/lib/fromRdf.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst JsonLdError = __webpack_require__(/*! ./JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\nconst graphTypes = __webpack_require__(/*! ./graphTypes */ \"./node_modules/jsonld/lib/graphTypes.js\");\nconst types = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\n\n// constants\nconst {\n  // RDF,\n  RDF_LIST,\n  RDF_FIRST,\n  RDF_REST,\n  RDF_NIL,\n  RDF_TYPE,\n  // RDF_PLAIN_LITERAL,\n  // RDF_XML_LITERAL,\n  RDF_JSON_LITERAL,\n  // RDF_OBJECT,\n  // RDF_LANGSTRING,\n\n  // XSD,\n  XSD_BOOLEAN,\n  XSD_DOUBLE,\n  XSD_INTEGER,\n  XSD_STRING,\n} = __webpack_require__(/*! ./constants */ \"./node_modules/jsonld/lib/constants.js\");\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Converts an RDF dataset to JSON-LD.\n *\n * @param dataset the RDF dataset.\n * @param options the RDF serialization options.\n *\n * @return a Promise that resolves to the JSON-LD output.\n */\napi.fromRDF = async (\n  dataset, {useRdfType = false, useNativeTypes = false}) => {\n  const defaultGraph = {};\n  const graphMap = {'@default': defaultGraph};\n  const referencedOnce = {};\n\n  for(const quad of dataset) {\n    // TODO: change 'name' to 'graph'\n    const name = (quad.graph.termType === 'DefaultGraph') ?\n      '@default' : quad.graph.value;\n    if(!(name in graphMap)) {\n      graphMap[name] = {};\n    }\n    if(name !== '@default' && !(name in defaultGraph)) {\n      defaultGraph[name] = {'@id': name};\n    }\n\n    const nodeMap = graphMap[name];\n\n    // get subject, predicate, object\n    const s = quad.subject.value;\n    const p = quad.predicate.value;\n    const o = quad.object;\n\n    if(!(s in nodeMap)) {\n      nodeMap[s] = {'@id': s};\n    }\n    const node = nodeMap[s];\n\n    const objectIsNode = o.termType.endsWith('Node');\n    if(objectIsNode && !(o.value in nodeMap)) {\n      nodeMap[o.value] = {'@id': o.value};\n    }\n\n    if(p === RDF_TYPE && !useRdfType && objectIsNode) {\n      util.addValue(node, '@type', o.value, {propertyIsArray: true});\n      continue;\n    }\n\n    const value = _RDFToObject(o, useNativeTypes);\n    util.addValue(node, p, value, {propertyIsArray: true});\n\n    // object may be an RDF list/partial list node but we can't know easily\n    // until all triples are read\n    if(objectIsNode) {\n      if(o.value === RDF_NIL) {\n        // track rdf:nil uniquely per graph\n        const object = nodeMap[o.value];\n        if(!('usages' in object)) {\n          object.usages = [];\n        }\n        object.usages.push({\n          node,\n          property: p,\n          value\n        });\n      } else if(o.value in referencedOnce) {\n        // object referenced more than once\n        referencedOnce[o.value] = false;\n      } else {\n        // keep track of single reference\n        referencedOnce[o.value] = {\n          node,\n          property: p,\n          value\n        };\n      }\n    }\n  }\n\n  /*\n  for(let name in dataset) {\n    const graph = dataset[name];\n    if(!(name in graphMap)) {\n      graphMap[name] = {};\n    }\n    if(name !== '@default' && !(name in defaultGraph)) {\n      defaultGraph[name] = {'@id': name};\n    }\n    const nodeMap = graphMap[name];\n    for(let ti = 0; ti < graph.length; ++ti) {\n      const triple = graph[ti];\n\n      // get subject, predicate, object\n      const s = triple.subject.value;\n      const p = triple.predicate.value;\n      const o = triple.object;\n\n      if(!(s in nodeMap)) {\n        nodeMap[s] = {'@id': s};\n      }\n      const node = nodeMap[s];\n\n      const objectIsId = (o.type === 'IRI' || o.type === 'blank node');\n      if(objectIsId && !(o.value in nodeMap)) {\n        nodeMap[o.value] = {'@id': o.value};\n      }\n\n      if(p === RDF_TYPE && !useRdfType && objectIsId) {\n        util.addValue(node, '@type', o.value, {propertyIsArray: true});\n        continue;\n      }\n\n      const value = _RDFToObject(o, useNativeTypes);\n      util.addValue(node, p, value, {propertyIsArray: true});\n\n      // object may be an RDF list/partial list node but we can't know easily\n      // until all triples are read\n      if(objectIsId) {\n        if(o.value === RDF_NIL) {\n          // track rdf:nil uniquely per graph\n          const object = nodeMap[o.value];\n          if(!('usages' in object)) {\n            object.usages = [];\n          }\n          object.usages.push({\n            node: node,\n            property: p,\n            value: value\n          });\n        } else if(o.value in referencedOnce) {\n          // object referenced more than once\n          referencedOnce[o.value] = false;\n        } else {\n          // keep track of single reference\n          referencedOnce[o.value] = {\n            node: node,\n            property: p,\n            value: value\n          };\n        }\n      }\n    }\n  }*/\n\n  // convert linked lists to @list arrays\n  for(const name in graphMap) {\n    const graphObject = graphMap[name];\n\n    // no @lists to be converted, continue\n    if(!(RDF_NIL in graphObject)) {\n      continue;\n    }\n\n    // iterate backwards through each RDF list\n    const nil = graphObject[RDF_NIL];\n    if(!nil.usages) {\n      continue;\n    }\n    for(let usage of nil.usages) {\n      let node = usage.node;\n      let property = usage.property;\n      let head = usage.value;\n      const list = [];\n      const listNodes = [];\n\n      // ensure node is a well-formed list node; it must:\n      // 1. Be referenced only once.\n      // 2. Have an array for rdf:first that has 1 item.\n      // 3. Have an array for rdf:rest that has 1 item.\n      // 4. Have no keys other than: @id, rdf:first, rdf:rest, and,\n      //   optionally, @type where the value is rdf:List.\n      let nodeKeyCount = Object.keys(node).length;\n      while(property === RDF_REST &&\n        types.isObject(referencedOnce[node['@id']]) &&\n        types.isArray(node[RDF_FIRST]) && node[RDF_FIRST].length === 1 &&\n        types.isArray(node[RDF_REST]) && node[RDF_REST].length === 1 &&\n        (nodeKeyCount === 3 ||\n          (nodeKeyCount === 4 && types.isArray(node['@type']) &&\n          node['@type'].length === 1 && node['@type'][0] === RDF_LIST))) {\n        list.push(node[RDF_FIRST][0]);\n        listNodes.push(node['@id']);\n\n        // get next node, moving backwards through list\n        usage = referencedOnce[node['@id']];\n        node = usage.node;\n        property = usage.property;\n        head = usage.value;\n        nodeKeyCount = Object.keys(node).length;\n\n        // if node is not a blank node, then list head found\n        if(!graphTypes.isBlankNode(node)) {\n          break;\n        }\n      }\n\n      // transform list into @list object\n      delete head['@id'];\n      head['@list'] = list.reverse();\n      for(const listNode of listNodes) {\n        delete graphObject[listNode];\n      }\n    }\n\n    delete nil.usages;\n  }\n\n  const result = [];\n  const subjects = Object.keys(defaultGraph).sort();\n  for(const subject of subjects) {\n    const node = defaultGraph[subject];\n    if(subject in graphMap) {\n      const graph = node['@graph'] = [];\n      const graphObject = graphMap[subject];\n      const graphSubjects = Object.keys(graphObject).sort();\n      for(const graphSubject of graphSubjects) {\n        const node = graphObject[graphSubject];\n        // only add full subjects to top-level\n        if(!graphTypes.isSubjectReference(node)) {\n          graph.push(node);\n        }\n      }\n    }\n    // only add full subjects to top-level\n    if(!graphTypes.isSubjectReference(node)) {\n      result.push(node);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Converts an RDF triple object to a JSON-LD object.\n *\n * @param o the RDF triple object to convert.\n * @param useNativeTypes true to output native types, false not to.\n *\n * @return the JSON-LD object.\n */\nfunction _RDFToObject(o, useNativeTypes) {\n  // convert NamedNode/BlankNode object to JSON-LD\n  if(o.termType.endsWith('Node')) {\n    return {'@id': o.value};\n  }\n\n  // convert literal to JSON-LD\n  const rval = {'@value': o.value};\n\n  // add language\n  if(o.language) {\n    rval['@language'] = o.language;\n  } else {\n    let type = o.datatype.value;\n    if(!type) {\n      type = XSD_STRING;\n    }\n    if(type === RDF_JSON_LITERAL) {\n      type = '@json';\n      try {\n        rval['@value'] = JSON.parse(rval['@value']);\n      } catch(e) {\n        throw new JsonLdError(\n          'JSON literal could not be parsed.',\n          'jsonld.InvalidJsonLiteral',\n          {code: 'invalid JSON literal', value: rval['@value'], cause: e});\n      }\n    }\n    // use native types for certain xsd types\n    if(useNativeTypes) {\n      if(type === XSD_BOOLEAN) {\n        if(rval['@value'] === 'true') {\n          rval['@value'] = true;\n        } else if(rval['@value'] === 'false') {\n          rval['@value'] = false;\n        }\n      } else if(types.isNumeric(rval['@value'])) {\n        if(type === XSD_INTEGER) {\n          const i = parseInt(rval['@value'], 10);\n          if(i.toFixed(0) === rval['@value']) {\n            rval['@value'] = i;\n          }\n        } else if(type === XSD_DOUBLE) {\n          rval['@value'] = parseFloat(rval['@value']);\n        }\n      }\n      // do not add native type\n      if(![XSD_BOOLEAN, XSD_INTEGER, XSD_DOUBLE, XSD_STRING].includes(type)) {\n        rval['@type'] = type;\n      }\n    } else if(type !== XSD_STRING) {\n      rval['@type'] = type;\n    }\n  }\n\n  return rval;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/fromRdf.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/graphTypes.js":
/*!***********************************************!*\
  !*** ./node_modules/jsonld/lib/graphTypes.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst types = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Returns true if the given value is a subject with properties.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject with properties, false if not.\n */\napi.isSubject = v => {\n  // Note: A value is a subject if all of these hold true:\n  // 1. It is an Object.\n  // 2. It is not a @value, @set, or @list.\n  // 3. It has more than 1 key OR any existing key is not @id.\n  if(types.isObject(v) &&\n    !(('@value' in v) || ('@set' in v) || ('@list' in v))) {\n    const keyCount = Object.keys(v).length;\n    return (keyCount > 1 || !('@id' in v));\n  }\n  return false;\n};\n\n/**\n * Returns true if the given value is a subject reference.\n *\n * @param v the value to check.\n *\n * @return true if the value is a subject reference, false if not.\n */\napi.isSubjectReference = v =>\n  // Note: A value is a subject reference if all of these hold true:\n  // 1. It is an Object.\n  // 2. It has a single key: @id.\n  (types.isObject(v) && Object.keys(v).length === 1 && ('@id' in v));\n\n/**\n * Returns true if the given value is a @value.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @value, false if not.\n */\napi.isValue = v =>\n  // Note: A value is a @value if all of these hold true:\n  // 1. It is an Object.\n  // 2. It has the @value property.\n  types.isObject(v) && ('@value' in v);\n\n/**\n * Returns true if the given value is a @list.\n *\n * @param v the value to check.\n *\n * @return true if the value is a @list, false if not.\n */\napi.isList = v =>\n  // Note: A value is a @list if all of these hold true:\n  // 1. It is an Object.\n  // 2. It has the @list property.\n  types.isObject(v) && ('@list' in v);\n\n/**\n * Returns true if the given value is a @graph.\n *\n * @return true if the value is a @graph, false if not.\n */\napi.isGraph = v => {\n  // Note: A value is a graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It may have '@id' or '@index'\n  return types.isObject(v) &&\n    '@graph' in v &&\n    Object.keys(v)\n      .filter(key => key !== '@id' && key !== '@index').length === 1;\n};\n\n/**\n * Returns true if the given value is a simple @graph.\n *\n * @return true if the value is a simple @graph, false if not.\n */\napi.isSimpleGraph = v => {\n  // Note: A value is a simple graph if all of these hold true:\n  // 1. It is an object.\n  // 2. It has an `@graph` key.\n  // 3. It has only 1 key or 2 keys where one of them is `@index`.\n  return api.isGraph(v) && !('@id' in v);\n};\n\n/**\n * Returns true if the given value is a blank node.\n *\n * @param v the value to check.\n *\n * @return true if the value is a blank node, false if not.\n */\napi.isBlankNode = v => {\n  // Note: A value is a blank node if all of these hold true:\n  // 1. It is an Object.\n  // 2. If it has an @id key its value begins with '_:'.\n  // 3. It has no keys OR is not a @value, @set, or @list.\n  if(types.isObject(v)) {\n    if('@id' in v) {\n      return (v['@id'].indexOf('_:') === 0);\n    }\n    return (Object.keys(v).length === 0 ||\n      !(('@value' in v) || ('@set' in v) || ('@list' in v)));\n  }\n  return false;\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/graphTypes.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/jsonld.js":
/*!*******************************************!*\
  !*** ./node_modules/jsonld/lib/jsonld.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, global) {/**\n * A JavaScript implementation of the JSON-LD API.\n *\n * @author Dave Longley\n *\n * @license BSD 3-Clause License\n * Copyright (c) 2011-2017 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst canonize = __webpack_require__(/*! rdf-canonize */ \"./node_modules/rdf-canonize/lib/index.js\");\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\nconst IdentifierIssuer = util.IdentifierIssuer;\nconst JsonLdError = __webpack_require__(/*! ./JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\nconst NQuads = __webpack_require__(/*! ./NQuads */ \"./node_modules/jsonld/lib/NQuads.js\");\nconst Rdfa = __webpack_require__(/*! ./Rdfa */ \"./node_modules/jsonld/lib/Rdfa.js\");\n\nconst {expand: _expand} = __webpack_require__(/*! ./expand */ \"./node_modules/jsonld/lib/expand.js\");\nconst {flatten: _flatten} = __webpack_require__(/*! ./flatten */ \"./node_modules/jsonld/lib/flatten.js\");\nconst {fromRDF: _fromRDF} = __webpack_require__(/*! ./fromRdf */ \"./node_modules/jsonld/lib/fromRdf.js\");\nconst {toRDF: _toRDF} = __webpack_require__(/*! ./toRdf */ \"./node_modules/jsonld/lib/toRdf.js\");\n\nconst {\n  frameMergedOrDefault: _frameMergedOrDefault\n} = __webpack_require__(/*! ./frame */ \"./node_modules/jsonld/lib/frame.js\");\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString\n} = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\n\nconst {\n  isSubjectReference: _isSubjectReference,\n} = __webpack_require__(/*! ./graphTypes */ \"./node_modules/jsonld/lib/graphTypes.js\");\n\nconst {\n  getInitialContext: _getInitialContext,\n  process: _processContext,\n  getAllContexts: _getAllContexts\n} = __webpack_require__(/*! ./context */ \"./node_modules/jsonld/lib/context.js\");\n\nconst {\n  compact: _compact,\n  compactIri: _compactIri,\n  removePreserve: _removePreserve\n} = __webpack_require__(/*! ./compact */ \"./node_modules/jsonld/lib/compact.js\");\n\nconst {\n  createNodeMap: _createNodeMap,\n  createMergedNodeMap: _createMergedNodeMap,\n  mergeNodeMaps: _mergeNodeMaps\n} = __webpack_require__(/*! ./nodeMap */ \"./node_modules/jsonld/lib/nodeMap.js\");\n\n// determine if in-browser or using node.js\nconst _nodejs = (\n  typeof process !== 'undefined' && process.versions && process.versions.node);\nconst _browser = !_nodejs &&\n  (typeof window !== 'undefined' || typeof self !== 'undefined');\n\n/* eslint-disable indent */\n// attaches jsonld API to the given object\nconst wrapper = function(jsonld) {\n\n/** Registered RDF dataset parsers hashed by content-type. */\nconst _rdfParsers = {};\n\n/* Core API */\n\n/**\n * Performs JSON-LD compaction.\n *\n * @param input the JSON-LD input to compact.\n * @param ctx the context to compact with.\n * @param [options] options to use:\n *          [base] the base IRI to use.\n *          [compactArrays] true to compact arrays to single values when\n *            appropriate, false not to (default: true).\n *          [compactToRelative] true to compact IRIs to be relative to document\n *            base, false to keep absolute (default: true)\n *          [graph] true to always output a top-level graph (default: false).\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n *          [expansionMap(info)] a function that can be used to custom map\n *            unmappable values (or to throw an error when they are detected);\n *            if this function returns `undefined` then the default behavior\n *            will be used.\n *          [framing] true if compaction is occuring during a framing operation.\n *          [compactionMap(info)] a function that can be used to custom map\n *            unmappable values (or to throw an error when they are detected);\n *            if this function returns `undefined` then the default behavior\n *            will be used.\n * @param [callback(err, compacted)] called once the operation completes.\n *\n * @return a Promise that resolves to the compacted output.\n */\njsonld.compact = util.callbackify(async function(input, ctx, options) {\n  if(arguments.length < 2) {\n    throw new TypeError('Could not compact, too few arguments.');\n  }\n\n  if(ctx === null) {\n    throw new JsonLdError(\n      'The compaction context must not be null.',\n      'jsonld.CompactError', {code: 'invalid local context'});\n  }\n\n  // nothing to compact\n  if(input === null) {\n    return null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    compactArrays: true,\n    compactToRelative: true,\n    graph: false,\n    skipExpansion: false,\n    link: false,\n    issuer: new IdentifierIssuer('_:b')\n  });\n  if(options.link) {\n    // force skip expansion when linking, \"link\" is not part of the public\n    // API, it should only be called from framing\n    options.skipExpansion = true;\n  }\n  if(!options.compactToRelative) {\n    delete options.base;\n  }\n\n  // expand input\n  let expanded;\n  if(options.skipExpansion) {\n    expanded = input;\n  } else {\n    expanded = await jsonld.expand(input, options);\n  }\n\n  // process context\n  const activeCtx = await jsonld.processContext(\n    _getInitialContext(options), ctx, options);\n\n  // do compaction\n  let compacted = _compact({\n    activeCtx,\n    element: expanded,\n    options,\n    compactionMap: options.compactionMap\n  });\n\n  // perform clean up\n  if(options.compactArrays && !options.graph && _isArray(compacted)) {\n    if(compacted.length === 1) {\n      // simplify to a single item\n      compacted = compacted[0];\n    } else if(compacted.length === 0) {\n      // simplify to an empty object\n      compacted = {};\n    }\n  } else if(options.graph && _isObject(compacted)) {\n    // always use array if graph option is on\n    compacted = [compacted];\n  }\n\n  // follow @context key\n  if(_isObject(ctx) && '@context' in ctx) {\n    ctx = ctx['@context'];\n  }\n\n  // build output context\n  ctx = util.clone(ctx);\n  if(!_isArray(ctx)) {\n    ctx = [ctx];\n  }\n  // remove empty contexts\n  const tmp = ctx;\n  ctx = [];\n  for(let i = 0; i < tmp.length; ++i) {\n    if(!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {\n      ctx.push(tmp[i]);\n    }\n  }\n\n  // remove array if only one context\n  const hasContext = (ctx.length > 0);\n  if(ctx.length === 1) {\n    ctx = ctx[0];\n  }\n\n  // add context and/or @graph\n  if(_isArray(compacted)) {\n    // use '@graph' keyword\n    const graphAlias = _compactIri({\n      activeCtx, iri: '@graph', relativeTo: {vocab: true}\n    });\n    const graph = compacted;\n    compacted = {};\n    if(hasContext) {\n      compacted['@context'] = ctx;\n    }\n    compacted[graphAlias] = graph;\n  } else if(_isObject(compacted) && hasContext) {\n    // reorder keys so @context is first\n    const graph = compacted;\n    compacted = {'@context': ctx};\n    for(const key in graph) {\n      compacted[key] = graph[key];\n    }\n  }\n\n  if(options.framing) {\n    // get graph alias\n    const graph = _compactIri({\n      activeCtx, iri: '@graph', relativeTo: {vocab: true}\n    });\n    // remove @preserve from results\n    options.link = {};\n    compacted[graph] = _removePreserve(activeCtx, compacted[graph], options);\n  }\n\n  return compacted;\n});\n\n/**\n * Performs JSON-LD expansion.\n *\n * @param input the JSON-LD input to expand.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [keepFreeFloatingNodes] true to keep free-floating nodes,\n *            false not to, defaults to false.\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n *          [expansionMap(info)] a function that can be used to custom map\n *            unmappable values (or to throw an error when they are detected);\n *            if this function returns `undefined` then the default behavior\n *            will be used.\n * @param [callback(err, expanded)] called once the operation completes.\n *\n * @return a Promise that resolves to the expanded output.\n */\njsonld.expand = util.callbackify(async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not expand, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    keepFreeFloatingNodes: false\n  });\n  if(options.expansionMap === false) {\n    options.expansionMap = undefined;\n  }\n\n  // build set of objects that may have @contexts to resolve\n  const toResolve = {};\n\n  // build set of contexts to process prior to expansion\n  const contextsToProcess = [];\n\n  // if an `expandContext` has been given ensure it gets resolved\n  if('expandContext' in options) {\n    const expandContext = util.clone(options.expandContext);\n    if(_isObject(expandContext) && '@context' in expandContext) {\n      toResolve.expandContext = expandContext;\n    } else {\n      toResolve.expandContext = {'@context': expandContext};\n    }\n    contextsToProcess.push(toResolve.expandContext);\n  }\n\n  // if input is a string, attempt to dereference remote document\n  let defaultBase;\n  if(!_isString(input)) {\n    // input is not a URL, do not need to retrieve it first\n    toResolve.input = util.clone(input);\n  } else {\n    // load remote doc\n    const remoteDoc = await jsonld.get(input, options);\n    defaultBase = remoteDoc.documentUrl;\n    toResolve.input = remoteDoc.document;\n    if(remoteDoc.contextUrl) {\n      // context included in HTTP link header and must be resolved\n      toResolve.remoteContext = {'@context': remoteDoc.contextUrl};\n      contextsToProcess.push(toResolve.remoteContext);\n    }\n  }\n\n  // set default base\n  if(!('base' in options)) {\n    options.base = defaultBase || '';\n  }\n\n  // get all contexts in `toResolve`\n  await _getAllContexts(toResolve, options);\n\n  // process any additional contexts\n  let activeCtx = _getInitialContext(options);\n  contextsToProcess.forEach(localCtx => {\n    activeCtx = _processContext({activeCtx, localCtx, options});\n  });\n\n  // expand resolved input\n  let expanded = _expand({\n    activeCtx,\n    element: toResolve.input,\n    options,\n    expansionMap: options.expansionMap\n  });\n\n  // optimize away @graph with no other properties\n  if(_isObject(expanded) && ('@graph' in expanded) &&\n    Object.keys(expanded).length === 1) {\n    expanded = expanded['@graph'];\n  } else if(expanded === null) {\n    expanded = [];\n  }\n\n  // normalize to an array\n  if(!_isArray(expanded)) {\n    expanded = [expanded];\n  }\n\n  return expanded;\n});\n\n/**\n * Performs JSON-LD flattening.\n *\n * @param input the JSON-LD to flatten.\n * @param ctx the context to use to compact the flattened output, or null.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n * @param [callback(err, flattened)] called once the operation completes.\n *\n * @return a Promise that resolves to the flattened output.\n */\njsonld.flatten = util.callbackify(async function(input, ctx, options) {\n  if(arguments.length < 1) {\n    return new TypeError('Could not flatten, too few arguments.');\n  }\n\n  if(typeof ctx === 'function') {\n    ctx = null;\n  } else {\n    ctx = ctx || null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : ''\n  });\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  // do flattening\n  const flattened = _flatten(expanded);\n\n  if(ctx === null) {\n    // no compaction required\n    return flattened;\n  }\n\n  // compact result (force @graph option to true, skip expansion)\n  options.graph = true;\n  options.skipExpansion = true;\n  const compacted = await jsonld.compact(flattened, ctx, options);\n\n  return compacted;\n});\n\n/**\n * Performs JSON-LD framing.\n *\n * @param input the JSON-LD input to frame.\n * @param frame the JSON-LD frame to use.\n * @param [options] the framing options.\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [embed] default @embed flag: '@last', '@always', '@never', '@link'\n *            (default: '@last').\n *          [explicit] default @explicit flag (default: false).\n *          [requireAll] default @requireAll flag (default: true).\n *          [omitDefault] default @omitDefault flag (default: false).\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n * @param [callback(err, framed)] called once the operation completes.\n *\n * @return a Promise that resolves to the framed output.\n */\njsonld.frame = util.callbackify(async function(input, frame, options) {\n  if(arguments.length < 2) {\n    throw new TypeError('Could not frame, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    embed: '@last',\n    explicit: false,\n    requireAll: true,\n    omitDefault: false,\n    pruneBlankNodeIdentifiers: true,\n    bnodesToClear: []\n  });\n\n  // if frame is a string, attempt to dereference remote document\n  if(_isString(frame)) {\n    // load remote doc\n    const remoteDoc = await jsonld.get(frame, options);\n    frame = remoteDoc.document;\n\n    if(remoteDoc.contextUrl) {\n      // inject link header @context into frame\n      let ctx = frame['@context'];\n      if(!ctx) {\n        ctx = remoteDoc.contextUrl;\n      } else if(_isArray(ctx)) {\n        ctx.push(remoteDoc.contextUrl);\n      } else {\n        ctx = [ctx, remoteDoc.contextUrl];\n      }\n      frame['@context'] = ctx;\n    }\n  }\n\n  const frameContext = frame ? frame['@context'] || {} : {};\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  // expand frame\n  const opts = util.clone(options);\n  opts.isFrame = true;\n  opts.keepFreeFloatingNodes = true;\n  const expandedFrame = await jsonld.expand(frame, opts);\n\n  // if the unexpanded frame includes a key expanding to @graph, frame the\n  // default graph, otherwise, the merged graph\n  // FIXME should look for aliases of @graph\n  opts.merged = !('@graph' in frame);\n  // do framing\n  const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);\n\n  // compact result (force @graph option to true, skip expansion,\n  // check for linked embeds)\n  opts.graph = true;\n  opts.skipExpansion = true;\n  opts.link = {};\n  opts.framing = true;\n  const compacted = await jsonld.compact(framed, frameContext, opts);\n\n  return compacted;\n});\n\n/**\n * **Experimental**\n *\n * Links a JSON-LD document's nodes in memory.\n *\n * @param input the JSON-LD document to link.\n * @param [ctx] the JSON-LD context to apply.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n * @param [callback(err, linked)] called once the operation completes.\n *\n * @return a Promise that resolves to the linked output.\n */\njsonld.link = util.callbackify(async function(input, ctx, options) {\n  // API matches running frame with a wildcard frame and embed: '@link'\n  // get arguments\n  const frame = {};\n  if(ctx) {\n    frame['@context'] = ctx;\n  }\n  frame['@embed'] = '@link';\n  return jsonld.frame(input, frame, options);\n});\n\n/**\n * Performs RDF dataset normalization on the given input. The input is JSON-LD\n * unless the 'inputFormat' option is used. The output is an RDF dataset\n * unless the 'format' option is used.\n *\n * @param input the input to normalize as JSON-LD or as a format specified by\n *          the 'inputFormat' option.\n * @param [options] the options to use:\n *          [algorithm] the normalization algorithm to use, `URDNA2015` or\n *            `URGNA2012` (default: `URDNA2015`).\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [inputFormat] the format if input is not JSON-LD:\n *            'application/n-quads' for N-Quads.\n *          [format] the format if output is a string:\n *            'application/n-quads' for N-Quads.\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n *          [useNative] true to use a native canonize algorithm\n * @param [callback(err, normalized)] called once the operation completes.\n *\n * @return a Promise that resolves to the normalized output.\n */\njsonld.normalize = jsonld.canonize = util.callbackify(async function(\n  input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not canonize, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    algorithm: 'URDNA2015',\n    skipExpansion: false\n  });\n  if('inputFormat' in options) {\n    if(options.inputFormat !== 'application/n-quads' &&\n      options.inputFormat !== 'application/nquads') {\n      throw new JsonLdError(\n        'Unknown canonicalization input format.',\n        'jsonld.CanonizeError');\n    }\n    // TODO: `await` for async parsers\n    const parsedInput = NQuads.parse(input);\n\n    // do canonicalization\n    return canonize.canonize(parsedInput, options);\n  }\n\n  // convert to RDF dataset then do normalization\n  const opts = util.clone(options);\n  delete opts.format;\n  opts.produceGeneralizedRdf = false;\n  const dataset = await jsonld.toRDF(input, opts);\n\n  // do canonicalization\n  return canonize.canonize(dataset, options);\n});\n\n/**\n * Converts an RDF dataset to JSON-LD.\n *\n * @param dataset a serialized string of RDF in a format specified by the\n *          format option or an RDF dataset to convert.\n * @param [options] the options to use:\n *          [format] the format if dataset param must first be parsed:\n *            'application/n-quads' for N-Quads (default).\n *          [rdfParser] a custom RDF-parser to use to parse the dataset.\n *          [useRdfType] true to use rdf:type, false to use @type\n *            (default: false).\n *          [useNativeTypes] true to convert XSD types into native types\n *            (boolean, integer, double), false not to (default: false).\n * @param [callback(err, output)] called once the operation completes.\n *\n * @return a Promise that resolves to the JSON-LD document.\n */\njsonld.fromRDF = util.callbackify(async function(dataset, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not convert from RDF, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    format: _isString(dataset) ? 'application/n-quads' : undefined\n  });\n\n  const {format} = options;\n  let {rdfParser} = options;\n\n  // handle special format\n  if(format) {\n    // check supported formats\n    rdfParser = rdfParser || _rdfParsers[format];\n    if(!rdfParser) {\n      throw new JsonLdError(\n        'Unknown input format.',\n        'jsonld.UnknownFormat', {format});\n    }\n  } else {\n    // no-op parser, assume dataset already parsed\n    rdfParser = () => dataset;\n  }\n\n  // TODO: call `normalizeAsyncFn` on parser fn\n\n  // rdfParser can be callback, promise-based, or synchronous\n  let parsedDataset;\n  if(rdfParser.length > 1) {\n    // convert callback-based rdf parser to promise-based\n    parsedDataset = new Promise((resolve, reject) => {\n      rdfParser(dataset, (err, dataset) => {\n        if(err) {\n          reject(err);\n        } else {\n          resolve(dataset);\n        }\n      });\n    });\n  } else {\n    parsedDataset = Promise.resolve(rdfParser(dataset));\n  }\n\n  parsedDataset = await parsedDataset;\n\n  // back-compat with old parsers that produced legacy dataset format\n  if(!Array.isArray(parsedDataset)) {\n    parsedDataset = NQuads.legacyDatasetToQuads(parsedDataset);\n  }\n\n  return _fromRDF(parsedDataset, options);\n});\n\n/**\n * Outputs the RDF dataset found in the given JSON-LD object.\n *\n * @param input the JSON-LD input.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [format] the format to use to output a string:\n *            'application/n-quads' for N-Quads.\n *          [produceGeneralizedRdf] true to output generalized RDF, false\n *            to produce only standard RDF (default: false).\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n * @param [callback(err, dataset)] called once the operation completes.\n *\n * @return a Promise that resolves to the RDF dataset.\n */\njsonld.toRDF = util.callbackify(async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not convert to RDF, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    skipExpansion: false\n  });\n\n  // TODO: support toRDF custom map?\n  let expanded;\n  if(options.skipExpansion) {\n    expanded = input;\n  } else {\n    // expand input\n    expanded = await jsonld.expand(input, options);\n  }\n\n  // output RDF dataset\n  const dataset = _toRDF(expanded, options);\n  if(options.format) {\n    if(options.format === 'application/n-quads' ||\n      options.format === 'application/nquads') {\n      return await NQuads.serialize(dataset);\n    }\n    throw new JsonLdError(\n      'Unknown output format.',\n      'jsonld.UnknownFormat', {format: options.format});\n  }\n\n  return dataset;\n});\n\n/**\n * **Experimental**\n *\n * Recursively flattens the nodes in the given JSON-LD input into a merged\n * map of node ID => node. All graphs will be merged into the default graph.\n *\n * @param input the JSON-LD input.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n * @param [callback(err, nodeMap)] called once the operation completes.\n *\n * @return a Promise that resolves to the merged node map.\n */\njsonld.createNodeMap = util.callbackify(async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not create node map, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : ''\n  });\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  return _createMergedNodeMap(expanded, options);\n});\n\n/**\n * **Experimental**\n *\n * Merges two or more JSON-LD documents into a single flattened document.\n *\n * @param docs the JSON-LD documents to merge together.\n * @param ctx the context to use to compact the merged result, or null.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n *          [mergeNodes] true to merge properties for nodes with the same ID,\n *            false to ignore new properties for nodes with the same ID once\n *            the ID has been defined; note that this may not prevent merging\n *            new properties where a node is in the `object` position\n *            (default: true).\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n * @param [callback(err, merged)] called once the operation completes.\n *\n * @return a Promise that resolves to the merged output.\n */\njsonld.merge = util.callbackify(async function(docs, ctx, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not merge, too few arguments.');\n  }\n  if(!_isArray(docs)) {\n    throw new TypeError('Could not merge, \"docs\" must be an array.');\n  }\n\n  if(typeof ctx === 'function') {\n    ctx = null;\n  } else {\n    ctx = ctx || null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {});\n\n  // expand all documents\n  const expanded = await Promise.all(docs.map(doc => {\n    const opts = Object.assign({}, options);\n    return jsonld.expand(doc, opts);\n  }));\n\n  let mergeNodes = true;\n  if('mergeNodes' in options) {\n    mergeNodes = options.mergeNodes;\n  }\n\n  const issuer = options.issuer || new IdentifierIssuer('_:b');\n  const graphs = {'@default': {}};\n\n  for(let i = 0; i < expanded.length; ++i) {\n    // uniquely relabel blank nodes\n    const doc = util.relabelBlankNodes(expanded[i], {\n      issuer: new IdentifierIssuer('_:b' + i + '-')\n    });\n\n    // add nodes to the shared node map graphs if merging nodes, to a\n    // separate graph set if not\n    const _graphs = (mergeNodes || i === 0) ? graphs : {'@default': {}};\n    _createNodeMap(doc, _graphs, '@default', issuer);\n\n    if(_graphs !== graphs) {\n      // merge document graphs but don't merge existing nodes\n      for(const graphName in _graphs) {\n        const _nodeMap = _graphs[graphName];\n        if(!(graphName in graphs)) {\n          graphs[graphName] = _nodeMap;\n          continue;\n        }\n        const nodeMap = graphs[graphName];\n        for(const key in _nodeMap) {\n          if(!(key in nodeMap)) {\n            nodeMap[key] = _nodeMap[key];\n          }\n        }\n      }\n    }\n  }\n\n  // add all non-default graphs to default graph\n  const defaultGraph = _mergeNodeMaps(graphs);\n\n  // produce flattened output\n  const flattened = [];\n  const keys = Object.keys(defaultGraph).sort();\n  for(let ki = 0; ki < keys.length; ++ki) {\n    const node = defaultGraph[keys[ki]];\n    // only add full subjects to top-level\n    if(!_isSubjectReference(node)) {\n      flattened.push(node);\n    }\n  }\n\n  if(ctx === null) {\n    return flattened;\n  }\n\n  // compact result (force @graph option to true, skip expansion)\n  options.graph = true;\n  options.skipExpansion = true;\n  const compacted = await jsonld.compact(flattened, ctx, options);\n\n  return compacted;\n});\n\n/**\n * The default document loader for external documents. If the environment\n * is node.js, a callback-continuation-style document loader is used; otherwise,\n * a promises-style document loader is used.\n *\n * @param url the URL to load.\n * @param callback(err, remoteDoc) called once the operation completes,\n *          if using a non-promises API.\n *\n * @return a promise, if using a promises API.\n */\nObject.defineProperty(jsonld, 'documentLoader', {\n  get: () => jsonld._documentLoader,\n  set: v => jsonld._documentLoader = util.normalizeDocumentLoader(v)\n});\n// default document loader not implemented\njsonld.documentLoader = async url => {\n  throw new JsonLdError(\n    'Could not retrieve a JSON-LD document from the URL. URL ' +\n    'dereferencing not implemented.', 'jsonld.LoadDocumentError',\n    {code: 'loading document failed', url});\n};\n\n/**\n * Deprecated default document loader. Do not use or override.\n */\njsonld.loadDocument = util.callbackify(async function() {\n  return jsonld.documentLoader.apply(null, arguments);\n});\n\n/**\n * Gets a remote JSON-LD document using the default document loader or\n * one given in the passed options.\n *\n * @param url the URL to fetch.\n * @param [options] the options to use:\n *          [documentLoader] the document loader to use.\n * @param [callback(err, remoteDoc)] called once the operation completes.\n *\n * @return a Promise that resolves to the retrieved remote document.\n */\njsonld.get = util.callbackify(async function(url, options) {\n  let load;\n  if(typeof options.documentLoader === 'function') {\n    load = util.normalizeDocumentLoader(options.documentLoader);\n  } else {\n    load = jsonld.documentLoader;\n  }\n\n  const remoteDoc = await load(url);\n\n  // TODO: can this be moved into `normalizeDocumentLoader`?\n  try {\n    if(!remoteDoc.document) {\n      throw new JsonLdError(\n        'No remote document found at the given URL.',\n        'jsonld.NullRemoteDocument');\n    }\n    if(_isString(remoteDoc.document)) {\n      remoteDoc.document = JSON.parse(remoteDoc.document);\n    }\n  } catch(e) {\n    throw new JsonLdError(\n      'Could not retrieve a JSON-LD document from the URL.',\n      'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        cause: e,\n        remoteDoc\n      });\n  }\n\n  return remoteDoc;\n});\n\n/**\n * Processes a local context, resolving any URLs as necessary, and returns a\n * new active context in its callback.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param [options] the options to use:\n *          [documentLoader(url, callback(err, remoteDoc))] the document loader.\n * @param [callback(err, activeCtx)] called once the operation completes.\n *\n * @return a Promise that resolves to the new active context.\n */\njsonld.processContext = util.callbackify(async function(\n  activeCtx, localCtx, options) {\n  // set default options\n  options = _setDefaults(options, {\n    base: ''\n  });\n\n  // return initial context early for null context\n  if(localCtx === null) {\n    return _getInitialContext(options);\n  }\n\n  // get URLs in localCtx\n  localCtx = util.clone(localCtx);\n  if(!(_isObject(localCtx) && '@context' in localCtx)) {\n    localCtx = {'@context': localCtx};\n  }\n  const ctx = await _getAllContexts(localCtx, options);\n\n  return _processContext({activeCtx, localCtx: ctx, options});\n});\n\n// backwards compatibility\njsonld.getContextValue = __webpack_require__(/*! ./context */ \"./node_modules/jsonld/lib/context.js\").getContextValue;\n\n/**\n * Document loaders.\n */\njsonld.documentLoaders = {};\njsonld.documentLoaders.node = __webpack_require__(/*! ./documentLoaders/node */ \"./node_modules/jsonld/lib/documentLoaders/node.js\");\njsonld.documentLoaders.xhr = __webpack_require__(/*! ./documentLoaders/xhr */ \"./node_modules/jsonld/lib/documentLoaders/xhr.js\");\n\n/**\n * Assigns the default document loader for external document URLs to a built-in\n * default. Supported types currently include: 'xhr' and 'node'.\n *\n * @param type the type to set.\n * @param [params] the parameters required to use the document loader.\n */\njsonld.useDocumentLoader = function(type) {\n  if(!(type in jsonld.documentLoaders)) {\n    throw new JsonLdError(\n      'Unknown document loader type: \"' + type + '\"',\n      'jsonld.UnknownDocumentLoader',\n      {type});\n  }\n\n  // set document loader\n  jsonld.documentLoader = jsonld.documentLoaders[type].apply(\n    jsonld, Array.prototype.slice.call(arguments, 1));\n};\n\n/**\n * Registers an RDF dataset parser by content-type, for use with\n * jsonld.fromRDF. An RDF dataset parser will always be given two parameters,\n * a string of input and a callback. An RDF dataset parser can be synchronous\n * or asynchronous.\n *\n * If the parser function returns undefined or null then it will be assumed to\n * be asynchronous w/a continuation-passing style and the callback parameter\n * given to the parser MUST be invoked.\n *\n * If it returns a Promise, then it will be assumed to be asynchronous, but the\n * callback parameter MUST NOT be invoked. It should instead be ignored.\n *\n * If it returns an RDF dataset, it will be assumed to be synchronous and the\n * callback parameter MUST NOT be invoked. It should instead be ignored.\n *\n * @param contentType the content-type for the parser.\n * @param parser(input, callback(err, dataset)) the parser function (takes a\n *          string as a parameter and either returns null/undefined and uses\n *          the given callback, returns a Promise, or returns an RDF dataset).\n */\njsonld.registerRDFParser = function(contentType, parser) {\n  _rdfParsers[contentType] = parser;\n};\n\n/**\n * Unregisters an RDF dataset parser by content-type.\n *\n * @param contentType the content-type for the parser.\n */\njsonld.unregisterRDFParser = function(contentType) {\n  delete _rdfParsers[contentType];\n};\n\n// register the N-Quads RDF parser\njsonld.registerRDFParser('application/n-quads', NQuads.parse);\njsonld.registerRDFParser('application/nquads', NQuads.parse);\n\n// register the RDFa API RDF parser\njsonld.registerRDFParser('rdfa-api', Rdfa.parse);\n\n/* URL API */\njsonld.url = __webpack_require__(/*! ./url */ \"./node_modules/jsonld/lib/url.js\");\n\n/* Utility API */\njsonld.util = util;\n// backwards compatibility\nObject.assign(jsonld, util);\n\n// reexpose API as jsonld.promises for backwards compatability\njsonld.promises = jsonld;\n\n// backwards compatibility\njsonld.RequestQueue = __webpack_require__(/*! ./RequestQueue */ \"./node_modules/jsonld/lib/RequestQueue.js\");\n\n/* WebIDL API */\njsonld.JsonLdProcessor = __webpack_require__(/*! ./JsonLdProcessor */ \"./node_modules/jsonld/lib/JsonLdProcessor.js\")(jsonld);\n\n// setup browser global JsonLdProcessor\nif(_browser && typeof global.JsonLdProcessor === 'undefined') {\n  Object.defineProperty(global, 'JsonLdProcessor', {\n    writable: true,\n    enumerable: false,\n    configurable: true,\n    value: jsonld.JsonLdProcessor\n  });\n}\n\n// set platform-specific defaults/APIs\nif(_nodejs) {\n  // use node document loader by default\n  jsonld.useDocumentLoader('node');\n} else if(typeof XMLHttpRequest !== 'undefined') {\n  // use xhr document loader by default\n  jsonld.useDocumentLoader('xhr');\n}\n\nfunction _setDefaults(options, {\n  documentLoader = jsonld.documentLoader,\n  ...defaults\n}) {\n  return Object.assign({}, {documentLoader}, defaults, options);\n}\n\n// end of jsonld API `wrapper` factory\nreturn jsonld;\n};\n\n// external APIs:\n\n// used to generate a new jsonld API instance\nconst factory = function() {\n  return wrapper(function() {\n    return factory();\n  });\n};\n\n// wrap the main jsonld API instance\nwrapper(factory);\n// export API\nmodule.exports = factory;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/jsonld.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/nodeMap.js":
/*!********************************************!*\
  !*** ./node_modules/jsonld/lib/nodeMap.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst {isKeyword} = __webpack_require__(/*! ./context */ \"./node_modules/jsonld/lib/context.js\");\nconst graphTypes = __webpack_require__(/*! ./graphTypes */ \"./node_modules/jsonld/lib/graphTypes.js\");\nconst types = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\nconst JsonLdError = __webpack_require__(/*! ./JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Creates a merged JSON-LD node map (node ID => node).\n *\n * @param input the expanded JSON-LD to create a node map of.\n * @param [options] the options to use:\n *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n *\n * @return the node map.\n */\napi.createMergedNodeMap = (input, options) => {\n  options = options || {};\n\n  // produce a map of all subjects and name each bnode\n  const issuer = options.issuer || new util.IdentifierIssuer('_:b');\n  const graphs = {'@default': {}};\n  api.createNodeMap(input, graphs, '@default', issuer);\n\n  // add all non-default graphs to default graph\n  return api.mergeNodeMaps(graphs);\n};\n\n/**\n * Recursively flattens the subjects in the given JSON-LD expanded input\n * into a node map.\n *\n * @param input the JSON-LD expanded input.\n * @param graphs a map of graph name to subject map.\n * @param graph the name of the current graph.\n * @param issuer the blank node identifier issuer.\n * @param name the name assigned to the current input if it is a bnode.\n * @param list the list to append to, null for none.\n */\napi.createNodeMap = (input, graphs, graph, issuer, name, list) => {\n  // recurse through array\n  if(types.isArray(input)) {\n    for(const node of input) {\n      api.createNodeMap(node, graphs, graph, issuer, undefined, list);\n    }\n    return;\n  }\n\n  // add non-object to list\n  if(!types.isObject(input)) {\n    if(list) {\n      list.push(input);\n    }\n    return;\n  }\n\n  // add values to list\n  if(graphTypes.isValue(input)) {\n    if('@type' in input) {\n      let type = input['@type'];\n      // rename @type blank node\n      if(type.indexOf('_:') === 0) {\n        input['@type'] = type = issuer.getId(type);\n      }\n    }\n    if(list) {\n      list.push(input);\n    }\n    return;\n  } else if(list && graphTypes.isList(input)) {\n    const _list = [];\n    api.createNodeMap(input['@list'], graphs, graph, issuer, name, _list);\n    list.push({'@list': _list});\n    return;\n  }\n\n  // Note: At this point, input must be a subject.\n\n  // spec requires @type to be named first, so assign names early\n  if('@type' in input) {\n    const types = input['@type'];\n    for(const type of types) {\n      if(type.indexOf('_:') === 0) {\n        issuer.getId(type);\n      }\n    }\n  }\n\n  // get name for subject\n  if(types.isUndefined(name)) {\n    name = graphTypes.isBlankNode(input) ?\n      issuer.getId(input['@id']) : input['@id'];\n  }\n\n  // add subject reference to list\n  if(list) {\n    list.push({'@id': name});\n  }\n\n  // create new subject or merge into existing one\n  const subjects = graphs[graph];\n  const subject = subjects[name] = subjects[name] || {};\n  subject['@id'] = name;\n  const properties = Object.keys(input).sort();\n  for(let property of properties) {\n    // skip @id\n    if(property === '@id') {\n      continue;\n    }\n\n    // handle reverse properties\n    if(property === '@reverse') {\n      const referencedNode = {'@id': name};\n      const reverseMap = input['@reverse'];\n      for(const reverseProperty in reverseMap) {\n        const items = reverseMap[reverseProperty];\n        for(const item of items) {\n          let itemName = item['@id'];\n          if(graphTypes.isBlankNode(item)) {\n            itemName = issuer.getId(itemName);\n          }\n          api.createNodeMap(item, graphs, graph, issuer, itemName);\n          util.addValue(\n            subjects[itemName], reverseProperty, referencedNode,\n            {propertyIsArray: true, allowDuplicate: false});\n        }\n      }\n      continue;\n    }\n\n    // recurse into graph\n    if(property === '@graph') {\n      // add graph subjects map entry\n      if(!(name in graphs)) {\n        graphs[name] = {};\n      }\n      api.createNodeMap(input[property], graphs, name, issuer);\n      continue;\n    }\n\n    // copy non-@type keywords\n    if(property !== '@type' && isKeyword(property)) {\n      if(property === '@index' && property in subject &&\n        (input[property] !== subject[property] ||\n        input[property]['@id'] !== subject[property]['@id'])) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; conflicting @index property detected.',\n          'jsonld.SyntaxError',\n          {code: 'conflicting indexes', subject});\n      }\n      subject[property] = input[property];\n      continue;\n    }\n\n    // iterate over objects\n    const objects = input[property];\n\n    // if property is a bnode, assign it a new id\n    if(property.indexOf('_:') === 0) {\n      property = issuer.getId(property);\n    }\n\n    // ensure property is added for empty arrays\n    if(objects.length === 0) {\n      util.addValue(subject, property, [], {propertyIsArray: true});\n      continue;\n    }\n    for(let o of objects) {\n      if(property === '@type') {\n        // rename @type blank nodes\n        o = (o.indexOf('_:') === 0) ? issuer.getId(o) : o;\n      }\n\n      // handle embedded subject or subject reference\n      if(graphTypes.isSubject(o) || graphTypes.isSubjectReference(o)) {\n        // relabel blank node @id\n        const id = graphTypes.isBlankNode(o) ?\n          issuer.getId(o['@id']) : o['@id'];\n\n        // add reference and recurse\n        util.addValue(\n          subject, property, {'@id': id},\n          {propertyIsArray: true, allowDuplicate: false});\n        api.createNodeMap(o, graphs, graph, issuer, id);\n      } else if(graphTypes.isValue(o)) {\n        util.addValue(\n          subject, property, o,\n          {propertyIsArray: true, allowDuplicate: false});\n      } else if(graphTypes.isList(o)) {\n        // handle @list\n        const _list = [];\n        api.createNodeMap(o['@list'], graphs, graph, issuer, name, _list);\n        o = {'@list': _list};\n        util.addValue(\n          subject, property, o,\n          {propertyIsArray: true, allowDuplicate: false});\n      } else {\n        // handle @value\n        api.createNodeMap(o, graphs, graph, issuer, name);\n        util.addValue(\n          subject, property, o, {propertyIsArray: true, allowDuplicate: false});\n      }\n    }\n  }\n};\n\n/**\n * Merge separate named graphs into a single merged graph including\n * all nodes from the default graph and named graphs.\n *\n * @param graphs a map of graph name to subject map.\n *\n * @return the merged graph map.\n */\napi.mergeNodeMapGraphs = graphs => {\n  const merged = {};\n  for(const name of Object.keys(graphs).sort()) {\n    for(const id of Object.keys(graphs[name]).sort()) {\n      const node = graphs[name][id];\n      if(!(id in merged)) {\n        merged[id] = {'@id': id};\n      }\n      const mergedNode = merged[id];\n\n      for(const property of Object.keys(node).sort()) {\n        if(isKeyword(property)) {\n          // copy keywords\n          mergedNode[property] = util.clone(node[property]);\n        } else {\n          // merge objects\n          for(const value of node[property]) {\n            util.addValue(\n              mergedNode, property, util.clone(value),\n              {propertyIsArray: true, allowDuplicate: false});\n          }\n        }\n      }\n    }\n  }\n\n  return merged;\n};\n\napi.mergeNodeMaps = graphs => {\n  // add all non-default graphs to default graph\n  const defaultGraph = graphs['@default'];\n  const graphNames = Object.keys(graphs).sort();\n  for(const graphName of graphNames) {\n    if(graphName === '@default') {\n      continue;\n    }\n    const nodeMap = graphs[graphName];\n    let subject = defaultGraph[graphName];\n    if(!subject) {\n      defaultGraph[graphName] = subject = {\n        '@id': graphName,\n        '@graph': []\n      };\n    } else if(!('@graph' in subject)) {\n      subject['@graph'] = [];\n    }\n    const graph = subject['@graph'];\n    for(const id of Object.keys(nodeMap).sort()) {\n      const node = nodeMap[id];\n      // only add full subjects\n      if(!graphTypes.isSubjectReference(node)) {\n        graph.push(node);\n      }\n    }\n  }\n  return defaultGraph;\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/nodeMap.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/toRdf.js":
/*!******************************************!*\
  !*** ./node_modules/jsonld/lib/toRdf.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst {createNodeMap} = __webpack_require__(/*! ./nodeMap */ \"./node_modules/jsonld/lib/nodeMap.js\");\nconst {isKeyword} = __webpack_require__(/*! ./context */ \"./node_modules/jsonld/lib/context.js\");\nconst graphTypes = __webpack_require__(/*! ./graphTypes */ \"./node_modules/jsonld/lib/graphTypes.js\");\nconst jsonCanonicalize = __webpack_require__(/*! canonicalize */ \"./node_modules/canonicalize/lib/canonicalize.js\");\nconst types = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/jsonld/lib/util.js\");\n\nconst {\n  // RDF,\n  // RDF_LIST,\n  RDF_FIRST,\n  RDF_REST,\n  RDF_NIL,\n  RDF_TYPE,\n  // RDF_PLAIN_LITERAL,\n  // RDF_XML_LITERAL,\n  RDF_JSON_LITERAL,\n  // RDF_OBJECT,\n  RDF_LANGSTRING,\n\n  // XSD,\n  XSD_BOOLEAN,\n  XSD_DOUBLE,\n  XSD_INTEGER,\n  XSD_STRING,\n} = __webpack_require__(/*! ./constants */ \"./node_modules/jsonld/lib/constants.js\");\n\nconst {\n  isAbsolute: _isAbsoluteIri\n} = __webpack_require__(/*! ./url */ \"./node_modules/jsonld/lib/url.js\");\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Outputs an RDF dataset for the expanded JSON-LD input.\n *\n * @param input the expanded JSON-LD input.\n * @param options the RDF serialization options.\n *\n * @return the RDF dataset.\n */\napi.toRDF = (input, options) => {\n  // create node map for default graph (and any named graphs)\n  const issuer = new util.IdentifierIssuer('_:b');\n  const nodeMap = {'@default': {}};\n  createNodeMap(input, nodeMap, '@default', issuer);\n\n  const dataset = [];\n  const graphNames = Object.keys(nodeMap).sort();\n  for(const graphName of graphNames) {\n    let graphTerm;\n    if(graphName === '@default') {\n      graphTerm = {termType: 'DefaultGraph', value: ''};\n    } else if(_isAbsoluteIri(graphName)) {\n      if(graphName.startsWith('_:')) {\n        graphTerm = {termType: 'BlankNode'};\n      } else {\n        graphTerm = {termType: 'NamedNode'};\n      }\n      graphTerm.value = graphName;\n    } else {\n      // skip relative IRIs (not valid RDF)\n      continue;\n    }\n    _graphToRDF(dataset, nodeMap[graphName], graphTerm, issuer, options);\n  }\n\n  return dataset;\n};\n\n/**\n * Adds RDF quads for a particular graph to the given dataset.\n *\n * @param dataset the dataset to append RDF quads to.\n * @param graph the graph to create RDF quads for.\n * @param graphTerm the graph term for each quad.\n * @param issuer a IdentifierIssuer for assigning blank node names.\n * @param options the RDF serialization options.\n *\n * @return the array of RDF triples for the given graph.\n */\nfunction _graphToRDF(dataset, graph, graphTerm, issuer, options) {\n  const ids = Object.keys(graph).sort();\n  for(const id of ids) {\n    const node = graph[id];\n    const properties = Object.keys(node).sort();\n    for(let property of properties) {\n      const items = node[property];\n      if(property === '@type') {\n        property = RDF_TYPE;\n      } else if(isKeyword(property)) {\n        continue;\n      }\n\n      for(const item of items) {\n        // RDF subject\n        const subject = {\n          termType: id.startsWith('_:') ? 'BlankNode' : 'NamedNode',\n          value: id\n        };\n\n        // skip relative IRI subjects (not valid RDF)\n        if(!_isAbsoluteIri(id)) {\n          continue;\n        }\n\n        // RDF predicate\n        const predicate = {\n          termType: property.startsWith('_:') ? 'BlankNode' : 'NamedNode',\n          value: property\n        };\n\n        // skip relative IRI predicates (not valid RDF)\n        if(!_isAbsoluteIri(property)) {\n          continue;\n        }\n\n        // skip blank node predicates unless producing generalized RDF\n        if(predicate.termType === 'BlankNode' &&\n          !options.produceGeneralizedRdf) {\n          continue;\n        }\n\n        // convert list, value or node object to triple\n        const object = _objectToRDF(item, issuer, dataset, graphTerm);\n        // skip null objects (they are relative IRIs)\n        if(object) {\n          dataset.push({\n            subject,\n            predicate,\n            object,\n            graph: graphTerm\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * Converts a @list value into linked list of blank node RDF quads\n * (an RDF collection).\n *\n * @param list the @list value.\n * @param issuer a IdentifierIssuer for assigning blank node names.\n * @param dataset the array of quads to append to.\n * @param graphTerm the graph term for each quad.\n *\n * @return the head of the list.\n */\nfunction _listToRDF(list, issuer, dataset, graphTerm) {\n  const first = {termType: 'NamedNode', value: RDF_FIRST};\n  const rest = {termType: 'NamedNode', value: RDF_REST};\n  const nil = {termType: 'NamedNode', value: RDF_NIL};\n\n  const last = list.pop();\n  // Result is the head of the list\n  const result = last ? {termType: 'BlankNode', value: issuer.getId()} : nil;\n  let subject = result;\n\n  for(const item of list) {\n    const object = _objectToRDF(item, issuer, dataset, graphTerm);\n    const next = {termType: 'BlankNode', value: issuer.getId()};\n    dataset.push({\n      subject,\n      predicate: first,\n      object,\n      graph: graphTerm\n    });\n    dataset.push({\n      subject,\n      predicate: rest,\n      object: next,\n      graph: graphTerm\n    });\n    subject = next;\n  }\n\n  // Tail of list\n  if(last) {\n    const object = _objectToRDF(last, issuer, dataset, graphTerm);\n    dataset.push({\n      subject,\n      predicate: first,\n      object,\n      graph: graphTerm\n    });\n    dataset.push({\n      subject,\n      predicate: rest,\n      object: nil,\n      graph: graphTerm\n    });\n  }\n\n  return result;\n}\n\n/**\n * Converts a JSON-LD value object to an RDF literal or a JSON-LD string,\n * node object to an RDF resource, or adds a list.\n *\n * @param item the JSON-LD value or node object.\n * @param issuer a IdentifierIssuer for assigning blank node names.\n * @param dataset the dataset to append RDF quads to.\n * @param graphTerm the graph term for each quad.\n *\n * @return the RDF literal or RDF resource.\n */\nfunction _objectToRDF(item, issuer, dataset, graphTerm) {\n  const object = {};\n\n  // convert value object to RDF\n  if(graphTypes.isValue(item)) {\n    object.termType = 'Literal';\n    object.value = undefined;\n    object.datatype = {\n      termType: 'NamedNode'\n    };\n    let value = item['@value'];\n    const datatype = item['@type'] || null;\n\n    // convert to XSD/JSON datatypes as appropriate\n    if(datatype === '@json') {\n      object.value = jsonCanonicalize(value);\n      object.datatype.value = RDF_JSON_LITERAL;\n    } else if(types.isBoolean(value)) {\n      object.value = value.toString();\n      object.datatype.value = datatype || XSD_BOOLEAN;\n    } else if(types.isDouble(value) || datatype === XSD_DOUBLE) {\n      if(!types.isDouble(value)) {\n        value = parseFloat(value);\n      }\n      // canonical double representation\n      object.value = value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E');\n      object.datatype.value = datatype || XSD_DOUBLE;\n    } else if(types.isNumber(value)) {\n      object.value = value.toFixed(0);\n      object.datatype.value = datatype || XSD_INTEGER;\n    } else if('@language' in item) {\n      object.value = value;\n      object.datatype.value = datatype || RDF_LANGSTRING;\n      object.language = item['@language'];\n    } else {\n      object.value = value;\n      object.datatype.value = datatype || XSD_STRING;\n    }\n  } else if(graphTypes.isList(item)) {\n    const _list = _listToRDF(item['@list'], issuer, dataset, graphTerm);\n    object.termType = _list.termType;\n    object.value = _list.value;\n  } else {\n    // convert string/node object to RDF\n    const id = types.isObject(item) ? item['@id'] : item;\n    object.termType = id.startsWith('_:') ? 'BlankNode' : 'NamedNode';\n    object.value = id;\n  }\n\n  // skip relative IRIs, not valid RDF\n  if(object.termType === 'NamedNode' && !_isAbsoluteIri(object.value)) {\n    return null;\n  }\n\n  return object;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/toRdf.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/types.js":
/*!******************************************!*\
  !*** ./node_modules/jsonld/lib/types.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Returns true if the given value is an Array.\n *\n * @param v the value to check.\n *\n * @return true if the value is an Array, false if not.\n */\napi.isArray = Array.isArray;\n\n/**\n * Returns true if the given value is a Boolean.\n *\n * @param v the value to check.\n *\n * @return true if the value is a Boolean, false if not.\n */\napi.isBoolean = v => (typeof v === 'boolean' ||\n  Object.prototype.toString.call(v) === '[object Boolean]');\n\n/**\n * Returns true if the given value is a double.\n *\n * @param v the value to check.\n *\n * @return true if the value is a double, false if not.\n */\napi.isDouble = v => api.isNumber(v) && String(v).indexOf('.') !== -1;\n\n/**\n * Returns true if the given value is an empty Object.\n *\n * @param v the value to check.\n *\n * @return true if the value is an empty Object, false if not.\n */\napi.isEmptyObject = v => api.isObject(v) && Object.keys(v).length === 0;\n\n/**\n * Returns true if the given value is a Number.\n *\n * @param v the value to check.\n *\n * @return true if the value is a Number, false if not.\n */\napi.isNumber = v => (typeof v === 'number' ||\n  Object.prototype.toString.call(v) === '[object Number]');\n\n/**\n * Returns true if the given value is numeric.\n *\n * @param v the value to check.\n *\n * @return true if the value is numeric, false if not.\n */\napi.isNumeric = v => !isNaN(parseFloat(v)) && isFinite(v);\n\n/**\n * Returns true if the given value is an Object.\n *\n * @param v the value to check.\n *\n * @return true if the value is an Object, false if not.\n */\napi.isObject = v => Object.prototype.toString.call(v) === '[object Object]';\n\n/**\n * Returns true if the given value is a String.\n *\n * @param v the value to check.\n *\n * @return true if the value is a String, false if not.\n */\napi.isString = v => (typeof v === 'string' ||\n  Object.prototype.toString.call(v) === '[object String]');\n\n/**\n * Returns true if the given value is undefined.\n *\n * @param v the value to check.\n *\n * @return true if the value is undefined, false if not.\n */\napi.isUndefined = v => typeof v === 'undefined';\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/types.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/url.js":
/*!****************************************!*\
  !*** ./node_modules/jsonld/lib/url.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst types = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\n\nconst api = {};\nmodule.exports = api;\n\n// define URL parser\n// parseUri 1.2.2\n// (c) Steven Levithan <stevenlevithan.com>\n// MIT License\n// with local jsonld.js modifications\napi.parsers = {\n  simple: {\n    // RFC 3986 basic parts\n    keys: [\n      'href', 'scheme', 'authority', 'path', 'query', 'fragment'\n    ],\n    /* eslint-disable-next-line max-len */\n    regex: /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/\n  },\n  full: {\n    keys: [\n      'href', 'protocol', 'scheme', 'authority', 'auth', 'user', 'password',\n      'hostname', 'port', 'path', 'directory', 'file', 'query', 'fragment'\n    ],\n    /* eslint-disable-next-line max-len */\n    regex: /^(([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?(?:(((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/\n  }\n};\napi.parse = (str, parser) => {\n  const parsed = {};\n  const o = api.parsers[parser || 'full'];\n  const m = o.regex.exec(str);\n  let i = o.keys.length;\n  while(i--) {\n    parsed[o.keys[i]] = (m[i] === undefined) ? null : m[i];\n  }\n\n  // remove default ports in found in URLs\n  if((parsed.scheme === 'https' && parsed.port === '443') ||\n    (parsed.scheme === 'http' && parsed.port === '80')) {\n    parsed.href = parsed.href.replace(':' + parsed.port, '');\n    parsed.authority = parsed.authority.replace(':' + parsed.port, '');\n    parsed.port = null;\n  }\n\n  parsed.normalizedPath = api.removeDotSegments(parsed.path);\n  return parsed;\n};\n\n/**\n * Prepends a base IRI to the given relative IRI.\n *\n * @param base the base IRI.\n * @param iri the relative IRI.\n *\n * @return the absolute IRI.\n */\napi.prependBase = (base, iri) => {\n  // skip IRI processing\n  if(base === null) {\n    return iri;\n  }\n  // already an absolute IRI\n  if(iri.indexOf(':') !== -1) {\n    return iri;\n  }\n\n  // parse base if it is a string\n  if(types.isString(base)) {\n    base = api.parse(base || '');\n  }\n\n  // parse given IRI\n  const rel = api.parse(iri);\n\n  // per RFC3986 5.2.2\n  const transform = {\n    protocol: base.protocol || ''\n  };\n\n  if(rel.authority !== null) {\n    transform.authority = rel.authority;\n    transform.path = rel.path;\n    transform.query = rel.query;\n  } else {\n    transform.authority = base.authority;\n\n    if(rel.path === '') {\n      transform.path = base.path;\n      if(rel.query !== null) {\n        transform.query = rel.query;\n      } else {\n        transform.query = base.query;\n      }\n    } else {\n      if(rel.path.indexOf('/') === 0) {\n        // IRI represents an absolute path\n        transform.path = rel.path;\n      } else {\n        // merge paths\n        let path = base.path;\n\n        // append relative path to the end of the last directory from base\n        path = path.substr(0, path.lastIndexOf('/') + 1);\n        if(path.length > 0 && path.substr(-1) !== '/') {\n          path += '/';\n        }\n        path += rel.path;\n\n        transform.path = path;\n      }\n      transform.query = rel.query;\n    }\n  }\n\n  if(rel.path !== '') {\n    // remove slashes and dots in path\n    transform.path = api.removeDotSegments(transform.path);\n  }\n\n  // construct URL\n  let rval = transform.protocol;\n  if(transform.authority !== null) {\n    rval += '//' + transform.authority;\n  }\n  rval += transform.path;\n  if(transform.query !== null) {\n    rval += '?' + transform.query;\n  }\n  if(rel.fragment !== null) {\n    rval += '#' + rel.fragment;\n  }\n\n  // handle empty base\n  if(rval === '') {\n    rval = './';\n  }\n\n  return rval;\n};\n\n/**\n * Removes a base IRI from the given absolute IRI.\n *\n * @param base the base IRI.\n * @param iri the absolute IRI.\n *\n * @return the relative IRI if relative to base, otherwise the absolute IRI.\n */\napi.removeBase = (base, iri) => {\n  // skip IRI processing\n  if(base === null) {\n    return iri;\n  }\n\n  if(types.isString(base)) {\n    base = api.parse(base || '');\n  }\n\n  // establish base root\n  let root = '';\n  if(base.href !== '') {\n    root += (base.protocol || '') + '//' + (base.authority || '');\n  } else if(iri.indexOf('//')) {\n    // support network-path reference with empty base\n    root += '//';\n  }\n\n  // IRI not relative to base\n  if(iri.indexOf(root) !== 0) {\n    return iri;\n  }\n\n  // remove root from IRI and parse remainder\n  const rel = api.parse(iri.substr(root.length));\n\n  // remove path segments that match (do not remove last segment unless there\n  // is a hash or query)\n  const baseSegments = base.normalizedPath.split('/');\n  const iriSegments = rel.normalizedPath.split('/');\n  const last = (rel.fragment || rel.query) ? 0 : 1;\n  while(baseSegments.length > 0 && iriSegments.length > last) {\n    if(baseSegments[0] !== iriSegments[0]) {\n      break;\n    }\n    baseSegments.shift();\n    iriSegments.shift();\n  }\n\n  // use '../' for each non-matching base segment\n  let rval = '';\n  if(baseSegments.length > 0) {\n    // don't count the last segment (if it ends with '/' last path doesn't\n    // count and if it doesn't end with '/' it isn't a path)\n    baseSegments.pop();\n    for(let i = 0; i < baseSegments.length; ++i) {\n      rval += '../';\n    }\n  }\n\n  // prepend remaining segments\n  rval += iriSegments.join('/');\n\n  // add query and hash\n  if(rel.query !== null) {\n    rval += '?' + rel.query;\n  }\n  if(rel.fragment !== null) {\n    rval += '#' + rel.fragment;\n  }\n\n  // handle empty base\n  if(rval === '') {\n    rval = './';\n  }\n\n  return rval;\n};\n\n/**\n * Removes dot segments from a URL path.\n *\n * @param path the path to remove dot segments from.\n */\napi.removeDotSegments = path => {\n  // RFC 3986 5.2.4 (reworked)\n\n  // empty path shortcut\n  if(path.length === 0) {\n    return '';\n  }\n\n  const input = path.split('/');\n  const output = [];\n\n  while(input.length > 0) {\n    const next = input.shift();\n    const done = input.length === 0;\n\n    if(next === '.') {\n      if(done) {\n        // ensure output has trailing /\n        output.push('');\n      }\n      continue;\n    }\n\n    if(next === '..') {\n      output.pop();\n      if(done) {\n        // ensure output has trailing /\n        output.push('');\n      }\n      continue;\n    }\n\n    output.push(next);\n  }\n\n  // ensure output has leading /\n  if(output.length > 0 && output[0] !== '') {\n    output.unshift('');\n  }\n  if(output.length === 1 && output[0] === '') {\n    return '/';\n  }\n\n  return output.join('/');\n};\n\n// TODO: time better isAbsolute/isRelative checks using full regexes:\n// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html\n\n// regex to check for absolute IRI (starting scheme and ':') or blank node IRI\nconst isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):/;\n\n/**\n * Returns true if the given value is an absolute IRI or blank node IRI, false\n * if not.\n * Note: This weak check only checks for a correct starting scheme.\n *\n * @param v the value to check.\n *\n * @return true if the value is an absolute IRI, false if not.\n */\napi.isAbsolute = v => types.isString(v) && isAbsoluteRegex.test(v);\n\n/**\n * Returns true if the given value is a relative IRI, false if not.\n * Note: this is a weak check.\n *\n * @param v the value to check.\n *\n * @return true if the value is a relative IRI, false if not.\n */\napi.isRelative = v => types.isString(v);\n\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/url.js?");

/***/ }),

/***/ "./node_modules/jsonld/lib/util.js":
/*!*****************************************!*\
  !*** ./node_modules/jsonld/lib/util.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(setImmediate, process) {/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst graphTypes = __webpack_require__(/*! ./graphTypes */ \"./node_modules/jsonld/lib/graphTypes.js\");\nconst types = __webpack_require__(/*! ./types */ \"./node_modules/jsonld/lib/types.js\");\n// TODO: move `IdentifierIssuer` to its own package\nconst IdentifierIssuer = __webpack_require__(/*! rdf-canonize */ \"./node_modules/rdf-canonize/lib/index.js\").IdentifierIssuer;\nconst JsonLdError = __webpack_require__(/*! ./JsonLdError */ \"./node_modules/jsonld/lib/JsonLdError.js\");\n\n// constants\nconst REGEX_LINK_HEADERS = /(?:<[^>]*?>|\"[^\"]*?\"|[^,])+/g;\nconst REGEX_LINK_HEADER = /\\s*<([^>]*?)>\\s*(?:;\\s*(.*))?/;\nconst REGEX_LINK_HEADER_PARAMS =\n  /(.*?)=(?:(?:\"([^\"]*?)\")|([^\"]*?))\\s*(?:(?:;\\s*)|$)/g;\n\nconst DEFAULTS = {\n  headers: {\n    accept: 'application/ld+json, application/json'\n  }\n};\n\nconst api = {};\nmodule.exports = api;\napi.IdentifierIssuer = IdentifierIssuer;\n\n// define setImmediate and nextTick\n// // nextTick implementation with browser-compatible fallback // //\n// from https://github.com/caolan/async/blob/master/lib/async.js\n\n// capture the global reference to guard against fakeTimer mocks\nconst _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\nconst _delay = _setImmediate ?\n  // not a direct alias (for IE10 compatibility)\n  fn => _setImmediate(fn) :\n  fn => setTimeout(fn, 0);\n\nif(typeof process === 'object' && typeof process.nextTick === 'function') {\n  api.nextTick = process.nextTick;\n} else {\n  api.nextTick = _delay;\n}\napi.setImmediate = _setImmediate ? _delay : api.nextTick;\n\n/**\n * Clones an object, array, Map, Set, or string/number. If a typed JavaScript\n * object is given, such as a Date, it will be converted to a string.\n *\n * @param value the value to clone.\n *\n * @return the cloned value.\n */\napi.clone = function(value) {\n  if(value && typeof value === 'object') {\n    let rval;\n    if(types.isArray(value)) {\n      rval = [];\n      for(let i = 0; i < value.length; ++i) {\n        rval[i] = api.clone(value[i]);\n      }\n    } else if(value instanceof Map) {\n      rval = new Map();\n      for(const [k, v] of value) {\n        rval.set(k, api.clone(v));\n      }\n    } else if(value instanceof Set) {\n      rval = new Set();\n      for(const v of value) {\n        rval.add(api.clone(v));\n      }\n    } else if(types.isObject(value)) {\n      rval = {};\n      for(const key in value) {\n        rval[key] = api.clone(value[key]);\n      }\n    } else {\n      rval = value.toString();\n    }\n    return rval;\n  }\n  return value;\n};\n\n/**\n * Ensure a value is an array. If the value is an array, it is returned.\n * Otherwise, it is wrapped in an array.\n *\n * @param value the value to return as an array.\n *\n * @return the value as an array.\n */\napi.asArray = function(value) {\n  return Array.isArray(value) ? value : [value];\n};\n\n/**\n * Builds an HTTP headers object for making a JSON-LD request from custom\n * headers and asserts the `accept` header isn't overridden.\n *\n * @param headers an object of headers with keys as header names and values\n *          as header values.\n *\n * @return an object of headers with a valid `accept` header.\n */\napi.buildHeaders = (headers = {}) => {\n  const hasAccept = Object.keys(headers).some(\n    h => h.toLowerCase() === 'accept');\n\n  if(hasAccept) {\n    throw new RangeError(\n      'Accept header may not be specified; only \"' +\n      DEFAULTS.headers.accept + '\" is supported.');\n  }\n\n  return Object.assign({Accept: DEFAULTS.headers.accept}, headers);\n};\n\n/**\n * Parses a link header. The results will be key'd by the value of \"rel\".\n *\n * Link: <http://json-ld.org/contexts/person.jsonld>;\n * rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"\n *\n * Parses as: {\n *   'http://www.w3.org/ns/json-ld#context': {\n *     target: http://json-ld.org/contexts/person.jsonld,\n *     type: 'application/ld+json'\n *   }\n * }\n *\n * If there is more than one \"rel\" with the same IRI, then entries in the\n * resulting map for that \"rel\" will be arrays.\n *\n * @param header the link header to parse.\n */\napi.parseLinkHeader = header => {\n  const rval = {};\n  // split on unbracketed/unquoted commas\n  const entries = header.match(REGEX_LINK_HEADERS);\n  for(let i = 0; i < entries.length; ++i) {\n    let match = entries[i].match(REGEX_LINK_HEADER);\n    if(!match) {\n      continue;\n    }\n    const result = {target: match[1]};\n    const params = match[2];\n    while((match = REGEX_LINK_HEADER_PARAMS.exec(params))) {\n      result[match[1]] = (match[2] === undefined) ? match[3] : match[2];\n    }\n    const rel = result['rel'] || '';\n    if(Array.isArray(rval[rel])) {\n      rval[rel].push(result);\n    } else if(rval.hasOwnProperty(rel)) {\n      rval[rel] = [rval[rel], result];\n    } else {\n      rval[rel] = result;\n    }\n  }\n  return rval;\n};\n\n/**\n * Throws an exception if the given value is not a valid @type value.\n *\n * @param v the value to check.\n */\napi.validateTypeValue = v => {\n  // can be a string or an empty object\n  if(types.isString(v) || types.isEmptyObject(v)) {\n    return;\n  }\n\n  // must be an array\n  let isValid = false;\n  if(types.isArray(v)) {\n    // must contain only strings\n    isValid = true;\n    for(let i = 0; i < v.length; ++i) {\n      if(!(types.isString(v[i]))) {\n        isValid = false;\n        break;\n      }\n    }\n  }\n\n  if(!isValid) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; \"@type\" value must a string, an array of ' +\n      'strings, or an empty object.', 'jsonld.SyntaxError',\n      {code: 'invalid type value', value: v});\n  }\n};\n\n/**\n * Returns true if the given subject has the given property.\n *\n * @param subject the subject to check.\n * @param property the property to look for.\n *\n * @return true if the subject has the given property, false if not.\n */\napi.hasProperty = (subject, property) => {\n  if(subject.hasOwnProperty(property)) {\n    const value = subject[property];\n    return (!types.isArray(value) || value.length > 0);\n  }\n  return false;\n};\n\n/**\n * Determines if the given value is a property of the given subject.\n *\n * @param subject the subject to check.\n * @param property the property to check.\n * @param value the value to check.\n *\n * @return true if the value exists, false if not.\n */\napi.hasValue = (subject, property, value) => {\n  if(api.hasProperty(subject, property)) {\n    let val = subject[property];\n    const isList = graphTypes.isList(val);\n    if(types.isArray(val) || isList) {\n      if(isList) {\n        val = val['@list'];\n      }\n      for(let i = 0; i < val.length; ++i) {\n        if(api.compareValues(value, val[i])) {\n          return true;\n        }\n      }\n    } else if(!types.isArray(value)) {\n      // avoid matching the set of values with an array value parameter\n      return api.compareValues(value, val);\n    }\n  }\n  return false;\n};\n\n/**\n * Adds a value to a subject. If the value is an array, all values in the\n * array will be added.\n *\n * @param subject the subject to add the value to.\n * @param property the property that relates the value to the subject.\n * @param value the value to add.\n * @param [options] the options to use:\n *        [propertyIsArray] true if the property is always an array, false\n *          if not (default: false).\n *        [valueIsArray] true if the value to be added should be preserved as\n *          an array (lists) (default: false).\n *        [allowDuplicate] true to allow duplicates, false not to (uses a\n *          simple shallow comparison of subject ID or value) (default: true).\n */\napi.addValue = (subject, property, value, options) => {\n  options = options || {};\n  if(!('propertyIsArray' in options)) {\n    options.propertyIsArray = false;\n  }\n  if(!('valueIsArray' in options)) {\n    options.valueIsArray = false;\n  }\n  if(!('allowDuplicate' in options)) {\n    options.allowDuplicate = true;\n  }\n\n  if(options.valueIsArray) {\n    subject[property] = value;\n  } else if(types.isArray(value)) {\n    if(value.length === 0 && options.propertyIsArray &&\n      !subject.hasOwnProperty(property)) {\n      subject[property] = [];\n    }\n    for(let i = 0; i < value.length; ++i) {\n      api.addValue(subject, property, value[i], options);\n    }\n  } else if(subject.hasOwnProperty(property)) {\n    // check if subject already has value if duplicates not allowed\n    const hasValue = (!options.allowDuplicate &&\n      api.hasValue(subject, property, value));\n\n    // make property an array if value not present or always an array\n    if(!types.isArray(subject[property]) &&\n      (!hasValue || options.propertyIsArray)) {\n      subject[property] = [subject[property]];\n    }\n\n    // add new value\n    if(!hasValue) {\n      subject[property].push(value);\n    }\n  } else {\n    // add new value as set or single value\n    subject[property] = options.propertyIsArray ? [value] : value;\n  }\n};\n\n/**\n * Gets all of the values for a subject's property as an array.\n *\n * @param subject the subject.\n * @param property the property.\n *\n * @return all of the values for a subject's property as an array.\n */\napi.getValues = (subject, property) => [].concat(subject[property] || []);\n\n/**\n * Removes a property from a subject.\n *\n * @param subject the subject.\n * @param property the property.\n */\napi.removeProperty = (subject, property) => {\n  delete subject[property];\n};\n\n/**\n * Removes a value from a subject.\n *\n * @param subject the subject.\n * @param property the property that relates the value to the subject.\n * @param value the value to remove.\n * @param [options] the options to use:\n *          [propertyIsArray] true if the property is always an array, false\n *            if not (default: false).\n */\napi.removeValue = (subject, property, value, options) => {\n  options = options || {};\n  if(!('propertyIsArray' in options)) {\n    options.propertyIsArray = false;\n  }\n\n  // filter out value\n  const values = api.getValues(subject, property).filter(\n    e => !api.compareValues(e, value));\n\n  if(values.length === 0) {\n    api.removeProperty(subject, property);\n  } else if(values.length === 1 && !options.propertyIsArray) {\n    subject[property] = values[0];\n  } else {\n    subject[property] = values;\n  }\n};\n\n/**\n * Relabels all blank nodes in the given JSON-LD input.\n *\n * @param input the JSON-LD input.\n * @param [options] the options to use:\n *          [issuer] an IdentifierIssuer to use to label blank nodes.\n */\napi.relabelBlankNodes = (input, options) => {\n  options = options || {};\n  const issuer = options.issuer || new IdentifierIssuer('_:b');\n  return _labelBlankNodes(issuer, input);\n};\n\n/**\n * Compares two JSON-LD values for equality. Two JSON-LD values will be\n * considered equal if:\n *\n * 1. They are both primitives of the same type and value.\n * 2. They are both @values with the same @value, @type, @language,\n *   and @index, OR\n * 3. They both have @ids they are the same.\n *\n * @param v1 the first value.\n * @param v2 the second value.\n *\n * @return true if v1 and v2 are considered equal, false if not.\n */\napi.compareValues = (v1, v2) => {\n  // 1. equal primitives\n  if(v1 === v2) {\n    return true;\n  }\n\n  // 2. equal @values\n  if(graphTypes.isValue(v1) && graphTypes.isValue(v2) &&\n    v1['@value'] === v2['@value'] &&\n    v1['@type'] === v2['@type'] &&\n    v1['@language'] === v2['@language'] &&\n    v1['@index'] === v2['@index']) {\n    return true;\n  }\n\n  // 3. equal @ids\n  if(types.isObject(v1) &&\n    ('@id' in v1) &&\n    types.isObject(v2) &&\n    ('@id' in v2)) {\n    return v1['@id'] === v2['@id'];\n  }\n\n  return false;\n};\n\n/**\n * Compares two strings first based on length and then lexicographically.\n *\n * @param a the first string.\n * @param b the second string.\n *\n * @return -1 if a < b, 1 if a > b, 0 if a === b.\n */\napi.compareShortestLeast = (a, b) => {\n  if(a.length < b.length) {\n    return -1;\n  }\n  if(b.length < a.length) {\n    return 1;\n  }\n  if(a === b) {\n    return 0;\n  }\n  return (a < b) ? -1 : 1;\n};\n\napi.normalizeDocumentLoader = fn => {\n  if(fn.length < 2) {\n    return api.callbackify(fn);\n  }\n\n  return async function(url) {\n    const callback = arguments[1];\n    return new Promise((resolve, reject) => {\n      try {\n        fn(url, (err, remoteDoc) => {\n          if(typeof callback === 'function') {\n            return _invokeCallback(callback, err, remoteDoc);\n          } else if(err) {\n            reject(err);\n          } else {\n            resolve(remoteDoc);\n          }\n        });\n      } catch(e) {\n        if(typeof callback === 'function') {\n          return _invokeCallback(callback, e);\n        }\n        reject(e);\n      }\n    });\n  };\n};\n\napi.callbackify = fn => {\n  return async function(...args) {\n    const callback = args[args.length - 1];\n    if(typeof callback === 'function') {\n      args.pop();\n    }\n\n    let result;\n    try {\n      result = await fn.apply(null, args);\n    } catch(e) {\n      if(typeof callback === 'function') {\n        return _invokeCallback(callback, e);\n      }\n      throw e;\n    }\n\n    if(typeof callback === 'function') {\n      return _invokeCallback(callback, null, result);\n    }\n\n    return result;\n  };\n};\n\nfunction _invokeCallback(callback, err, result) {\n  // execute on next tick to prevent \"unhandled rejected promise\"\n  // and simulate what would have happened in a promiseless API\n  api.nextTick(() => callback(err, result));\n}\n\n/**\n * Labels the blank nodes in the given value using the given IdentifierIssuer.\n *\n * @param issuer the IdentifierIssuer to use.\n * @param element the element with blank nodes to rename.\n *\n * @return the element.\n */\nfunction _labelBlankNodes(issuer, element) {\n  if(types.isArray(element)) {\n    for(let i = 0; i < element.length; ++i) {\n      element[i] = _labelBlankNodes(issuer, element[i]);\n    }\n  } else if(graphTypes.isList(element)) {\n    element['@list'] = _labelBlankNodes(issuer, element['@list']);\n  } else if(types.isObject(element)) {\n    // relabel blank node\n    if(graphTypes.isBlankNode(element)) {\n      element['@id'] = issuer.getId(element['@id']);\n    }\n\n    // recursively apply to all keys\n    const keys = Object.keys(element).sort();\n    for(let ki = 0; ki < keys.length; ++ki) {\n      const key = keys[ki];\n      if(key !== '@id') {\n        element[key] = _labelBlankNodes(issuer, element[key]);\n      }\n    }\n  }\n\n  return element;\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/jsonld/lib/util.js?");

/***/ }),

/***/ "./node_modules/n3/src/IRIs.js":
/*!*************************************!*\
  !*** ./node_modules/n3/src/IRIs.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  xsd: {\n    decimal: XSD + 'decimal',\n    boolean: XSD + 'boolean',\n    double:  XSD + 'double',\n    integer: XSD + 'integer',\n    string:  XSD + 'string',\n  },\n  rdf: {\n    type:       RDF + 'type',\n    nil:        RDF + 'nil',\n    first:      RDF + 'first',\n    rest:       RDF + 'rest',\n    langString: RDF + 'langString',\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: SWAP + 'reify#forSome',\n    forAll:  SWAP + 'reify#forAll',\n  },\n  log: {\n    implies: SWAP + 'log#implies',\n  },\n});\n\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/IRIs.js?");

/***/ }),

/***/ "./node_modules/n3/src/N3DataFactory.js":
/*!**********************************************!*\
  !*** ./node_modules/n3/src/N3DataFactory.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IRIs */ \"./node_modules/n3/src/IRIs.js\");\n// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\n\nconst { rdf, xsd } = _IRIs__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\nvar DataFactory, DEFAULTGRAPH;\n\nvar _blankNodeCounter = 0;\n\n// ## Term constructor\nclass Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nclass NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nclass Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    var id = this.id, atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    var id = this.id, dtPos = id.lastIndexOf('\"') + 1, ch;\n    // If \"^\" it follows, return the remaining substring\n    return dtPos < id.length && (ch = id[dtPos]) === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (ch !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nclass BlankNode extends Term {\n  constructor(name) {\n    super('_:' + name);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nclass Variable extends Term {\n  constructor(name) {\n    super('?' + name);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nclass DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nfunction fromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '_': return factory.blankNode(id.substr(2));\n  case '?': return factory.variable(id.substr(1));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    var endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  default:  return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nfunction toId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term)\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return '_:' + term.value;\n  case 'Variable':     return '?' + term.value;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return '\"' + term.value + '\"' +\n    (term.language ? '@' + term.language :\n      (term.datatype && term.datatype.value !== xsd.string ? '^^' + term.datatype.value : ''));\n  default: throw new Error('Unexpected termType: ' + term.termType);\n  }\n}\n\n\n// ## Quad constructor\nclass Quad {\n  constructor(subject, predicate, object, graph) {\n    this.subject   = subject;\n    this.predicate = predicate;\n    this.object    = object;\n    this.graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      subject:   this.subject.toJSON(),\n      predicate: this.predicate.toJSON(),\n      object:    this.object.toJSON(),\n      graph:     this.graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this.subject.equals(other.subject)     &&\n                      this.predicate.equals(other.predicate) &&\n                      this.object.equals(other.object)       &&\n                      this.graph.equals(other.graph);\n  }\n}\n\n\n// ## DataFactory singleton\nDataFactory = {\n  // ### Public factory functions\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n\n  // ### Internal datatype constructors\n  internal: {\n    Term,\n    NamedNode,\n    BlankNode,\n    Variable,\n    Literal,\n    DefaultGraph,\n    Quad,\n    Triple: Quad,\n    fromId,\n    toId,\n  },\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (DataFactory);\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  if (!name)\n    name = 'n3-' + _blankNodeCounter++;\n  return new BlankNode(name);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal('\"' + value + '\"@' + languageOrDataType.toLowerCase());\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal('\"' + value + '\"') :\n    new Literal('\"' + value + '\"^^' + datatype);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/N3DataFactory.js?");

/***/ }),

/***/ "./node_modules/n3/src/N3Lexer.js":
/*!****************************************!*\
  !*** ./node_modules/n3/src/N3Lexer.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(setImmediate, Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return N3Lexer; });\n/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IRIs */ \"./node_modules/n3/src/IRIs.js\");\n// **N3Lexer** tokenizes N3 documents.\n\nconst { xsd } = _IRIs__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\nconst { fromCharCode } = String;\n\n// Regular expression and replacement string to escape N3 strings.\n// Note how we catch invalid unicode sequences separately (they will trigger an error).\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nvar illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nvar lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nvar invalidRegExp = /$0^/;\n\n// ## Constructor\nclass N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<]))/;\n    this._number = /^[\\-+]?(?:\\d+\\.?\\d*([eE](?:[\\-\\+])?\\d+)|\\d*\\.?\\d+)(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s()\\[\\]\\{\\}\"'<])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (var key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    var input = this._input, outputComments = this._comments;\n    while (true) {\n      // Count and skip whitespace lines\n      var whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (outputComments && (comment = this._comment.exec(input)))\n            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      var line = this._line, type = '', value = '', prefix = '',\n          firstChar = input[0], match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(input + ' ')))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(input + ' '))) {\n          type = 'literal', value = match[0];\n          prefix = (match[1] ? xsd.double :\n                    (/^[+\\-]?\\d+$/.test(match[0]) ? xsd.integer : xsd.decimal));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(input + ' ')))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      var token = { line: line, type: type, value: value, prefix: prefix };\n      callback(null, token);\n      this.previousToken = token;\n      this._previousMarker = type;\n      // Advance to next part to tokenize\n      input = input.substr(matchLength || match[0].length, input.length);\n    }\n\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    try {\n      return item.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {\n        var charCode;\n        if (unicode4) {\n          charCode = parseInt(unicode4, 16);\n          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n          return fromCharCode(charCode);\n        }\n        else if (unicode8) {\n          charCode = parseInt(unicode8, 16);\n          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance\n          if (charCode <= 0xFFFF) return fromCharCode(charCode);\n          return fromCharCode(0xD800 + ((charCode -= 0x10000) / 0x400), 0xDC00 + (charCode & 0x3FF));\n        }\n        else {\n          var replacement = escapeReplacements[escapedChar];\n          if (!replacement)\n            throw new Error();\n          return replacement;\n        }\n      });\n    }\n    catch (error) { return null; }\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    var err = new Error('Unexpected \"' + issue + '\" on line ' + this._line + '.');\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    var self = this;\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = input;\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        setImmediate(function () { self._tokenizeToEnd(callback, true); });\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        var tokens = [], error;\n        this._tokenizeToEnd(function (e, t) { e ? (error = e) : tokens.push(t); }, true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._input = '';\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', function (data) {\n        if (self._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (self._pendingBuffer) {\n            data = Buffer.concat([self._pendingBuffer, data]);\n            self._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            self._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            self._input += data;\n            self._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', function () {\n        if (self._input !== null)\n          self._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/N3Lexer.js?");

/***/ }),

/***/ "./node_modules/n3/src/N3Parser.js":
/*!*****************************************!*\
  !*** ./node_modules/n3/src/N3Parser.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return N3Parser; });\n/* harmony import */ var _N3Lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3Lexer */ \"./node_modules/n3/src/N3Lexer.js\");\n/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./N3DataFactory */ \"./node_modules/n3/src/N3DataFactory.js\");\n/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IRIs */ \"./node_modules/n3/src/IRIs.js\");\n// **N3Parser** parses N3 documents.\n\n\n\n\n// The next ID for new blank nodes\nvar blankNodePrefix = 0, blankNodeCount = 0;\n\n// ## Constructor\nclass N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    var format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = format === 'turtle', isTriG = format === 'trig',\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = function (iri) { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new _N3Lexer__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n// ### `_resetBlankNodeIds` restarts blank node identification\n  static _resetBlankNodeIds() {\n    blankNodePrefix = blankNodeCount = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_blank` creates a new blank node\n  _blank() {\n    return this._blankNode('b' + blankNodeCount++);\n  }\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      var fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    var n3Mode = this._n3Mode;\n    this._contextStack.push({\n      subject: subject, predicate: predicate, object: object,\n      graph: graph, type: type,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? this._graph.id.substr(2) + '.' : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext() {\n    var context = this._contextStack.pop(), n3Mode = this._n3Mode;\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    var value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      var iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      var prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error('Undefined prefix \"' + token.prefix + ':\"', token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error('Expected entity but got ' + token.type, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blank(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blank(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    var type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error('Unexpected ' + type, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blank());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blank());\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error('Expected graph but got ' + token.type, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    var empty = this._predicate === null;\n    this._restoreContext();\n    // If the blank node was the subject, continue reading the predicate\n    if (this._object === null)\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n    // If the blank node was the object, restore previous context and read punctuation\n    else\n      return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    var item = null,                      // The item of the list\n        list = null,                      // The list itself\n        previousList = this._subject,     // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1], // The parent containing the current list\n        next = this._readListItem;        // The next function to execute\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blank(), this.RDF_FIRST,\n                        this._subject = item = this._blank());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blank(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext();\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blank();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeLiteral(token, false);\n  }\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token, listItem) {\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      var datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      this._object = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      this._object = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    // Create a simple string literal\n    default:\n      this._object = this._literal(this._literalValue);\n    }\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext();\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    var next, subject = this._subject, graph = this._graph,\n        inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error('Expected punctuation to follow \"' + this._object.id + '\"', token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      var predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    var next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error('Expected punctuation to follow \"' + this._object.id + '\"', token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error('Expected IRI to follow prefix \"' + this._prefix + ':\"', token);\n    var prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    var iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blank();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    var entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error('Unexpected ' + token.type, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier('b' + blankNodeCount++);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blank(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blank(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      var stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        var item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext();\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    var subject, predicate, object = this._blank();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    var subject = this._blank(), predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    var contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    var err = new Error(message + ' on line ' + token.line + '.');\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return result + '/' + iri.substr(i + 1);\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    var self = this;\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : 'b' + blankNodePrefix++ + '_';\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      var quads = [], error;\n      this._callback = function (e, t) { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(function (token) {\n        return self._readCallback = self._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, function (error, token) {\n      if (error !== null)\n        self._callback(error), self._callback = noop;\n      else if (self._readCallback)\n        self._readCallback = self._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  var namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rdf.first);\n  parser.RDF_REST   = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rdf.rest);\n  parser.RDF_NIL    = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rdf.nil);\n  parser.N3_FORALL  = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].r.forAll);\n  parser.N3_FORSOME = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rdf.type),\n    '=': namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].owl.sameAs),\n    '>': namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/N3Parser.js?");

/***/ }),

/***/ "./node_modules/n3/src/N3Store.js":
/*!****************************************!*\
  !*** ./node_modules/n3/src/N3Store.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return N3Store; });\n/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3DataFactory */ \"./node_modules/n3/src/N3DataFactory.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ \"./node_modules/stream-browserify/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IRIs */ \"./node_modules/n3/src/IRIs.js\");\n// **N3Store** objects store N3 quads by graph in memory.\n\n\n\n\nconst { toId, fromId } = _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__[\"default\"].internal;\n\n// ## Constructor\nclass N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0;\n    this._ids = Object.create(null);\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null); // inverse of `_ids`\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    var size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    var graphs = this._graphs, subjects, subject;\n    for (var graphKey in graphs)\n      for (var subjectKey in (subjects = graphs[graphKey].subjects))\n        for (var predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    var index1 = index0[key0] || (index0[key0] = {});\n    var index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    var existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    var index1 = index0[key0], index2 = index1[key1], key;\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (key in index2) return;\n    delete index1[key1];\n    for (key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graph` will be the graph of the created quads.\n  // If `callback` is given, each result is passed through it\n  // and iteration halts when it returns truthy for any quad.\n  // If instead `array` is given, each result is added to the array.\n  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\n    var tmp, index1, index2, varCount = !key0 + !key1 + !key2,\n        // depending on the number of variables, keys or reverse index are faster\n        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (var value0 in index0) {\n      var entity0 = entityKeys[value0];\n\n      if (index1 = index0[value0]) {\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (var value1 in index1) {\n          var entity1 = entityKeys[value1];\n\n          if (index2 = index1[value1]) {\n            // If a key is specified, use only that part of index 2, if it exists.\n            var values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (var l = 0; l < values.length; l++) {\n              var parts = { subject: null, predicate: null, object: null };\n              parts[name0] = fromId(entity0, this._factory);\n              parts[name1] = fromId(entity1, this._factory);\n              parts[name2] = fromId(entityKeys[values[l]], this._factory);\n              var quad = this._factory.quad(\n                parts.subject, parts.predicate, parts.object, fromId(graph, this._factory));\n              if (array)\n                array.push(quad);\n              else if (callback(quad))\n                return true;\n            }\n          }\n        }\n      }\n    }\n    return array;\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (var key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    var index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    var key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    var index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    var count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (var value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (var value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    if (!isString(graph))\n      return this._graphs;\n    var graphs = {};\n    graphs[graph] = this._graphs[graph];\n    return graphs;\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    var uniqueIds = Object.create(null), entities = this._entities;\n    return function (id) {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(fromId(entities[id]));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = toId(subject);\n    predicate = toId(predicate);\n    object = toId(object);\n    graph = toId(graph);\n\n    // Find the graph that will contain the triple\n    var graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    var ids = this._ids;\n    var entities = this._entities;\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\n\n    var changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return changed;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (var i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    var self = this;\n    stream.on('data', function (quad) { self.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = toId(subject);\n    predicate = toId(predicate);\n    object = toId(object);\n    graph = toId(graph);\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    var graphItem, ids = this._ids, graphs = this._graphs, subjects, predicates;\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (var i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    var self = this;\n    stream.on('data', function (quad) { self.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    return this.remove(this.match(subject, predicate, object, graph));\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && toId(subject);\n    predicate = predicate && toId(predicate);\n    object = object && toId(object);\n    graph = graph && toId(graph);\n\n    var quads = [], graphs = this._getGraphs(graph), content,\n        ids = this._ids, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return quads;\n\n    for (var graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId, null, quads);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId, null, quads);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId, null, quads);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId, null, quads);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId, null, quads);\n      }\n    }\n    return quads;\n  }\n\n  // ### `match` returns a stream of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  match(subject, predicate, object, graph) {\n    var stream = new stream__WEBPACK_IMPORTED_MODULE_1__[\"Readable\"]({ objectMode: true });\n\n    // Initialize stream once it is being read\n    stream._read = () => {\n      for (var quad of this.getQuads(subject, predicate, object, graph))\n        stream.push(quad);\n      stream.push(null);\n    };\n\n    return stream;\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && toId(subject);\n    predicate = predicate && toId(predicate);\n    object = object && toId(object);\n    graph = graph && toId(graph);\n\n    var count = 0, graphs = this._getGraphs(graph), content,\n        ids = this._ids, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return 0;\n\n    for (var graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(function (quad) {\n      callback(quad);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    var some = false;\n    var every = !this.some(function (quad) {\n      some = true;\n      return !callback(quad);\n    }, subject, predicate, object, graph);\n    return some && every;\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && toId(subject);\n    predicate = predicate && toId(predicate);\n    object = object && toId(object);\n    graph = graph && toId(graph);\n\n    var graphs = this._getGraphs(graph), content,\n        ids = this._ids, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return false;\n\n    for (var graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId) {\n          // If subject and object are given, the object index will be the fastest\n            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                                  'object', 'subject', 'predicate', graphId, callback, null))\n              return true;\n          }\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            if (this._findInIndex(content.subjects, subjectId, predicateId, null,\n                                  'subject', 'predicate', 'object', graphId, callback, null))\n              return true;\n        }\n        else if (predicateId) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          if (this._findInIndex(content.predicates, predicateId, objectId, null,\n                                'predicate', 'object', 'subject', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else if (objectId) {\n          // If only object is given, the object index will be the fastest\n          if (this._findInIndex(content.objects, objectId, null, null,\n                                'object', 'subject', 'predicate', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else\n        // If nothing is given, iterate subjects and predicates first\n        if (this._findInIndex(content.subjects, null, null, null,\n                              'subject', 'predicate', 'object', graphId, callback, null)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    var results = [];\n    this.forSubjects(function (s) { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    // Convert terms to internal string representation\n    predicate = predicate && toId(predicate);\n    object = object && toId(object);\n    graph = graph && toId(graph);\n\n    var ids = this._ids, graphs = this._getGraphs(graph), content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    var results = [];\n    this.forPredicates(function (p) { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && toId(subject);\n    object = object && toId(object);\n    graph = graph && toId(graph);\n\n    var ids = this._ids, graphs = this._getGraphs(graph), content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject) && !(subjectId = ids[subject]) ||\n        isString(object)  && !(objectId  = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    var results = [];\n    this.forObjects(function (o) { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    // Convert terms to internal string representation\n    subject = subject && toId(subject);\n    predicate = predicate && toId(predicate);\n    graph = graph && toId(graph);\n\n    var ids = this._ids, graphs = this._getGraphs(graph), content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\n        isString(predicate) && !(predicateId = ids[predicate]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    var results = [];\n    this.forGraphs(function (g) { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (var graph in this._graphs) {\n      this.some(function (quad) {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, graph);\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    var name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = '_:' + suggestedName, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = '_:b' + this._blankNodeIndex++; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    var lists = {}; // has scalar keys so could be a simple Object\n    var onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    var tails = this.getQuads(null, _IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rdf.rest, _IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rdf.nil, null);\n    var toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      var items = [];             // the members found as objects of rdf:first quads\n      var malformed = false;      // signals whether the current list is malformed\n      var head;                   // the head of the list (_:b1 in above example)\n      var headPos;                // set to subject or object when head is set\n      var graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      var current = tailQuad.subject;\n      while (current && !malformed) {\n        var objectQuads = this.getQuads(null, null, current, null);\n        var subjectQuads = this.getQuads(current, null, null, null);\n        var i, quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === _IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === _IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === _IRIs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n}\n\n// Determines whether the argument is a string\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/N3Store.js?");

/***/ }),

/***/ "./node_modules/n3/src/N3StreamParser.js":
/*!***********************************************!*\
  !*** ./node_modules/n3/src/N3StreamParser.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return N3StreamParser; });\n/* harmony import */ var _N3Parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3Parser */ \"./node_modules/n3/src/N3Parser.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ \"./node_modules/stream-browserify/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_1__);\n// **N3StreamParser** parses a text stream into a quad stream.\n\n\n\n// ## Constructor\nclass N3StreamParser extends stream__WEBPACK_IMPORTED_MODULE_1__[\"Transform\"] {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    var self = this, parser = new _N3Parser__WEBPACK_IMPORTED_MODULE_0__[\"default\"](options), onData, onEnd;\n    parser.parse({\n      on: function (event, callback) {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      function (error, quad) { error && self.emit('error', error) || quad && self.push(quad); },\n      // Emit prefixes through the `prefix` event\n      function (prefix, uri) { self.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = function (chunk, encoding, done) { onData(chunk); done(); };\n    this._flush = function (done) { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    var self = this;\n    stream.on('data',  function (chunk) { self.write(chunk); });\n    stream.on('end',   function ()      { self.end(); });\n    stream.on('error', function (error) { self.emit('error', error); });\n    return this;\n  }\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/N3StreamParser.js?");

/***/ }),

/***/ "./node_modules/n3/src/N3StreamWriter.js":
/*!***********************************************!*\
  !*** ./node_modules/n3/src/N3StreamWriter.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return N3StreamWriter; });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"./node_modules/stream-browserify/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _N3Writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./N3Writer */ \"./node_modules/n3/src/N3Writer.js\");\n// **N3StreamWriter** serializes a quad stream into a text stream.\n\n\n\n// ## Constructor\nclass N3StreamWriter extends stream__WEBPACK_IMPORTED_MODULE_0__[\"Transform\"] {\n  constructor(options) {\n    super({ encoding: 'utf8' });\n    this._writableState.objectMode = true;\n\n    // Set up writer with a dummy stream object\n    var self = this;\n    var writer = this._writer = new _N3Writer__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n      write: function (quad, encoding, callback) { self.push(quad); callback && callback(); },\n      end: function (callback) { self.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = function (quad, encoding, done) { writer.addQuad(quad, done); };\n    this._flush = function (done) { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    var self = this;\n    stream.on('data',   function (quad)  { self.write(quad); });\n    stream.on('end',    function ()      { self.end(); });\n    stream.on('error',  function (error) { self.emit('error', error); });\n    stream.on('prefix', function (prefix, iri) { self._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/N3StreamWriter.js?");

/***/ }),

/***/ "./node_modules/n3/src/N3Util.js":
/*!***************************************!*\
  !*** ./node_modules/n3/src/N3Util.js ***!
  \***************************************/
/*! exports provided: isNamedNode, isBlankNode, isLiteral, isVariable, isDefaultGraph, inDefaultGraph, prefix, prefixes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNamedNode\", function() { return isNamedNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isBlankNode\", function() { return isBlankNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isLiteral\", function() { return isLiteral; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isVariable\", function() { return isVariable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isDefaultGraph\", function() { return isDefaultGraph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inDefaultGraph\", function() { return inDefaultGraph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"prefix\", function() { return prefix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"prefixes\", function() { return prefixes; });\n/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3DataFactory */ \"./node_modules/n3/src/N3DataFactory.js\");\n// **N3Util** provides N3 utility functions.\n\n\n\n// Tests whether the given term represents an IRI\nfunction isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nfunction isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nfunction isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nfunction isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nfunction isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nfunction inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nfunction prefix(iri, factory) {\n  return prefixes({ '': iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nfunction prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  var prefixes = Object.create(null);\n  for (var prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      var cache = Object.create(null);\n      prefixes[prefix] = function (local) {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error('Unknown prefix: ' + prefix);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/N3Util.js?");

/***/ }),

/***/ "./node_modules/n3/src/N3Writer.js":
/*!*****************************************!*\
  !*** ./node_modules/n3/src/N3Writer.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return N3Writer; });\n/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IRIs */ \"./node_modules/n3/src/IRIs.js\");\n/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./N3DataFactory */ \"./node_modules/n3/src/N3DataFactory.js\");\n// **N3Writer** writes N3 documents.\n\n\n\nconst DEFAULTGRAPH = _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__[\"default\"].defaultGraph();\n\nconst { rdf, xsd } = _IRIs__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\n// Characters in literals that require escaping\nvar escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__[\"default\"].internal.Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nclass N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      var output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end:   function (done) { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n    }\n    else {\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : this._encodeIriOrBlank(graph) + ' {\\n'));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(', ' + this._encodeObject(object), done);\n        // Same subject, different predicate\n        else\n          this._write(';\\n    ' +\n                      this._encodePredicate(this._predicate = predicate) + ' ' +\n                      this._encodeObject(object), done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write((this._subject === null ? '' : '.\\n') +\n                    this._encodeIriOrBlank(this._subject = subject) + ' ' +\n                    this._encodePredicate(this._predicate = predicate) + ' ' +\n                    this._encodeObject(object), done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  this._encodeIriOrBlank(subject)   + ' ' +\n            this._encodeIriOrBlank(predicate) + ' ' +\n            this._encodeObject(object) +\n            (graph && graph.value ? ' ' + this._encodeIriOrBlank(graph) + ' .\\n' : ' .\\n');\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(function (t) {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }, this).join('');\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : '_:' + entity.value;\n    }\n    // Escape special characters\n    var iri = entity.value;\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    var prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? '<' + iri + '>' :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    var value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n    // Write the literal, possibly with type or language\n    if (literal.language)\n      return '\"' + value + '\"@' + literal.language;\n    else if (literal.datatype.value !== xsd.string)\n      return '\"' + value + '\"^^' + this._encodeIriOrBlank(literal.datatype);\n    else\n      return '\"' + value + '\"';\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    return object.termType === 'Literal' ? this._encodeLiteral(object) : this._encodeIriOrBlank(object);\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (var i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    var prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    var prefixIRIs = this._prefixIRIs, hasPrefixes = false;\n    for (var prefix in prefixes) {\n      var iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      prefixIRIs[iri] = (prefix += ':');\n      this._write('@prefix ' + prefix + ' <' + iri + '>.\\n');\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      var IRIlist = '', prefixList = '';\n      for (var prefixIRI in prefixIRIs) {\n        IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];\n      }\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\\/]*$|' +\n                                     '^(' + IRIlist + ')([a-zA-Z][\\\\-_a-zA-Z0-9]*)$');\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    var children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm('[ ' + this._encodePredicate(child.predicate) + ' ' +\n                                  this._encodeObject(child.object) + ' ]');\n    // Generate a multi-triple or nested blank node\n    default:\n      var contents = '[';\n      // Write all triples in order\n      for (var i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += ', ' + this._encodeObject(child.object);\n        // Otherwise, write the predicate and the object\n        else {\n          contents += (i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate) + ' ' +\n                      this._encodeObject(child.object);\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(contents + '\\n]');\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    var length = elements && elements.length || 0, contents = new Array(length);\n    for (var i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm('(' + contents.join(' ') + ')');\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    var singleDone = done && function (error, result) { singleDone = null, done(error, result); };\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  var result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/N3Writer.js?");

/***/ }),

/***/ "./node_modules/n3/src/index.js":
/*!**************************************!*\
  !*** ./node_modules/n3/src/index.js ***!
  \**************************************/
/*! exports provided: DataFactory, Lexer, Parser, Writer, Store, StreamParser, StreamWriter, Util */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3DataFactory */ \"./node_modules/n3/src/N3DataFactory.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DataFactory\", function() { return _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _N3Lexer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./N3Lexer */ \"./node_modules/n3/src/N3Lexer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Lexer\", function() { return _N3Lexer__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _N3Parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./N3Parser */ \"./node_modules/n3/src/N3Parser.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return _N3Parser__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _N3Writer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./N3Writer */ \"./node_modules/n3/src/N3Writer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Writer\", function() { return _N3Writer__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _N3Store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./N3Store */ \"./node_modules/n3/src/N3Store.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return _N3Store__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _N3StreamParser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./N3StreamParser */ \"./node_modules/n3/src/N3StreamParser.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StreamParser\", function() { return _N3StreamParser__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _N3StreamWriter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./N3StreamWriter */ \"./node_modules/n3/src/N3StreamWriter.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StreamWriter\", function() { return _N3StreamWriter__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _N3Util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./N3Util */ \"./node_modules/n3/src/N3Util.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Util\", function() { return _N3Util__WEBPACK_IMPORTED_MODULE_7__; });\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://blues/./node_modules/n3/src/index.js?");

/***/ }),

/***/ "./node_modules/node-fetch/browser.js":
/*!********************************************!*\
  !*** ./node_modules/node-fetch/browser.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nexports.default = global.fetch.bind(global);\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;\n\n//# sourceURL=webpack://blues/./node_modules/node-fetch/browser.js?");

/***/ }),

/***/ "./node_modules/node-forge/lib/baseN.js":
/*!**********************************************!*\
  !*** ./node_modules/node-forge/lib/baseN.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nvar api = {};\nmodule.exports = api;\n\n// baseN alphabet indexes\nvar _reverseAlphabets = {};\n\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the baseN-encoded output string.\n */\napi.encode = function(input, alphabet, maxline) {\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if(maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n\n  var output = '';\n\n  if(!(input instanceof Uint8Array)) {\n    // assume forge byte buffer\n    output = _encodeWithByteBuffer(input, alphabet);\n  } else {\n    var i = 0;\n    var base = alphabet.length;\n    var first = alphabet.charAt(0);\n    var digits = [0];\n    for(i = 0; i < input.length; ++i) {\n      for(var j = 0, carry = input[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % base;\n        carry = (carry / base) | 0;\n      }\n\n      while(carry > 0) {\n        digits.push(carry % base);\n        carry = (carry / base) | 0;\n      }\n    }\n\n    // deal with leading zeros\n    for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n      output += first;\n    }\n    // convert digits to a string\n    for(i = digits.length - 1; i >= 0; --i) {\n      output += alphabet[digits[i]];\n    }\n  }\n\n  if(maxline) {\n    var regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n\n  return output;\n};\n\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param input the baseN-encoded input string.\n *\n * @return the Uint8Array.\n */\napi.decode = function(input, alphabet) {\n  if(typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n\n  var table = _reverseAlphabets[alphabet];\n  if(!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n    for(var i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  }\n\n  // remove whitespace characters\n  input = input.replace(/\\s/g, '');\n\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var bytes = [0];\n  for(var i = 0; i < input.length; i++) {\n    var value = table[input.charCodeAt(i)];\n    if(value === undefined) {\n      return;\n    }\n\n    for(var j = 0, carry = value; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n\n    while(carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for(var k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n\n  if(typeof Buffer !== 'undefined') {\n    return Buffer.from(bytes.reverse());\n  }\n\n  return new Uint8Array(bytes.reverse());\n};\n\nfunction _encodeWithByteBuffer(input, alphabet) {\n  var i = 0;\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var digits = [0];\n  for(i = 0; i < input.length(); ++i) {\n    for(var j = 0, carry = input.at(i); j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = (carry / base) | 0;\n    }\n\n    while(carry > 0) {\n      digits.push(carry % base);\n      carry = (carry / base) | 0;\n    }\n  }\n\n  var output = '';\n\n  // deal with leading zeros\n  for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {\n    output += first;\n  }\n  // convert digits to a string\n  for(i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n\n  return output;\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://blues/./node_modules/node-forge/lib/baseN.js?");

/***/ }),

/***/ "./node_modules/node-forge/lib/forge.js":
/*!**********************************************!*\
  !*** ./node_modules/node-forge/lib/forge.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Node.js module for Forge.\n *\n * @author Dave Longley\n *\n * Copyright 2011-2016 Digital Bazaar, Inc.\n */\nmodule.exports = {\n  // default options\n  options: {\n    usePureJavaScript: false\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/node-forge/lib/forge.js?");

/***/ }),

/***/ "./node_modules/node-forge/lib/md.js":
/*!*******************************************!*\
  !*** ./node_modules/node-forge/lib/md.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Node.js module for Forge message digests.\n *\n * @author Dave Longley\n *\n * Copyright 2011-2017 Digital Bazaar, Inc.\n */\nvar forge = __webpack_require__(/*! ./forge */ \"./node_modules/node-forge/lib/forge.js\");\n\nmodule.exports = forge.md = forge.md || {};\nforge.md.algorithms = forge.md.algorithms || {};\n\n\n//# sourceURL=webpack://blues/./node_modules/node-forge/lib/md.js?");

/***/ }),

/***/ "./node_modules/node-forge/lib/sha1.js":
/*!*********************************************!*\
  !*** ./node_modules/node-forge/lib/sha1.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2015 Digital Bazaar, Inc.\n */\nvar forge = __webpack_require__(/*! ./forge */ \"./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./md */ \"./node_modules/node-forge/lib/md.js\");\n__webpack_require__(/*! ./util */ \"./node_modules/node-forge/lib/util.js\");\n\nvar sha1 = module.exports = forge.sha1 = forge.sha1 || {};\nforge.md.sha1 = forge.md.algorithms.sha1 = sha1;\n\n/**\n * Creates a SHA-1 message digest object.\n *\n * @return a message digest object.\n */\nsha1.create = function() {\n  // do initialization as necessary\n  if(!_initialized) {\n    _init();\n  }\n\n  // SHA-1 state contains five 32-bit integers\n  var _state = null;\n\n  // input buffer\n  var _input = forge.util.createBuffer();\n\n  // used for word storage\n  var _w = new Array(80);\n\n  // message digest object\n  var md = {\n    algorithm: 'sha1',\n    blockLength: 64,\n    digestLength: 20,\n    // 56-bit length of message so far (does not including padding)\n    messageLength: 0,\n    // true message length\n    fullMessageLength: null,\n    // size of message length in bytes\n    messageLengthSize: 8\n  };\n\n  /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */\n  md.start = function() {\n    // up to 56-bit message length for convenience\n    md.messageLength = 0;\n\n    // full message length (set md.messageLength64 for backwards-compatibility)\n    md.fullMessageLength = md.messageLength64 = [];\n    var int32s = md.messageLengthSize / 4;\n    for(var i = 0; i < int32s; ++i) {\n      md.fullMessageLength.push(0);\n    }\n    _input = forge.util.createBuffer();\n    _state = {\n      h0: 0x67452301,\n      h1: 0xEFCDAB89,\n      h2: 0x98BADCFE,\n      h3: 0x10325476,\n      h4: 0xC3D2E1F0\n    };\n    return md;\n  };\n  // start digest automatically for first time\n  md.start();\n\n  /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */\n  md.update = function(msg, encoding) {\n    if(encoding === 'utf8') {\n      msg = forge.util.encodeUtf8(msg);\n    }\n\n    // update message length\n    var len = msg.length;\n    md.messageLength += len;\n    len = [(len / 0x100000000) >>> 0, len >>> 0];\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      md.fullMessageLength[i] += len[1];\n      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);\n      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n      len[0] = ((len[1] / 0x100000000) >>> 0);\n    }\n\n    // add bytes to input buffer\n    _input.putBytes(msg);\n\n    // process bytes\n    _update(_state, _w, _input);\n\n    // compact input buffer every 2K or if empty\n    if(_input.read > 2048 || _input.length() === 0) {\n      _input.compact();\n    }\n\n    return md;\n  };\n\n  /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  md.digest = function() {\n    /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate SHA-1 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */\n\n    /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 448 mod 512. In other words,\n    the data to be digested must be a multiple of 512 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 8 bytes (64\n    bits), that means that the last segment of the data must have 56 bytes\n    (448 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 448 mod 512 because\n    512 - 128 = 448.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 448 mod 512, then 512 padding bits must be added. */\n\n    var finalBlock = forge.util.createBuffer();\n    finalBlock.putBytes(_input.bytes());\n\n    // compute remaining size to be digested (include message length size)\n    var remaining = (\n      md.fullMessageLength[md.fullMessageLength.length - 1] +\n      md.messageLengthSize);\n\n    // add padding for overflow blockSize - overflow\n    // _padding starts with 1 byte with first bit is set (byte value 128), then\n    // there may be up to (blockSize - 1) other pad bytes\n    var overflow = remaining & (md.blockLength - 1);\n    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n\n    // serialize message length in bits in big-endian order; since length\n    // is stored in bytes we multiply by 8 and add carry from next int\n    var next, carry;\n    var bits = md.fullMessageLength[0] * 8;\n    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {\n      next = md.fullMessageLength[i + 1] * 8;\n      carry = (next / 0x100000000) >>> 0;\n      bits += carry;\n      finalBlock.putInt32(bits >>> 0);\n      bits = next >>> 0;\n    }\n    finalBlock.putInt32(bits);\n\n    var s2 = {\n      h0: _state.h0,\n      h1: _state.h1,\n      h2: _state.h2,\n      h3: _state.h3,\n      h4: _state.h4\n    };\n    _update(s2, _w, finalBlock);\n    var rval = forge.util.createBuffer();\n    rval.putInt32(s2.h0);\n    rval.putInt32(s2.h1);\n    rval.putInt32(s2.h2);\n    rval.putInt32(s2.h3);\n    rval.putInt32(s2.h4);\n    return rval;\n  };\n\n  return md;\n};\n\n// sha-1 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n\n/**\n * Initializes the constant tables.\n */\nfunction _init() {\n  // create padding\n  _padding = String.fromCharCode(128);\n  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);\n\n  // now initialized\n  _initialized = true;\n}\n\n/**\n * Updates a SHA-1 state with the given byte buffer.\n *\n * @param s the SHA-1 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */\nfunction _update(s, w, bytes) {\n  // consume 512 bit (64 byte) chunks\n  var t, a, b, c, d, e, f, i;\n  var len = bytes.length();\n  while(len >= 64) {\n    // the w array will be populated with sixteen 32-bit big-endian words\n    // and then extended into 80 32-bit words according to SHA-1 algorithm\n    // and for 32-79 using Max Locktyukhin's optimization\n\n    // initialize hash value for this chunk\n    a = s.h0;\n    b = s.h1;\n    c = s.h2;\n    d = s.h3;\n    e = s.h4;\n\n    // round 1\n    for(i = 0; i < 16; ++i) {\n      t = bytes.getInt32();\n      w[i] = t;\n      f = d ^ (b & (c ^ d));\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    for(; i < 20; ++i) {\n      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);\n      t = (t << 1) | (t >>> 31);\n      w[i] = t;\n      f = d ^ (b & (c ^ d));\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    // round 2\n    for(; i < 32; ++i) {\n      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);\n      t = (t << 1) | (t >>> 31);\n      w[i] = t;\n      f = b ^ c ^ d;\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    for(; i < 40; ++i) {\n      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);\n      t = (t << 2) | (t >>> 30);\n      w[i] = t;\n      f = b ^ c ^ d;\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    // round 3\n    for(; i < 60; ++i) {\n      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);\n      t = (t << 2) | (t >>> 30);\n      w[i] = t;\n      f = (b & c) | (d & (b ^ c));\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    // round 4\n    for(; i < 80; ++i) {\n      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);\n      t = (t << 2) | (t >>> 30);\n      w[i] = t;\n      f = b ^ c ^ d;\n      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n\n    // update hash state\n    s.h0 = (s.h0 + a) | 0;\n    s.h1 = (s.h1 + b) | 0;\n    s.h2 = (s.h2 + c) | 0;\n    s.h3 = (s.h3 + d) | 0;\n    s.h4 = (s.h4 + e) | 0;\n\n    len -= 64;\n  }\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/node-forge/lib/sha1.js?");

/***/ }),

/***/ "./node_modules/node-forge/lib/sha256.js":
/*!***********************************************!*\
  !*** ./node_modules/node-forge/lib/sha256.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.\n *\n * See FIPS 180-2 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2015 Digital Bazaar, Inc.\n */\nvar forge = __webpack_require__(/*! ./forge */ \"./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./md */ \"./node_modules/node-forge/lib/md.js\");\n__webpack_require__(/*! ./util */ \"./node_modules/node-forge/lib/util.js\");\n\nvar sha256 = module.exports = forge.sha256 = forge.sha256 || {};\nforge.md.sha256 = forge.md.algorithms.sha256 = sha256;\n\n/**\n * Creates a SHA-256 message digest object.\n *\n * @return a message digest object.\n */\nsha256.create = function() {\n  // do initialization as necessary\n  if(!_initialized) {\n    _init();\n  }\n\n  // SHA-256 state contains eight 32-bit integers\n  var _state = null;\n\n  // input buffer\n  var _input = forge.util.createBuffer();\n\n  // used for word storage\n  var _w = new Array(64);\n\n  // message digest object\n  var md = {\n    algorithm: 'sha256',\n    blockLength: 64,\n    digestLength: 32,\n    // 56-bit length of message so far (does not including padding)\n    messageLength: 0,\n    // true message length\n    fullMessageLength: null,\n    // size of message length in bytes\n    messageLengthSize: 8\n  };\n\n  /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */\n  md.start = function() {\n    // up to 56-bit message length for convenience\n    md.messageLength = 0;\n\n    // full message length (set md.messageLength64 for backwards-compatibility)\n    md.fullMessageLength = md.messageLength64 = [];\n    var int32s = md.messageLengthSize / 4;\n    for(var i = 0; i < int32s; ++i) {\n      md.fullMessageLength.push(0);\n    }\n    _input = forge.util.createBuffer();\n    _state = {\n      h0: 0x6A09E667,\n      h1: 0xBB67AE85,\n      h2: 0x3C6EF372,\n      h3: 0xA54FF53A,\n      h4: 0x510E527F,\n      h5: 0x9B05688C,\n      h6: 0x1F83D9AB,\n      h7: 0x5BE0CD19\n    };\n    return md;\n  };\n  // start digest automatically for first time\n  md.start();\n\n  /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */\n  md.update = function(msg, encoding) {\n    if(encoding === 'utf8') {\n      msg = forge.util.encodeUtf8(msg);\n    }\n\n    // update message length\n    var len = msg.length;\n    md.messageLength += len;\n    len = [(len / 0x100000000) >>> 0, len >>> 0];\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      md.fullMessageLength[i] += len[1];\n      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);\n      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n      len[0] = ((len[1] / 0x100000000) >>> 0);\n    }\n\n    // add bytes to input buffer\n    _input.putBytes(msg);\n\n    // process bytes\n    _update(_state, _w, _input);\n\n    // compact input buffer every 2K or if empty\n    if(_input.read > 2048 || _input.length() === 0) {\n      _input.compact();\n    }\n\n    return md;\n  };\n\n  /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  md.digest = function() {\n    /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate SHA-256 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */\n\n    /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 448 mod 512. In other words,\n    the data to be digested must be a multiple of 512 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 8 bytes (64\n    bits), that means that the last segment of the data must have 56 bytes\n    (448 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 448 mod 512 because\n    512 - 128 = 448.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 448 mod 512, then 512 padding bits must be added. */\n\n    var finalBlock = forge.util.createBuffer();\n    finalBlock.putBytes(_input.bytes());\n\n    // compute remaining size to be digested (include message length size)\n    var remaining = (\n      md.fullMessageLength[md.fullMessageLength.length - 1] +\n      md.messageLengthSize);\n\n    // add padding for overflow blockSize - overflow\n    // _padding starts with 1 byte with first bit is set (byte value 128), then\n    // there may be up to (blockSize - 1) other pad bytes\n    var overflow = remaining & (md.blockLength - 1);\n    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n\n    // serialize message length in bits in big-endian order; since length\n    // is stored in bytes we multiply by 8 and add carry from next int\n    var next, carry;\n    var bits = md.fullMessageLength[0] * 8;\n    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {\n      next = md.fullMessageLength[i + 1] * 8;\n      carry = (next / 0x100000000) >>> 0;\n      bits += carry;\n      finalBlock.putInt32(bits >>> 0);\n      bits = next >>> 0;\n    }\n    finalBlock.putInt32(bits);\n\n    var s2 = {\n      h0: _state.h0,\n      h1: _state.h1,\n      h2: _state.h2,\n      h3: _state.h3,\n      h4: _state.h4,\n      h5: _state.h5,\n      h6: _state.h6,\n      h7: _state.h7\n    };\n    _update(s2, _w, finalBlock);\n    var rval = forge.util.createBuffer();\n    rval.putInt32(s2.h0);\n    rval.putInt32(s2.h1);\n    rval.putInt32(s2.h2);\n    rval.putInt32(s2.h3);\n    rval.putInt32(s2.h4);\n    rval.putInt32(s2.h5);\n    rval.putInt32(s2.h6);\n    rval.putInt32(s2.h7);\n    return rval;\n  };\n\n  return md;\n};\n\n// sha-256 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n\n// table of constants\nvar _k = null;\n\n/**\n * Initializes the constant tables.\n */\nfunction _init() {\n  // create padding\n  _padding = String.fromCharCode(128);\n  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);\n\n  // create K table for SHA-256\n  _k = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  // now initialized\n  _initialized = true;\n}\n\n/**\n * Updates a SHA-256 state with the given byte buffer.\n *\n * @param s the SHA-256 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */\nfunction _update(s, w, bytes) {\n  // consume 512 bit (64 byte) chunks\n  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;\n  var len = bytes.length();\n  while(len >= 64) {\n    // the w array will be populated with sixteen 32-bit big-endian words\n    // and then extended into 64 32-bit words according to SHA-256\n    for(i = 0; i < 16; ++i) {\n      w[i] = bytes.getInt32();\n    }\n    for(; i < 64; ++i) {\n      // XOR word 2 words ago rot right 17, rot right 19, shft right 10\n      t1 = w[i - 2];\n      t1 =\n        ((t1 >>> 17) | (t1 << 15)) ^\n        ((t1 >>> 19) | (t1 << 13)) ^\n        (t1 >>> 10);\n      // XOR word 15 words ago rot right 7, rot right 18, shft right 3\n      t2 = w[i - 15];\n      t2 =\n        ((t2 >>> 7) | (t2 << 25)) ^\n        ((t2 >>> 18) | (t2 << 14)) ^\n        (t2 >>> 3);\n      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32\n      w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;\n    }\n\n    // initialize hash value for this chunk\n    a = s.h0;\n    b = s.h1;\n    c = s.h2;\n    d = s.h3;\n    e = s.h4;\n    f = s.h5;\n    g = s.h6;\n    h = s.h7;\n\n    // round function\n    for(i = 0; i < 64; ++i) {\n      // Sum1(e)\n      s1 =\n        ((e >>> 6) | (e << 26)) ^\n        ((e >>> 11) | (e << 21)) ^\n        ((e >>> 25) | (e << 7));\n      // Ch(e, f, g) (optimized the same way as SHA-1)\n      ch = g ^ (e & (f ^ g));\n      // Sum0(a)\n      s0 =\n        ((a >>> 2) | (a << 30)) ^\n        ((a >>> 13) | (a << 19)) ^\n        ((a >>> 22) | (a << 10));\n      // Maj(a, b, c) (optimized the same way as SHA-1)\n      maj = (a & b) | (c & (a ^ b));\n\n      // main algorithm\n      t1 = h + s1 + ch + _k[i] + w[i];\n      t2 = s0 + maj;\n      h = g;\n      g = f;\n      f = e;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      // can't truncate with `| 0`\n      e = (d + t1) >>> 0;\n      d = c;\n      c = b;\n      b = a;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      // can't truncate with `| 0`\n      a = (t1 + t2) >>> 0;\n    }\n\n    // update hash state\n    s.h0 = (s.h0 + a) | 0;\n    s.h1 = (s.h1 + b) | 0;\n    s.h2 = (s.h2 + c) | 0;\n    s.h3 = (s.h3 + d) | 0;\n    s.h4 = (s.h4 + e) | 0;\n    s.h5 = (s.h5 + f) | 0;\n    s.h6 = (s.h6 + g) | 0;\n    s.h7 = (s.h7 + h) | 0;\n    len -= 64;\n  }\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/node-forge/lib/sha256.js?");

/***/ }),

/***/ "./node_modules/node-forge/lib/util.js":
/*!*********************************************!*\
  !*** ./node_modules/node-forge/lib/util.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate, global, Buffer) {/**\n * Utility functions for web applications.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2018 Digital Bazaar, Inc.\n */\nvar forge = __webpack_require__(/*! ./forge */ \"./node_modules/node-forge/lib/forge.js\");\nvar baseN = __webpack_require__(/*! ./baseN */ \"./node_modules/node-forge/lib/baseN.js\");\n\n/* Utilities API */\nvar util = module.exports = forge.util = forge.util || {};\n\n// define setImmediate and nextTick\n(function() {\n  // use native nextTick (unless we're in webpack)\n  // webpack (or better node-libs-browser polyfill) sets process.browser.\n  // this way we can detect webpack properly\n  if(typeof process !== 'undefined' && process.nextTick && !process.browser) {\n    util.nextTick = process.nextTick;\n    if(typeof setImmediate === 'function') {\n      util.setImmediate = setImmediate;\n    } else {\n      // polyfill setImmediate with nextTick, older versions of node\n      // (those w/o setImmediate) won't totally starve IO\n      util.setImmediate = util.nextTick;\n    }\n    return;\n  }\n\n  // polyfill nextTick with native setImmediate\n  if(typeof setImmediate === 'function') {\n    util.setImmediate = function() { return setImmediate.apply(undefined, arguments); };\n    util.nextTick = function(callback) {\n      return setImmediate(callback);\n    };\n    return;\n  }\n\n  /* Note: A polyfill upgrade pattern is used here to allow combining\n  polyfills. For example, MutationObserver is fast, but blocks UI updates,\n  so it needs to allow UI updates periodically, so it falls back on\n  postMessage or setTimeout. */\n\n  // polyfill with setTimeout\n  util.setImmediate = function(callback) {\n    setTimeout(callback, 0);\n  };\n\n  // upgrade polyfill to use postMessage\n  if(typeof window !== 'undefined' &&\n    typeof window.postMessage === 'function') {\n    var msg = 'forge.setImmediate';\n    var callbacks = [];\n    util.setImmediate = function(callback) {\n      callbacks.push(callback);\n      // only send message when one hasn't been sent in\n      // the current turn of the event loop\n      if(callbacks.length === 1) {\n        window.postMessage(msg, '*');\n      }\n    };\n    function handler(event) {\n      if(event.source === window && event.data === msg) {\n        event.stopPropagation();\n        var copy = callbacks.slice();\n        callbacks.length = 0;\n        copy.forEach(function(callback) {\n          callback();\n        });\n      }\n    }\n    window.addEventListener('message', handler, true);\n  }\n\n  // upgrade polyfill to use MutationObserver\n  if(typeof MutationObserver !== 'undefined') {\n    // polyfill with MutationObserver\n    var now = Date.now();\n    var attr = true;\n    var div = document.createElement('div');\n    var callbacks = [];\n    new MutationObserver(function() {\n      var copy = callbacks.slice();\n      callbacks.length = 0;\n      copy.forEach(function(callback) {\n        callback();\n      });\n    }).observe(div, {attributes: true});\n    var oldSetImmediate = util.setImmediate;\n    util.setImmediate = function(callback) {\n      if(Date.now() - now > 15) {\n        now = Date.now();\n        oldSetImmediate(callback);\n      } else {\n        callbacks.push(callback);\n        // only trigger observer when it hasn't been triggered in\n        // the current turn of the event loop\n        if(callbacks.length === 1) {\n          div.setAttribute('a', attr = !attr);\n        }\n      }\n    };\n  }\n\n  util.nextTick = util.setImmediate;\n})();\n\n// check if running under Node.js\nutil.isNodejs =\n  typeof process !== 'undefined' && process.versions && process.versions.node;\n\n\n// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while\n// it will point to `window` in the main thread.\n// To remain compatible with older browsers, we fall back to 'window' if 'self'\n// is not available.\nutil.globalScope = (function() {\n  if(util.isNodejs) {\n    return global;\n  }\n\n  return typeof self === 'undefined' ? window : self;\n})();\n\n// define isArray\nutil.isArray = Array.isArray || function(x) {\n  return Object.prototype.toString.call(x) === '[object Array]';\n};\n\n// define isArrayBuffer\nutil.isArrayBuffer = function(x) {\n  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;\n};\n\n// define isArrayBufferView\nutil.isArrayBufferView = function(x) {\n  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;\n};\n\n/**\n * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for\n * algorithms where bit manipulation, JavaScript limitations, and/or algorithm\n * design only allow for byte operations of a limited size.\n *\n * @param n number of bits.\n *\n * Throw Error if n invalid.\n */\nfunction _checkBitsParam(n) {\n  if(!(n === 8 || n === 16 || n === 24 || n === 32)) {\n    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);\n  }\n}\n\n// TODO: set ByteBuffer to best available backing\nutil.ByteBuffer = ByteStringBuffer;\n\n/** Buffer w/BinaryString backing */\n\n/**\n * Constructor for a binary string backed byte buffer.\n *\n * @param [b] the bytes to wrap (either encoded as string, one byte per\n *          character, or as an ArrayBuffer or Typed Array).\n */\nfunction ByteStringBuffer(b) {\n  // TODO: update to match DataBuffer API\n\n  // the data in this buffer\n  this.data = '';\n  // the pointer for reading from this buffer\n  this.read = 0;\n\n  if(typeof b === 'string') {\n    this.data = b;\n  } else if(util.isArrayBuffer(b) || util.isArrayBufferView(b)) {\n    if(typeof Buffer !== 'undefined' && b instanceof Buffer) {\n      this.data = b.toString('binary');\n    } else {\n      // convert native buffer to forge buffer\n      // FIXME: support native buffers internally instead\n      var arr = new Uint8Array(b);\n      try {\n        this.data = String.fromCharCode.apply(null, arr);\n      } catch(e) {\n        for(var i = 0; i < arr.length; ++i) {\n          this.putByte(arr[i]);\n        }\n      }\n    }\n  } else if(b instanceof ByteStringBuffer ||\n    (typeof b === 'object' && typeof b.data === 'string' &&\n    typeof b.read === 'number')) {\n    // copy existing buffer\n    this.data = b.data;\n    this.read = b.read;\n  }\n\n  // used for v8 optimization\n  this._constructedStringLength = 0;\n}\nutil.ByteStringBuffer = ByteStringBuffer;\n\n/* Note: This is an optimization for V8-based browsers. When V8 concatenates\n  a string, the strings are only joined logically using a \"cons string\" or\n  \"constructed/concatenated string\". These containers keep references to one\n  another and can result in very large memory usage. For example, if a 2MB\n  string is constructed by concatenating 4 bytes together at a time, the\n  memory usage will be ~44MB; so ~22x increase. The strings are only joined\n  together when an operation requiring their joining takes place, such as\n  substr(). This function is called when adding data to this buffer to ensure\n  these types of strings are periodically joined to reduce the memory\n  footprint. */\nvar _MAX_CONSTRUCTED_STRING_LENGTH = 4096;\nutil.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {\n  this._constructedStringLength += x;\n  if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {\n    // this substr() should cause the constructed string to join\n    this.data.substr(0, 1);\n    this._constructedStringLength = 0;\n  }\n};\n\n/**\n * Gets the number of bytes in this buffer.\n *\n * @return the number of bytes in this buffer.\n */\nutil.ByteStringBuffer.prototype.length = function() {\n  return this.data.length - this.read;\n};\n\n/**\n * Gets whether or not this buffer is empty.\n *\n * @return true if this buffer is empty, false if not.\n */\nutil.ByteStringBuffer.prototype.isEmpty = function() {\n  return this.length() <= 0;\n};\n\n/**\n * Puts a byte in this buffer.\n *\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putByte = function(b) {\n  return this.putBytes(String.fromCharCode(b));\n};\n\n/**\n * Puts a byte in this buffer N times.\n *\n * @param b the byte to put.\n * @param n the number of bytes of value b to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.fillWithByte = function(b, n) {\n  b = String.fromCharCode(b);\n  var d = this.data;\n  while(n > 0) {\n    if(n & 1) {\n      d += b;\n    }\n    n >>>= 1;\n    if(n > 0) {\n      b += b;\n    }\n  }\n  this.data = d;\n  this._optimizeConstructedString(n);\n  return this;\n};\n\n/**\n * Puts bytes in this buffer.\n *\n * @param bytes the bytes (as a UTF-8 encoded string) to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putBytes = function(bytes) {\n  this.data += bytes;\n  this._optimizeConstructedString(bytes.length);\n  return this;\n};\n\n/**\n * Puts a UTF-16 encoded string into this buffer.\n *\n * @param str the string to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putString = function(str) {\n  return this.putBytes(util.encodeUtf8(str));\n};\n\n/**\n * Puts a 16-bit integer in this buffer in big-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt16 = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n/**\n * Puts a 24-bit integer in this buffer in big-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt24 = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n/**\n * Puts a 32-bit integer in this buffer in big-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt32 = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i >> 24 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n/**\n * Puts a 16-bit integer in this buffer in little-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt16Le = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF));\n};\n\n/**\n * Puts a 24-bit integer in this buffer in little-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt24Le = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF));\n};\n\n/**\n * Puts a 32-bit integer in this buffer in little-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt32Le = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 24 & 0xFF));\n};\n\n/**\n * Puts an n-bit integer in this buffer in big-endian order.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt = function(i, n) {\n  _checkBitsParam(n);\n  var bytes = '';\n  do {\n    n -= 8;\n    bytes += String.fromCharCode((i >> n) & 0xFF);\n  } while(n > 0);\n  return this.putBytes(bytes);\n};\n\n/**\n * Puts a signed n-bit integer in this buffer in big-endian order. Two's\n * complement representation is used.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putSignedInt = function(i, n) {\n  // putInt checks n\n  if(i < 0) {\n    i += 2 << (n - 1);\n  }\n  return this.putInt(i, n);\n};\n\n/**\n * Puts the given buffer into this buffer.\n *\n * @param buffer the buffer to put into this one.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putBuffer = function(buffer) {\n  return this.putBytes(buffer.getBytes());\n};\n\n/**\n * Gets a byte from this buffer and advances the read pointer by 1.\n *\n * @return the byte.\n */\nutil.ByteStringBuffer.prototype.getByte = function() {\n  return this.data.charCodeAt(this.read++);\n};\n\n/**\n * Gets a uint16 from this buffer in big-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.ByteStringBuffer.prototype.getInt16 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 8 ^\n    this.data.charCodeAt(this.read + 1));\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in big-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.ByteStringBuffer.prototype.getInt24 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 16 ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2));\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in big-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.ByteStringBuffer.prototype.getInt32 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 24 ^\n    this.data.charCodeAt(this.read + 1) << 16 ^\n    this.data.charCodeAt(this.read + 2) << 8 ^\n    this.data.charCodeAt(this.read + 3));\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets a uint16 from this buffer in little-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.ByteStringBuffer.prototype.getInt16Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in little-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.ByteStringBuffer.prototype.getInt24Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2) << 16);\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in little-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.ByteStringBuffer.prototype.getInt32Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2) << 16 ^\n    this.data.charCodeAt(this.read + 3) << 24);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets an n-bit integer from this buffer in big-endian order and advances the\n * read pointer by ceil(n/8).\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.ByteStringBuffer.prototype.getInt = function(n) {\n  _checkBitsParam(n);\n  var rval = 0;\n  do {\n    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.\n    rval = (rval << 8) + this.data.charCodeAt(this.read++);\n    n -= 8;\n  } while(n > 0);\n  return rval;\n};\n\n/**\n * Gets a signed n-bit integer from this buffer in big-endian order, using\n * two's complement, and advances the read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.ByteStringBuffer.prototype.getSignedInt = function(n) {\n  // getInt checks n\n  var x = this.getInt(n);\n  var max = 2 << (n - 2);\n  if(x >= max) {\n    x -= max << 1;\n  }\n  return x;\n};\n\n/**\n * Reads bytes out into a UTF-8 string and clears them from the buffer.\n *\n * @param count the number of bytes to read, undefined or null for all.\n *\n * @return a UTF-8 string of bytes.\n */\nutil.ByteStringBuffer.prototype.getBytes = function(count) {\n  var rval;\n  if(count) {\n    // read count bytes\n    count = Math.min(this.length(), count);\n    rval = this.data.slice(this.read, this.read + count);\n    this.read += count;\n  } else if(count === 0) {\n    rval = '';\n  } else {\n    // read all bytes, optimize to only copy when needed\n    rval = (this.read === 0) ? this.data : this.data.slice(this.read);\n    this.clear();\n  }\n  return rval;\n};\n\n/**\n * Gets a UTF-8 encoded string of the bytes from this buffer without modifying\n * the read pointer.\n *\n * @param count the number of bytes to get, omit to get all.\n *\n * @return a string full of UTF-8 encoded characters.\n */\nutil.ByteStringBuffer.prototype.bytes = function(count) {\n  return (typeof(count) === 'undefined' ?\n    this.data.slice(this.read) :\n    this.data.slice(this.read, this.read + count));\n};\n\n/**\n * Gets a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n *\n * @return the byte.\n */\nutil.ByteStringBuffer.prototype.at = function(i) {\n  return this.data.charCodeAt(this.read + i);\n};\n\n/**\n * Puts a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.setAt = function(i, b) {\n  this.data = this.data.substr(0, this.read + i) +\n    String.fromCharCode(b) +\n    this.data.substr(this.read + i + 1);\n  return this;\n};\n\n/**\n * Gets the last byte without modifying the read pointer.\n *\n * @return the last byte.\n */\nutil.ByteStringBuffer.prototype.last = function() {\n  return this.data.charCodeAt(this.data.length - 1);\n};\n\n/**\n * Creates a copy of this buffer.\n *\n * @return the copy.\n */\nutil.ByteStringBuffer.prototype.copy = function() {\n  var c = util.createBuffer(this.data);\n  c.read = this.read;\n  return c;\n};\n\n/**\n * Compacts this buffer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.compact = function() {\n  if(this.read > 0) {\n    this.data = this.data.slice(this.read);\n    this.read = 0;\n  }\n  return this;\n};\n\n/**\n * Clears this buffer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.clear = function() {\n  this.data = '';\n  this.read = 0;\n  return this;\n};\n\n/**\n * Shortens this buffer by triming bytes off of the end of this buffer.\n *\n * @param count the number of bytes to trim off.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.truncate = function(count) {\n  var len = Math.max(0, this.length() - count);\n  this.data = this.data.substr(this.read, len);\n  this.read = 0;\n  return this;\n};\n\n/**\n * Converts this buffer to a hexadecimal string.\n *\n * @return a hexadecimal string.\n */\nutil.ByteStringBuffer.prototype.toHex = function() {\n  var rval = '';\n  for(var i = this.read; i < this.data.length; ++i) {\n    var b = this.data.charCodeAt(i);\n    if(b < 16) {\n      rval += '0';\n    }\n    rval += b.toString(16);\n  }\n  return rval;\n};\n\n/**\n * Converts this buffer to a UTF-16 string (standard JavaScript string).\n *\n * @return a UTF-16 string.\n */\nutil.ByteStringBuffer.prototype.toString = function() {\n  return util.decodeUtf8(this.bytes());\n};\n\n/** End Buffer w/BinaryString backing */\n\n/** Buffer w/UInt8Array backing */\n\n/**\n * FIXME: Experimental. Do not use yet.\n *\n * Constructor for an ArrayBuffer-backed byte buffer.\n *\n * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a\n * TypedArray.\n *\n * If a string is given, its encoding should be provided as an option,\n * otherwise it will default to 'binary'. A 'binary' string is encoded such\n * that each character is one byte in length and size.\n *\n * If an ArrayBuffer, DataView, or TypedArray is given, it will be used\n * *directly* without any copying. Note that, if a write to the buffer requires\n * more space, the buffer will allocate a new backing ArrayBuffer to\n * accommodate. The starting read and write offsets for the buffer may be\n * given as options.\n *\n * @param [b] the initial bytes for this buffer.\n * @param options the options to use:\n *          [readOffset] the starting read offset to use (default: 0).\n *          [writeOffset] the starting write offset to use (default: the\n *            length of the first parameter).\n *          [growSize] the minimum amount, in bytes, to grow the buffer by to\n *            accommodate writes (default: 1024).\n *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the\n *            first parameter, if it is a string (default: 'binary').\n */\nfunction DataBuffer(b, options) {\n  // default options\n  options = options || {};\n\n  // pointers for read from/write to buffer\n  this.read = options.readOffset || 0;\n  this.growSize = options.growSize || 1024;\n\n  var isArrayBuffer = util.isArrayBuffer(b);\n  var isArrayBufferView = util.isArrayBufferView(b);\n  if(isArrayBuffer || isArrayBufferView) {\n    // use ArrayBuffer directly\n    if(isArrayBuffer) {\n      this.data = new DataView(b);\n    } else {\n      // TODO: adjust read/write offset based on the type of view\n      // or specify that this must be done in the options ... that the\n      // offsets are byte-based\n      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);\n    }\n    this.write = ('writeOffset' in options ?\n      options.writeOffset : this.data.byteLength);\n    return;\n  }\n\n  // initialize to empty array buffer and add any given bytes using putBytes\n  this.data = new DataView(new ArrayBuffer(0));\n  this.write = 0;\n\n  if(b !== null && b !== undefined) {\n    this.putBytes(b);\n  }\n\n  if('writeOffset' in options) {\n    this.write = options.writeOffset;\n  }\n}\nutil.DataBuffer = DataBuffer;\n\n/**\n * Gets the number of bytes in this buffer.\n *\n * @return the number of bytes in this buffer.\n */\nutil.DataBuffer.prototype.length = function() {\n  return this.write - this.read;\n};\n\n/**\n * Gets whether or not this buffer is empty.\n *\n * @return true if this buffer is empty, false if not.\n */\nutil.DataBuffer.prototype.isEmpty = function() {\n  return this.length() <= 0;\n};\n\n/**\n * Ensures this buffer has enough empty space to accommodate the given number\n * of bytes. An optional parameter may be given that indicates a minimum\n * amount to grow the buffer if necessary. If the parameter is not given,\n * the buffer will be grown by some previously-specified default amount\n * or heuristic.\n *\n * @param amount the number of bytes to accommodate.\n * @param [growSize] the minimum amount, in bytes, to grow the buffer by if\n *          necessary.\n */\nutil.DataBuffer.prototype.accommodate = function(amount, growSize) {\n  if(this.length() >= amount) {\n    return this;\n  }\n  growSize = Math.max(growSize || this.growSize, amount);\n\n  // grow buffer\n  var src = new Uint8Array(\n    this.data.buffer, this.data.byteOffset, this.data.byteLength);\n  var dst = new Uint8Array(this.length() + growSize);\n  dst.set(src);\n  this.data = new DataView(dst.buffer);\n\n  return this;\n};\n\n/**\n * Puts a byte in this buffer.\n *\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putByte = function(b) {\n  this.accommodate(1);\n  this.data.setUint8(this.write++, b);\n  return this;\n};\n\n/**\n * Puts a byte in this buffer N times.\n *\n * @param b the byte to put.\n * @param n the number of bytes of value b to put.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.fillWithByte = function(b, n) {\n  this.accommodate(n);\n  for(var i = 0; i < n; ++i) {\n    this.data.setUint8(b);\n  }\n  return this;\n};\n\n/**\n * Puts bytes in this buffer. The bytes may be given as a string, an\n * ArrayBuffer, a DataView, or a TypedArray.\n *\n * @param bytes the bytes to put.\n * @param [encoding] the encoding for the first parameter ('binary', 'utf8',\n *          'utf16', 'hex'), if it is a string (default: 'binary').\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putBytes = function(bytes, encoding) {\n  if(util.isArrayBufferView(bytes)) {\n    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    var len = src.byteLength - src.byteOffset;\n    this.accommodate(len);\n    var dst = new Uint8Array(this.data.buffer, this.write);\n    dst.set(src);\n    this.write += len;\n    return this;\n  }\n\n  if(util.isArrayBuffer(bytes)) {\n    var src = new Uint8Array(bytes);\n    this.accommodate(src.byteLength);\n    var dst = new Uint8Array(this.data.buffer);\n    dst.set(src, this.write);\n    this.write += src.byteLength;\n    return this;\n  }\n\n  // bytes is a util.DataBuffer or equivalent\n  if(bytes instanceof util.DataBuffer ||\n    (typeof bytes === 'object' &&\n    typeof bytes.read === 'number' && typeof bytes.write === 'number' &&\n    util.isArrayBufferView(bytes.data))) {\n    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());\n    this.accommodate(src.byteLength);\n    var dst = new Uint8Array(bytes.data.byteLength, this.write);\n    dst.set(src);\n    this.write += src.byteLength;\n    return this;\n  }\n\n  if(bytes instanceof util.ByteStringBuffer) {\n    // copy binary string and process as the same as a string parameter below\n    bytes = bytes.data;\n    encoding = 'binary';\n  }\n\n  // string conversion\n  encoding = encoding || 'binary';\n  if(typeof bytes === 'string') {\n    var view;\n\n    // decode from string\n    if(encoding === 'hex') {\n      this.accommodate(Math.ceil(bytes.length / 2));\n      view = new Uint8Array(this.data.buffer, this.write);\n      this.write += util.binary.hex.decode(bytes, view, this.write);\n      return this;\n    }\n    if(encoding === 'base64') {\n      this.accommodate(Math.ceil(bytes.length / 4) * 3);\n      view = new Uint8Array(this.data.buffer, this.write);\n      this.write += util.binary.base64.decode(bytes, view, this.write);\n      return this;\n    }\n\n    // encode text as UTF-8 bytes\n    if(encoding === 'utf8') {\n      // encode as UTF-8 then decode string as raw binary\n      bytes = util.encodeUtf8(bytes);\n      encoding = 'binary';\n    }\n\n    // decode string as raw binary\n    if(encoding === 'binary' || encoding === 'raw') {\n      // one byte per character\n      this.accommodate(bytes.length);\n      view = new Uint8Array(this.data.buffer, this.write);\n      this.write += util.binary.raw.decode(view);\n      return this;\n    }\n\n    // encode text as UTF-16 bytes\n    if(encoding === 'utf16') {\n      // two bytes per character\n      this.accommodate(bytes.length * 2);\n      view = new Uint16Array(this.data.buffer, this.write);\n      this.write += util.text.utf16.encode(view);\n      return this;\n    }\n\n    throw new Error('Invalid encoding: ' + encoding);\n  }\n\n  throw Error('Invalid parameter: ' + bytes);\n};\n\n/**\n * Puts the given buffer into this buffer.\n *\n * @param buffer the buffer to put into this one.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putBuffer = function(buffer) {\n  this.putBytes(buffer);\n  buffer.clear();\n  return this;\n};\n\n/**\n * Puts a string into this buffer.\n *\n * @param str the string to put.\n * @param [encoding] the encoding for the string (default: 'utf16').\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putString = function(str) {\n  return this.putBytes(str, 'utf16');\n};\n\n/**\n * Puts a 16-bit integer in this buffer in big-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt16 = function(i) {\n  this.accommodate(2);\n  this.data.setInt16(this.write, i);\n  this.write += 2;\n  return this;\n};\n\n/**\n * Puts a 24-bit integer in this buffer in big-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt24 = function(i) {\n  this.accommodate(3);\n  this.data.setInt16(this.write, i >> 8 & 0xFFFF);\n  this.data.setInt8(this.write, i >> 16 & 0xFF);\n  this.write += 3;\n  return this;\n};\n\n/**\n * Puts a 32-bit integer in this buffer in big-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt32 = function(i) {\n  this.accommodate(4);\n  this.data.setInt32(this.write, i);\n  this.write += 4;\n  return this;\n};\n\n/**\n * Puts a 16-bit integer in this buffer in little-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt16Le = function(i) {\n  this.accommodate(2);\n  this.data.setInt16(this.write, i, true);\n  this.write += 2;\n  return this;\n};\n\n/**\n * Puts a 24-bit integer in this buffer in little-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt24Le = function(i) {\n  this.accommodate(3);\n  this.data.setInt8(this.write, i >> 16 & 0xFF);\n  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);\n  this.write += 3;\n  return this;\n};\n\n/**\n * Puts a 32-bit integer in this buffer in little-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt32Le = function(i) {\n  this.accommodate(4);\n  this.data.setInt32(this.write, i, true);\n  this.write += 4;\n  return this;\n};\n\n/**\n * Puts an n-bit integer in this buffer in big-endian order.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt = function(i, n) {\n  _checkBitsParam(n);\n  this.accommodate(n / 8);\n  do {\n    n -= 8;\n    this.data.setInt8(this.write++, (i >> n) & 0xFF);\n  } while(n > 0);\n  return this;\n};\n\n/**\n * Puts a signed n-bit integer in this buffer in big-endian order. Two's\n * complement representation is used.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putSignedInt = function(i, n) {\n  _checkBitsParam(n);\n  this.accommodate(n / 8);\n  if(i < 0) {\n    i += 2 << (n - 1);\n  }\n  return this.putInt(i, n);\n};\n\n/**\n * Gets a byte from this buffer and advances the read pointer by 1.\n *\n * @return the byte.\n */\nutil.DataBuffer.prototype.getByte = function() {\n  return this.data.getInt8(this.read++);\n};\n\n/**\n * Gets a uint16 from this buffer in big-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.DataBuffer.prototype.getInt16 = function() {\n  var rval = this.data.getInt16(this.read);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in big-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.DataBuffer.prototype.getInt24 = function() {\n  var rval = (\n    this.data.getInt16(this.read) << 8 ^\n    this.data.getInt8(this.read + 2));\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in big-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.DataBuffer.prototype.getInt32 = function() {\n  var rval = this.data.getInt32(this.read);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets a uint16 from this buffer in little-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.DataBuffer.prototype.getInt16Le = function() {\n  var rval = this.data.getInt16(this.read, true);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in little-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.DataBuffer.prototype.getInt24Le = function() {\n  var rval = (\n    this.data.getInt8(this.read) ^\n    this.data.getInt16(this.read + 1, true) << 8);\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in little-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.DataBuffer.prototype.getInt32Le = function() {\n  var rval = this.data.getInt32(this.read, true);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets an n-bit integer from this buffer in big-endian order and advances the\n * read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.DataBuffer.prototype.getInt = function(n) {\n  _checkBitsParam(n);\n  var rval = 0;\n  do {\n    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.\n    rval = (rval << 8) + this.data.getInt8(this.read++);\n    n -= 8;\n  } while(n > 0);\n  return rval;\n};\n\n/**\n * Gets a signed n-bit integer from this buffer in big-endian order, using\n * two's complement, and advances the read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.DataBuffer.prototype.getSignedInt = function(n) {\n  // getInt checks n\n  var x = this.getInt(n);\n  var max = 2 << (n - 2);\n  if(x >= max) {\n    x -= max << 1;\n  }\n  return x;\n};\n\n/**\n * Reads bytes out into a UTF-8 string and clears them from the buffer.\n *\n * @param count the number of bytes to read, undefined or null for all.\n *\n * @return a UTF-8 string of bytes.\n */\nutil.DataBuffer.prototype.getBytes = function(count) {\n  // TODO: deprecate this method, it is poorly named and\n  // this.toString('binary') replaces it\n  // add a toTypedArray()/toArrayBuffer() function\n  var rval;\n  if(count) {\n    // read count bytes\n    count = Math.min(this.length(), count);\n    rval = this.data.slice(this.read, this.read + count);\n    this.read += count;\n  } else if(count === 0) {\n    rval = '';\n  } else {\n    // read all bytes, optimize to only copy when needed\n    rval = (this.read === 0) ? this.data : this.data.slice(this.read);\n    this.clear();\n  }\n  return rval;\n};\n\n/**\n * Gets a UTF-8 encoded string of the bytes from this buffer without modifying\n * the read pointer.\n *\n * @param count the number of bytes to get, omit to get all.\n *\n * @return a string full of UTF-8 encoded characters.\n */\nutil.DataBuffer.prototype.bytes = function(count) {\n  // TODO: deprecate this method, it is poorly named, add \"getString()\"\n  return (typeof(count) === 'undefined' ?\n    this.data.slice(this.read) :\n    this.data.slice(this.read, this.read + count));\n};\n\n/**\n * Gets a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n *\n * @return the byte.\n */\nutil.DataBuffer.prototype.at = function(i) {\n  return this.data.getUint8(this.read + i);\n};\n\n/**\n * Puts a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.setAt = function(i, b) {\n  this.data.setUint8(i, b);\n  return this;\n};\n\n/**\n * Gets the last byte without modifying the read pointer.\n *\n * @return the last byte.\n */\nutil.DataBuffer.prototype.last = function() {\n  return this.data.getUint8(this.write - 1);\n};\n\n/**\n * Creates a copy of this buffer.\n *\n * @return the copy.\n */\nutil.DataBuffer.prototype.copy = function() {\n  return new util.DataBuffer(this);\n};\n\n/**\n * Compacts this buffer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.compact = function() {\n  if(this.read > 0) {\n    var src = new Uint8Array(this.data.buffer, this.read);\n    var dst = new Uint8Array(src.byteLength);\n    dst.set(src);\n    this.data = new DataView(dst);\n    this.write -= this.read;\n    this.read = 0;\n  }\n  return this;\n};\n\n/**\n * Clears this buffer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.clear = function() {\n  this.data = new DataView(new ArrayBuffer(0));\n  this.read = this.write = 0;\n  return this;\n};\n\n/**\n * Shortens this buffer by triming bytes off of the end of this buffer.\n *\n * @param count the number of bytes to trim off.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.truncate = function(count) {\n  this.write = Math.max(0, this.length() - count);\n  this.read = Math.min(this.read, this.write);\n  return this;\n};\n\n/**\n * Converts this buffer to a hexadecimal string.\n *\n * @return a hexadecimal string.\n */\nutil.DataBuffer.prototype.toHex = function() {\n  var rval = '';\n  for(var i = this.read; i < this.data.byteLength; ++i) {\n    var b = this.data.getUint8(i);\n    if(b < 16) {\n      rval += '0';\n    }\n    rval += b.toString(16);\n  }\n  return rval;\n};\n\n/**\n * Converts this buffer to a string, using the given encoding. If no\n * encoding is given, 'utf8' (UTF-8) is used.\n *\n * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',\n *          'base64' (default: 'utf8').\n *\n * @return a string representation of the bytes in this buffer.\n */\nutil.DataBuffer.prototype.toString = function(encoding) {\n  var view = new Uint8Array(this.data, this.read, this.length());\n  encoding = encoding || 'utf8';\n\n  // encode to string\n  if(encoding === 'binary' || encoding === 'raw') {\n    return util.binary.raw.encode(view);\n  }\n  if(encoding === 'hex') {\n    return util.binary.hex.encode(view);\n  }\n  if(encoding === 'base64') {\n    return util.binary.base64.encode(view);\n  }\n\n  // decode to text\n  if(encoding === 'utf8') {\n    return util.text.utf8.decode(view);\n  }\n  if(encoding === 'utf16') {\n    return util.text.utf16.decode(view);\n  }\n\n  throw new Error('Invalid encoding: ' + encoding);\n};\n\n/** End Buffer w/UInt8Array backing */\n\n/**\n * Creates a buffer that stores bytes. A value may be given to put into the\n * buffer that is either a string of bytes or a UTF-16 string that will\n * be encoded using UTF-8 (to do the latter, specify 'utf8' as the encoding).\n *\n * @param [input] the bytes to wrap (as a string) or a UTF-16 string to encode\n *          as UTF-8.\n * @param [encoding] (default: 'raw', other: 'utf8').\n */\nutil.createBuffer = function(input, encoding) {\n  // TODO: deprecate, use new ByteBuffer() instead\n  encoding = encoding || 'raw';\n  if(input !== undefined && encoding === 'utf8') {\n    input = util.encodeUtf8(input);\n  }\n  return new util.ByteBuffer(input);\n};\n\n/**\n * Fills a string with a particular value. If you want the string to be a byte\n * string, pass in String.fromCharCode(theByte).\n *\n * @param c the character to fill the string with, use String.fromCharCode\n *          to fill the string with a byte value.\n * @param n the number of characters of value c to fill with.\n *\n * @return the filled string.\n */\nutil.fillString = function(c, n) {\n  var s = '';\n  while(n > 0) {\n    if(n & 1) {\n      s += c;\n    }\n    n >>>= 1;\n    if(n > 0) {\n      c += c;\n    }\n  }\n  return s;\n};\n\n/**\n * Performs a per byte XOR between two byte strings and returns the result as a\n * string of bytes.\n *\n * @param s1 first string of bytes.\n * @param s2 second string of bytes.\n * @param n the number of bytes to XOR.\n *\n * @return the XOR'd result.\n */\nutil.xorBytes = function(s1, s2, n) {\n  var s3 = '';\n  var b = '';\n  var t = '';\n  var i = 0;\n  var c = 0;\n  for(; n > 0; --n, ++i) {\n    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);\n    if(c >= 10) {\n      s3 += t;\n      t = '';\n      c = 0;\n    }\n    t += String.fromCharCode(b);\n    ++c;\n  }\n  s3 += t;\n  return s3;\n};\n\n/**\n * Converts a hex string into a 'binary' encoded string of bytes.\n *\n * @param hex the hexadecimal string to convert.\n *\n * @return the binary-encoded string of bytes.\n */\nutil.hexToBytes = function(hex) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.hex.decode instead.\"\n  var rval = '';\n  var i = 0;\n  if(hex.length & 1 == 1) {\n    // odd number of characters, convert first character alone\n    i = 1;\n    rval += String.fromCharCode(parseInt(hex[0], 16));\n  }\n  // convert 2 characters (1 byte) at a time\n  for(; i < hex.length; i += 2) {\n    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n  }\n  return rval;\n};\n\n/**\n * Converts a 'binary' encoded string of bytes to hex.\n *\n * @param bytes the byte string to convert.\n *\n * @return the string of hexadecimal characters.\n */\nutil.bytesToHex = function(bytes) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.hex.encode instead.\"\n  return util.createBuffer(bytes).toHex();\n};\n\n/**\n * Converts an 32-bit integer to 4-big-endian byte string.\n *\n * @param i the integer.\n *\n * @return the byte string.\n */\nutil.int32ToBytes = function(i) {\n  return (\n    String.fromCharCode(i >> 24 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n// base64 characters, reverse mapping\nvar _base64 =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nvar _base64Idx = [\n/*43 -43 = 0*/\n/*'+',  1,  2,  3,'/' */\n   62, -1, -1, -1, 63,\n\n/*'0','1','2','3','4','5','6','7','8','9' */\n   52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n\n/*15, 16, 17,'=', 19, 20, 21 */\n  -1, -1, -1, 64, -1, -1, -1,\n\n/*65 - 43 = 22*/\n/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,\n\n/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */\n   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n\n/*91 - 43 = 48 */\n/*48, 49, 50, 51, 52, 53 */\n  -1, -1, -1, -1, -1, -1,\n\n/*97 - 43 = 54*/\n/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */\n   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\n\n/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */\n   39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n];\n\n// base58 characters (Bitcoin alphabet)\nvar _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\n/**\n * Base64 encodes a 'binary' encoded string of bytes.\n *\n * @param input the binary encoded string of bytes to base64-encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the base64-encoded output.\n */\nutil.encode64 = function(input, maxline) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.base64.encode instead.\"\n  var line = '';\n  var output = '';\n  var chr1, chr2, chr3;\n  var i = 0;\n  while(i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n\n    // encode 4 character group\n    line += _base64.charAt(chr1 >> 2);\n    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\n    if(isNaN(chr2)) {\n      line += '==';\n    } else {\n      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\n      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);\n    }\n\n    if(maxline && line.length > maxline) {\n      output += line.substr(0, maxline) + '\\r\\n';\n      line = line.substr(maxline);\n    }\n  }\n  output += line;\n  return output;\n};\n\n/**\n * Base64 decodes a string into a 'binary' encoded string of bytes.\n *\n * @param input the base64-encoded input.\n *\n * @return the binary encoded string.\n */\nutil.decode64 = function(input) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.base64.decode instead.\"\n\n  // remove all non-base64 characters\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n  var output = '';\n  var enc1, enc2, enc3, enc4;\n  var i = 0;\n\n  while(i < input.length) {\n    enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n\n    output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));\n    if(enc3 !== 64) {\n      // decoded at least 2 bytes\n      output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));\n      if(enc4 !== 64) {\n        // decoded 3 bytes\n        output += String.fromCharCode(((enc3 & 3) << 6) | enc4);\n      }\n    }\n  }\n\n  return output;\n};\n\n/**\n * UTF-8 encodes the given UTF-16 encoded string (a standard JavaScript\n * string). Non-ASCII characters will be encoded as multiple bytes according\n * to UTF-8.\n *\n * @param str the string to encode.\n *\n * @return the UTF-8 encoded string.\n */\nutil.encodeUtf8 = function(str) {\n  return unescape(encodeURIComponent(str));\n};\n\n/**\n * Decodes a UTF-8 encoded string into a UTF-16 string.\n *\n * @param str the string to decode.\n *\n * @return the UTF-16 encoded string (standard JavaScript string).\n */\nutil.decodeUtf8 = function(str) {\n  return decodeURIComponent(escape(str));\n};\n\n// binary encoding/decoding tools\n// FIXME: Experimental. Do not use yet.\nutil.binary = {\n  raw: {},\n  hex: {},\n  base64: {},\n  base58: {},\n  baseN : {\n    encode: baseN.encode,\n    decode: baseN.decode\n  }\n};\n\n/**\n * Encodes a Uint8Array as a binary-encoded string. This encoding uses\n * a value between 0 and 255 for each character.\n *\n * @param bytes the Uint8Array to encode.\n *\n * @return the binary-encoded string.\n */\nutil.binary.raw.encode = function(bytes) {\n  return String.fromCharCode.apply(null, bytes);\n};\n\n/**\n * Decodes a binary-encoded string to a Uint8Array. This encoding uses\n * a value between 0 and 255 for each character.\n *\n * @param str the binary-encoded string to decode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.binary.raw.decode = function(str, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(str.length);\n  }\n  offset = offset || 0;\n  var j = offset;\n  for(var i = 0; i < str.length; ++i) {\n    out[j++] = str.charCodeAt(i);\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or\n * ByteBuffer as a string of hexadecimal characters.\n *\n * @param bytes the bytes to convert.\n *\n * @return the string of hexadecimal characters.\n */\nutil.binary.hex.encode = util.bytesToHex;\n\n/**\n * Decodes a hex-encoded string to a Uint8Array.\n *\n * @param hex the hexadecimal string to convert.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.binary.hex.decode = function(hex, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(Math.ceil(hex.length / 2));\n  }\n  offset = offset || 0;\n  var i = 0, j = offset;\n  if(hex.length & 1) {\n    // odd number of characters, convert first character alone\n    i = 1;\n    out[j++] = parseInt(hex[0], 16);\n  }\n  // convert 2 characters (1 byte) at a time\n  for(; i < hex.length; i += 2) {\n    out[j++] = parseInt(hex.substr(i, 2), 16);\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Base64-encodes a Uint8Array.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the base64-encoded output string.\n */\nutil.binary.base64.encode = function(input, maxline) {\n  var line = '';\n  var output = '';\n  var chr1, chr2, chr3;\n  var i = 0;\n  while(i < input.byteLength) {\n    chr1 = input[i++];\n    chr2 = input[i++];\n    chr3 = input[i++];\n\n    // encode 4 character group\n    line += _base64.charAt(chr1 >> 2);\n    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\n    if(isNaN(chr2)) {\n      line += '==';\n    } else {\n      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\n      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);\n    }\n\n    if(maxline && line.length > maxline) {\n      output += line.substr(0, maxline) + '\\r\\n';\n      line = line.substr(maxline);\n    }\n  }\n  output += line;\n  return output;\n};\n\n/**\n * Decodes a base64-encoded string to a Uint8Array.\n *\n * @param input the base64-encoded input string.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.binary.base64.decode = function(input, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(Math.ceil(input.length / 4) * 3);\n  }\n\n  // remove all non-base64 characters\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n  offset = offset || 0;\n  var enc1, enc2, enc3, enc4;\n  var i = 0, j = offset;\n\n  while(i < input.length) {\n    enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n\n    out[j++] = (enc1 << 2) | (enc2 >> 4);\n    if(enc3 !== 64) {\n      // decoded at least 2 bytes\n      out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);\n      if(enc4 !== 64) {\n        // decoded 3 bytes\n        out[j++] = ((enc3 & 3) << 6) | enc4;\n      }\n    }\n  }\n\n  // make sure result is the exact decoded length\n  return output ? (j - offset) : out.subarray(0, j);\n};\n\n// add support for base58 encoding/decoding with Bitcoin alphabet\nutil.binary.base58.encode = function(input, maxline) {\n  return util.binary.baseN.encode(input, _base58, maxline);\n};\nutil.binary.base58.decode = function(input, maxline) {\n  return util.binary.baseN.decode(input, _base58, maxline);\n};\n\n// text encoding/decoding tools\n// FIXME: Experimental. Do not use yet.\nutil.text = {\n  utf8: {},\n  utf16: {}\n};\n\n/**\n * Encodes the given string as UTF-8 in a Uint8Array.\n *\n * @param str the string to encode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.text.utf8.encode = function(str, output, offset) {\n  str = util.encodeUtf8(str);\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(str.length);\n  }\n  offset = offset || 0;\n  var j = offset;\n  for(var i = 0; i < str.length; ++i) {\n    out[j++] = str.charCodeAt(i);\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Decodes the UTF-8 contents from a Uint8Array.\n *\n * @param bytes the Uint8Array to decode.\n *\n * @return the resulting string.\n */\nutil.text.utf8.decode = function(bytes) {\n  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));\n};\n\n/**\n * Encodes the given string as UTF-16 in a Uint8Array.\n *\n * @param str the string to encode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.text.utf16.encode = function(str, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(str.length * 2);\n  }\n  var view = new Uint16Array(out.buffer);\n  offset = offset || 0;\n  var j = offset;\n  var k = offset;\n  for(var i = 0; i < str.length; ++i) {\n    view[k++] = str.charCodeAt(i);\n    j += 2;\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Decodes the UTF-16 contents from a Uint8Array.\n *\n * @param bytes the Uint8Array to decode.\n *\n * @return the resulting string.\n */\nutil.text.utf16.decode = function(bytes) {\n  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n};\n\n/**\n * Deflates the given data using a flash interface.\n *\n * @param api the flash interface.\n * @param bytes the data.\n * @param raw true to return only raw deflate data, false to include zlib\n *          header and trailer.\n *\n * @return the deflated data as a string.\n */\nutil.deflate = function(api, bytes, raw) {\n  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);\n\n  // strip zlib header and trailer if necessary\n  if(raw) {\n    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that\n    // there is a 4-byte DICT (alder-32) block before the data if\n    // its 5th bit is set\n    var start = 2;\n    var flg = bytes.charCodeAt(1);\n    if(flg & 0x20) {\n      start = 6;\n    }\n    // zlib trailer is 4 bytes of adler-32\n    bytes = bytes.substring(start, bytes.length - 4);\n  }\n\n  return bytes;\n};\n\n/**\n * Inflates the given data using a flash interface.\n *\n * @param api the flash interface.\n * @param bytes the data.\n * @param raw true if the incoming data has no zlib header or trailer and is\n *          raw DEFLATE data.\n *\n * @return the inflated data as a string, null on error.\n */\nutil.inflate = function(api, bytes, raw) {\n  // TODO: add zlib header and trailer if necessary/possible\n  var rval = api.inflate(util.encode64(bytes)).rval;\n  return (rval === null) ? null : util.decode64(rval);\n};\n\n/**\n * Sets a storage object.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param obj the storage object, null to remove.\n */\nvar _setStorageObject = function(api, id, obj) {\n  if(!api) {\n    throw new Error('WebStorage not available.');\n  }\n\n  var rval;\n  if(obj === null) {\n    rval = api.removeItem(id);\n  } else {\n    // json-encode and base64-encode object\n    obj = util.encode64(JSON.stringify(obj));\n    rval = api.setItem(id, obj);\n  }\n\n  // handle potential flash error\n  if(typeof(rval) !== 'undefined' && rval.rval !== true) {\n    var error = new Error(rval.error.message);\n    error.id = rval.error.id;\n    error.name = rval.error.name;\n    throw error;\n  }\n};\n\n/**\n * Gets a storage object.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n *\n * @return the storage object entry or null if none exists.\n */\nvar _getStorageObject = function(api, id) {\n  if(!api) {\n    throw new Error('WebStorage not available.');\n  }\n\n  // get the existing entry\n  var rval = api.getItem(id);\n\n  /* Note: We check api.init because we can't do (api == localStorage)\n    on IE because of \"Class doesn't support Automation\" exception. Only\n    the flash api has an init method so this works too, but we need a\n    better solution in the future. */\n\n  // flash returns item wrapped in an object, handle special case\n  if(api.init) {\n    if(rval.rval === null) {\n      if(rval.error) {\n        var error = new Error(rval.error.message);\n        error.id = rval.error.id;\n        error.name = rval.error.name;\n        throw error;\n      }\n      // no error, but also no item\n      rval = null;\n    } else {\n      rval = rval.rval;\n    }\n  }\n\n  // handle decoding\n  if(rval !== null) {\n    // base64-decode and json-decode data\n    rval = JSON.parse(util.decode64(rval));\n  }\n\n  return rval;\n};\n\n/**\n * Stores an item in local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param data the data for the item (any javascript object/primitive).\n */\nvar _setItem = function(api, id, key, data) {\n  // get storage object\n  var obj = _getStorageObject(api, id);\n  if(obj === null) {\n    // create a new storage object\n    obj = {};\n  }\n  // update key\n  obj[key] = data;\n\n  // set storage object\n  _setStorageObject(api, id, obj);\n};\n\n/**\n * Gets an item from local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n *\n * @return the item.\n */\nvar _getItem = function(api, id, key) {\n  // get storage object\n  var rval = _getStorageObject(api, id);\n  if(rval !== null) {\n    // return data at key\n    rval = (key in rval) ? rval[key] : null;\n  }\n\n  return rval;\n};\n\n/**\n * Removes an item from local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n */\nvar _removeItem = function(api, id, key) {\n  // get storage object\n  var obj = _getStorageObject(api, id);\n  if(obj !== null && key in obj) {\n    // remove key\n    delete obj[key];\n\n    // see if entry has no keys remaining\n    var empty = true;\n    for(var prop in obj) {\n      empty = false;\n      break;\n    }\n    if(empty) {\n      // remove entry entirely if no keys are left\n      obj = null;\n    }\n\n    // set storage object\n    _setStorageObject(api, id, obj);\n  }\n};\n\n/**\n * Clears the local disk storage identified by the given ID.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n */\nvar _clearItems = function(api, id) {\n  _setStorageObject(api, id, null);\n};\n\n/**\n * Calls a storage function.\n *\n * @param func the function to call.\n * @param args the arguments for the function.\n * @param location the location argument.\n *\n * @return the return value from the function.\n */\nvar _callStorageFunction = function(func, args, location) {\n  var rval = null;\n\n  // default storage types\n  if(typeof(location) === 'undefined') {\n    location = ['web', 'flash'];\n  }\n\n  // apply storage types in order of preference\n  var type;\n  var done = false;\n  var exception = null;\n  for(var idx in location) {\n    type = location[idx];\n    try {\n      if(type === 'flash' || type === 'both') {\n        if(args[0] === null) {\n          throw new Error('Flash local storage not available.');\n        }\n        rval = func.apply(this, args);\n        done = (type === 'flash');\n      }\n      if(type === 'web' || type === 'both') {\n        args[0] = localStorage;\n        rval = func.apply(this, args);\n        done = true;\n      }\n    } catch(ex) {\n      exception = ex;\n    }\n    if(done) {\n      break;\n    }\n  }\n\n  if(!done) {\n    throw exception;\n  }\n\n  return rval;\n};\n\n/**\n * Stores an item on local disk.\n *\n * The available types of local storage include 'flash', 'web', and 'both'.\n *\n * The type 'flash' refers to flash local storage (SharedObject). In order\n * to use flash local storage, the 'api' parameter must be valid. The type\n * 'web' refers to WebStorage, if supported by the browser. The type 'both'\n * refers to storing using both 'flash' and 'web', not just one or the\n * other.\n *\n * The location array should list the storage types to use in order of\n * preference:\n *\n * ['flash']: flash only storage\n * ['web']: web only storage\n * ['both']: try to store in both\n * ['flash','web']: store in flash first, but if not available, 'web'\n * ['web','flash']: store in web first, but if not available, 'flash'\n *\n * The location array defaults to: ['web', 'flash']\n *\n * @param api the flash interface, null to use only WebStorage.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param data the data for the item (any javascript object/primitive).\n * @param location an array with the preferred types of storage to use.\n */\nutil.setItem = function(api, id, key, data, location) {\n  _callStorageFunction(_setItem, arguments, location);\n};\n\n/**\n * Gets an item on local disk.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface, null to use only WebStorage.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param location an array with the preferred types of storage to use.\n *\n * @return the item.\n */\nutil.getItem = function(api, id, key, location) {\n  return _callStorageFunction(_getItem, arguments, location);\n};\n\n/**\n * Removes an item on local disk.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param location an array with the preferred types of storage to use.\n */\nutil.removeItem = function(api, id, key, location) {\n  _callStorageFunction(_removeItem, arguments, location);\n};\n\n/**\n * Clears the local disk storage identified by the given ID.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface if flash is available.\n * @param id the storage ID to use.\n * @param location an array with the preferred types of storage to use.\n */\nutil.clearItems = function(api, id, location) {\n  _callStorageFunction(_clearItems, arguments, location);\n};\n\n/**\n * Parses the scheme, host, and port from an http(s) url.\n *\n * @param str the url string.\n *\n * @return the parsed url object or null if the url is invalid.\n */\nutil.parseUrl = function(str) {\n  // FIXME: this regex looks a bit broken\n  var regex = /^(https?):\\/\\/([^:&^\\/]*):?(\\d*)(.*)$/g;\n  regex.lastIndex = 0;\n  var m = regex.exec(str);\n  var url = (m === null) ? null : {\n    full: str,\n    scheme: m[1],\n    host: m[2],\n    port: m[3],\n    path: m[4]\n  };\n  if(url) {\n    url.fullHost = url.host;\n    if(url.port) {\n      if(url.port !== 80 && url.scheme === 'http') {\n        url.fullHost += ':' + url.port;\n      } else if(url.port !== 443 && url.scheme === 'https') {\n        url.fullHost += ':' + url.port;\n      }\n    } else if(url.scheme === 'http') {\n      url.port = 80;\n    } else if(url.scheme === 'https') {\n      url.port = 443;\n    }\n    url.full = url.scheme + '://' + url.fullHost;\n  }\n  return url;\n};\n\n/* Storage for query variables */\nvar _queryVariables = null;\n\n/**\n * Returns the window location query variables. Query is parsed on the first\n * call and the same object is returned on subsequent calls. The mapping\n * is from keys to an array of values. Parameters without values will have\n * an object key set but no value added to the value array. Values are\n * unescaped.\n *\n * ...?k1=v1&k2=v2:\n * {\n *   \"k1\": [\"v1\"],\n *   \"k2\": [\"v2\"]\n * }\n *\n * ...?k1=v1&k1=v2:\n * {\n *   \"k1\": [\"v1\", \"v2\"]\n * }\n *\n * ...?k1=v1&k2:\n * {\n *   \"k1\": [\"v1\"],\n *   \"k2\": []\n * }\n *\n * ...?k1=v1&k1:\n * {\n *   \"k1\": [\"v1\"]\n * }\n *\n * ...?k1&k1:\n * {\n *   \"k1\": []\n * }\n *\n * @param query the query string to parse (optional, default to cached\n *          results from parsing window location search query).\n *\n * @return object mapping keys to variables.\n */\nutil.getQueryVariables = function(query) {\n  var parse = function(q) {\n    var rval = {};\n    var kvpairs = q.split('&');\n    for(var i = 0; i < kvpairs.length; i++) {\n      var pos = kvpairs[i].indexOf('=');\n      var key;\n      var val;\n      if(pos > 0) {\n        key = kvpairs[i].substring(0, pos);\n        val = kvpairs[i].substring(pos + 1);\n      } else {\n        key = kvpairs[i];\n        val = null;\n      }\n      if(!(key in rval)) {\n        rval[key] = [];\n      }\n      // disallow overriding object prototype keys\n      if(!(key in Object.prototype) && val !== null) {\n        rval[key].push(unescape(val));\n      }\n    }\n    return rval;\n  };\n\n   var rval;\n   if(typeof(query) === 'undefined') {\n     // set cached variables if needed\n     if(_queryVariables === null) {\n       if(typeof(window) !== 'undefined' && window.location && window.location.search) {\n          // parse window search query\n          _queryVariables = parse(window.location.search.substring(1));\n       } else {\n          // no query variables available\n          _queryVariables = {};\n       }\n     }\n     rval = _queryVariables;\n   } else {\n     // parse given query\n     rval = parse(query);\n   }\n   return rval;\n};\n\n/**\n * Parses a fragment into a path and query. This method will take a URI\n * fragment and break it up as if it were the main URI. For example:\n *    /bar/baz?a=1&b=2\n * results in:\n *    {\n *       path: [\"bar\", \"baz\"],\n *       query: {\"k1\": [\"v1\"], \"k2\": [\"v2\"]}\n *    }\n *\n * @return object with a path array and query object.\n */\nutil.parseFragment = function(fragment) {\n  // default to whole fragment\n  var fp = fragment;\n  var fq = '';\n  // split into path and query if possible at the first '?'\n  var pos = fragment.indexOf('?');\n  if(pos > 0) {\n    fp = fragment.substring(0, pos);\n    fq = fragment.substring(pos + 1);\n  }\n  // split path based on '/' and ignore first element if empty\n  var path = fp.split('/');\n  if(path.length > 0 && path[0] === '') {\n    path.shift();\n  }\n  // convert query into object\n  var query = (fq === '') ? {} : util.getQueryVariables(fq);\n\n  return {\n    pathString: fp,\n    queryString: fq,\n    path: path,\n    query: query\n  };\n};\n\n/**\n * Makes a request out of a URI-like request string. This is intended to\n * be used where a fragment id (after a URI '#') is parsed as a URI with\n * path and query parts. The string should have a path beginning and\n * delimited by '/' and optional query parameters following a '?'. The\n * query should be a standard URL set of key value pairs delimited by\n * '&'. For backwards compatibility the initial '/' on the path is not\n * required. The request object has the following API, (fully described\n * in the method code):\n *    {\n *       path: <the path string part>.\n *       query: <the query string part>,\n *       getPath(i): get part or all of the split path array,\n *       getQuery(k, i): get part or all of a query key array,\n *       getQueryLast(k, _default): get last element of a query key array.\n *    }\n *\n * @return object with request parameters.\n */\nutil.makeRequest = function(reqString) {\n  var frag = util.parseFragment(reqString);\n  var req = {\n    // full path string\n    path: frag.pathString,\n    // full query string\n    query: frag.queryString,\n    /**\n     * Get path or element in path.\n     *\n     * @param i optional path index.\n     *\n     * @return path or part of path if i provided.\n     */\n    getPath: function(i) {\n      return (typeof(i) === 'undefined') ? frag.path : frag.path[i];\n    },\n    /**\n     * Get query, values for a key, or value for a key index.\n     *\n     * @param k optional query key.\n     * @param i optional query key index.\n     *\n     * @return query, values for a key, or value for a key index.\n     */\n    getQuery: function(k, i) {\n      var rval;\n      if(typeof(k) === 'undefined') {\n        rval = frag.query;\n      } else {\n        rval = frag.query[k];\n        if(rval && typeof(i) !== 'undefined') {\n           rval = rval[i];\n        }\n      }\n      return rval;\n    },\n    getQueryLast: function(k, _default) {\n      var rval;\n      var vals = req.getQuery(k);\n      if(vals) {\n        rval = vals[vals.length - 1];\n      } else {\n        rval = _default;\n      }\n      return rval;\n    }\n  };\n  return req;\n};\n\n/**\n * Makes a URI out of a path, an object with query parameters, and a\n * fragment. Uses jQuery.param() internally for query string creation.\n * If the path is an array, it will be joined with '/'.\n *\n * @param path string path or array of strings.\n * @param query object with query parameters. (optional)\n * @param fragment fragment string. (optional)\n *\n * @return string object with request parameters.\n */\nutil.makeLink = function(path, query, fragment) {\n  // join path parts if needed\n  path = jQuery.isArray(path) ? path.join('/') : path;\n\n  var qstr = jQuery.param(query || {});\n  fragment = fragment || '';\n  return path +\n    ((qstr.length > 0) ? ('?' + qstr) : '') +\n    ((fragment.length > 0) ? ('#' + fragment) : '');\n};\n\n/**\n * Follows a path of keys deep into an object hierarchy and set a value.\n * If a key does not exist or it's value is not an object, create an\n * object in it's place. This can be destructive to a object tree if\n * leaf nodes are given as non-final path keys.\n * Used to avoid exceptions from missing parts of the path.\n *\n * @param object the starting object.\n * @param keys an array of string keys.\n * @param value the value to set.\n */\nutil.setPath = function(object, keys, value) {\n  // need to start at an object\n  if(typeof(object) === 'object' && object !== null) {\n    var i = 0;\n    var len = keys.length;\n    while(i < len) {\n      var next = keys[i++];\n      if(i == len) {\n        // last\n        object[next] = value;\n      } else {\n        // more\n        var hasNext = (next in object);\n        if(!hasNext ||\n          (hasNext && typeof(object[next]) !== 'object') ||\n          (hasNext && object[next] === null)) {\n          object[next] = {};\n        }\n        object = object[next];\n      }\n    }\n  }\n};\n\n/**\n * Follows a path of keys deep into an object hierarchy and return a value.\n * If a key does not exist, create an object in it's place.\n * Used to avoid exceptions from missing parts of the path.\n *\n * @param object the starting object.\n * @param keys an array of string keys.\n * @param _default value to return if path not found.\n *\n * @return the value at the path if found, else default if given, else\n *         undefined.\n */\nutil.getPath = function(object, keys, _default) {\n  var i = 0;\n  var len = keys.length;\n  var hasNext = true;\n  while(hasNext && i < len &&\n    typeof(object) === 'object' && object !== null) {\n    var next = keys[i++];\n    hasNext = next in object;\n    if(hasNext) {\n      object = object[next];\n    }\n  }\n  return (hasNext ? object : _default);\n};\n\n/**\n * Follow a path of keys deep into an object hierarchy and delete the\n * last one. If a key does not exist, do nothing.\n * Used to avoid exceptions from missing parts of the path.\n *\n * @param object the starting object.\n * @param keys an array of string keys.\n */\nutil.deletePath = function(object, keys) {\n  // need to start at an object\n  if(typeof(object) === 'object' && object !== null) {\n    var i = 0;\n    var len = keys.length;\n    while(i < len) {\n      var next = keys[i++];\n      if(i == len) {\n        // last\n        delete object[next];\n      } else {\n        // more\n        if(!(next in object) ||\n          (typeof(object[next]) !== 'object') ||\n          (object[next] === null)) {\n           break;\n        }\n        object = object[next];\n      }\n    }\n  }\n};\n\n/**\n * Check if an object is empty.\n *\n * Taken from:\n * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937\n *\n * @param object the object to check.\n */\nutil.isEmpty = function(obj) {\n  for(var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Format with simple printf-style interpolation.\n *\n * %%: literal '%'\n * %s,%o: convert next argument into a string.\n *\n * @param format the string to format.\n * @param ... arguments to interpolate into the format string.\n */\nutil.format = function(format) {\n  var re = /%./g;\n  // current match\n  var match;\n  // current part\n  var part;\n  // current arg index\n  var argi = 0;\n  // collected parts to recombine later\n  var parts = [];\n  // last index found\n  var last = 0;\n  // loop while matches remain\n  while((match = re.exec(format))) {\n    part = format.substring(last, re.lastIndex - 2);\n    // don't add empty strings (ie, parts between %s%s)\n    if(part.length > 0) {\n      parts.push(part);\n    }\n    last = re.lastIndex;\n    // switch on % code\n    var code = match[0][1];\n    switch(code) {\n    case 's':\n    case 'o':\n      // check if enough arguments were given\n      if(argi < arguments.length) {\n        parts.push(arguments[argi++ + 1]);\n      } else {\n        parts.push('<?>');\n      }\n      break;\n    // FIXME: do proper formating for numbers, etc\n    //case 'f':\n    //case 'd':\n    case '%':\n      parts.push('%');\n      break;\n    default:\n      parts.push('<%' + code + '?>');\n    }\n  }\n  // add trailing part of format string\n  parts.push(format.substring(last));\n  return parts.join('');\n};\n\n/**\n * Formats a number.\n *\n * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/\n */\nutil.formatNumber = function(number, decimals, dec_point, thousands_sep) {\n  // http://kevin.vanzonneveld.net\n  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // +     bugfix by: Michael White (http://crestidg.com)\n  // +     bugfix by: Benjamin Lupton\n  // +     bugfix by: Allan Jensen (http://www.winternet.no)\n  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n  // *     example 1: number_format(1234.5678, 2, '.', '');\n  // *     returns 1: 1234.57\n\n  var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;\n  var d = dec_point === undefined ? ',' : dec_point;\n  var t = thousands_sep === undefined ?\n   '.' : thousands_sep, s = n < 0 ? '-' : '';\n  var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';\n  var j = (i.length > 3) ? i.length % 3 : 0;\n  return s + (j ? i.substr(0, j) + t : '') +\n    i.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1' + t) +\n    (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');\n};\n\n/**\n * Formats a byte size.\n *\n * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/\n */\nutil.formatSize = function(size) {\n  if(size >= 1073741824) {\n    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';\n  } else if(size >= 1048576) {\n    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';\n  } else if(size >= 1024) {\n    size = util.formatNumber(size / 1024, 0) + ' KiB';\n  } else {\n    size = util.formatNumber(size, 0) + ' bytes';\n  }\n  return size;\n};\n\n/**\n * Converts an IPv4 or IPv6 string representation into bytes (in network order).\n *\n * @param ip the IPv4 or IPv6 address to convert.\n *\n * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't\n *         be parsed.\n */\nutil.bytesFromIP = function(ip) {\n  if(ip.indexOf('.') !== -1) {\n    return util.bytesFromIPv4(ip);\n  }\n  if(ip.indexOf(':') !== -1) {\n    return util.bytesFromIPv6(ip);\n  }\n  return null;\n};\n\n/**\n * Converts an IPv4 string representation into bytes (in network order).\n *\n * @param ip the IPv4 address to convert.\n *\n * @return the 4-byte address or null if the address can't be parsed.\n */\nutil.bytesFromIPv4 = function(ip) {\n  ip = ip.split('.');\n  if(ip.length !== 4) {\n    return null;\n  }\n  var b = util.createBuffer();\n  for(var i = 0; i < ip.length; ++i) {\n    var num = parseInt(ip[i], 10);\n    if(isNaN(num)) {\n      return null;\n    }\n    b.putByte(num);\n  }\n  return b.getBytes();\n};\n\n/**\n * Converts an IPv6 string representation into bytes (in network order).\n *\n * @param ip the IPv6 address to convert.\n *\n * @return the 16-byte address or null if the address can't be parsed.\n */\nutil.bytesFromIPv6 = function(ip) {\n  var blanks = 0;\n  ip = ip.split(':').filter(function(e) {\n    if(e.length === 0) ++blanks;\n    return true;\n  });\n  var zeros = (8 - ip.length + blanks) * 2;\n  var b = util.createBuffer();\n  for(var i = 0; i < 8; ++i) {\n    if(!ip[i] || ip[i].length === 0) {\n      b.fillWithByte(0, zeros);\n      zeros = 0;\n      continue;\n    }\n    var bytes = util.hexToBytes(ip[i]);\n    if(bytes.length < 2) {\n      b.putByte(0);\n    }\n    b.putBytes(bytes);\n  }\n  return b.getBytes();\n};\n\n/**\n * Converts 4-bytes into an IPv4 string representation or 16-bytes into\n * an IPv6 string representation. The bytes must be in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,\n *         respectively, are given, otherwise null.\n */\nutil.bytesToIP = function(bytes) {\n  if(bytes.length === 4) {\n    return util.bytesToIPv4(bytes);\n  }\n  if(bytes.length === 16) {\n    return util.bytesToIPv6(bytes);\n  }\n  return null;\n};\n\n/**\n * Converts 4-bytes into an IPv4 string representation. The bytes must be\n * in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv4 string representation or null for an invalid # of bytes.\n */\nutil.bytesToIPv4 = function(bytes) {\n  if(bytes.length !== 4) {\n    return null;\n  }\n  var ip = [];\n  for(var i = 0; i < bytes.length; ++i) {\n    ip.push(bytes.charCodeAt(i));\n  }\n  return ip.join('.');\n};\n\n/**\n * Converts 16-bytes into an IPv16 string representation. The bytes must be\n * in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv16 string representation or null for an invalid # of bytes.\n */\nutil.bytesToIPv6 = function(bytes) {\n  if(bytes.length !== 16) {\n    return null;\n  }\n  var ip = [];\n  var zeroGroups = [];\n  var zeroMaxGroup = 0;\n  for(var i = 0; i < bytes.length; i += 2) {\n    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);\n    // canonicalize zero representation\n    while(hex[0] === '0' && hex !== '0') {\n      hex = hex.substr(1);\n    }\n    if(hex === '0') {\n      var last = zeroGroups[zeroGroups.length - 1];\n      var idx = ip.length;\n      if(!last || idx !== last.end + 1) {\n        zeroGroups.push({start: idx, end: idx});\n      } else {\n        last.end = idx;\n        if((last.end - last.start) >\n          (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {\n          zeroMaxGroup = zeroGroups.length - 1;\n        }\n      }\n    }\n    ip.push(hex);\n  }\n  if(zeroGroups.length > 0) {\n    var group = zeroGroups[zeroMaxGroup];\n    // only shorten group of length > 0\n    if(group.end - group.start > 0) {\n      ip.splice(group.start, group.end - group.start + 1, '');\n      if(group.start === 0) {\n        ip.unshift('');\n      }\n      if(group.end === 7) {\n        ip.push('');\n      }\n    }\n  }\n  return ip.join(':');\n};\n\n/**\n * Estimates the number of processes that can be run concurrently. If\n * creating Web Workers, keep in mind that the main JavaScript process needs\n * its own core.\n *\n * @param options the options to use:\n *          update true to force an update (not use the cached value).\n * @param callback(err, max) called once the operation completes.\n */\nutil.estimateCores = function(options, callback) {\n  if(typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  if('cores' in util && !options.update) {\n    return callback(null, util.cores);\n  }\n  if(typeof navigator !== 'undefined' &&\n    'hardwareConcurrency' in navigator &&\n    navigator.hardwareConcurrency > 0) {\n    util.cores = navigator.hardwareConcurrency;\n    return callback(null, util.cores);\n  }\n  if(typeof Worker === 'undefined') {\n    // workers not available\n    util.cores = 1;\n    return callback(null, util.cores);\n  }\n  if(typeof Blob === 'undefined') {\n    // can't estimate, default to 2\n    util.cores = 2;\n    return callback(null, util.cores);\n  }\n\n  // create worker concurrency estimation code as blob\n  var blobUrl = URL.createObjectURL(new Blob(['(',\n    function() {\n      self.addEventListener('message', function(e) {\n        // run worker for 4 ms\n        var st = Date.now();\n        var et = st + 4;\n        while(Date.now() < et);\n        self.postMessage({st: st, et: et});\n      });\n    }.toString(),\n  ')()'], {type: 'application/javascript'}));\n\n  // take 5 samples using 16 workers\n  sample([], 5, 16);\n\n  function sample(max, samples, numWorkers) {\n    if(samples === 0) {\n      // get overlap average\n      var avg = Math.floor(max.reduce(function(avg, x) {\n        return avg + x;\n      }, 0) / max.length);\n      util.cores = Math.max(1, avg);\n      URL.revokeObjectURL(blobUrl);\n      return callback(null, util.cores);\n    }\n    map(numWorkers, function(err, results) {\n      max.push(reduce(numWorkers, results));\n      sample(max, samples - 1, numWorkers);\n    });\n  }\n\n  function map(numWorkers, callback) {\n    var workers = [];\n    var results = [];\n    for(var i = 0; i < numWorkers; ++i) {\n      var worker = new Worker(blobUrl);\n      worker.addEventListener('message', function(e) {\n        results.push(e.data);\n        if(results.length === numWorkers) {\n          for(var i = 0; i < numWorkers; ++i) {\n            workers[i].terminate();\n          }\n          callback(null, results);\n        }\n      });\n      workers.push(worker);\n    }\n    for(var i = 0; i < numWorkers; ++i) {\n      workers[i].postMessage(i);\n    }\n  }\n\n  function reduce(numWorkers, results) {\n    // find overlapping time windows\n    var overlaps = [];\n    for(var n = 0; n < numWorkers; ++n) {\n      var r1 = results[n];\n      var overlap = overlaps[n] = [];\n      for(var i = 0; i < numWorkers; ++i) {\n        if(n === i) {\n          continue;\n        }\n        var r2 = results[i];\n        if((r1.st > r2.st && r1.st < r2.et) ||\n          (r2.st > r1.st && r2.st < r1.et)) {\n          overlap.push(i);\n        }\n      }\n    }\n    // get maximum overlaps ... don't include overlapping worker itself\n    // as the main JS process was also being scheduled during the work and\n    // would have to be subtracted from the estimate anyway\n    return overlaps.reduce(function(max, overlap) {\n      return Math.max(max, overlap.length);\n    }, 0);\n  }\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://blues/./node_modules/node-forge/lib/util.js?");

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack://blues/./node_modules/node-libs-browser/mock/empty.js?");

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports =  true && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule =  true && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttrue\n\t) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\t\treturn punycode;\n\t\t}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n\n}(this));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/node-libs-browser/node_modules/punycode/punycode.js?");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/path-browserify/index.js?");

/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nif (typeof process === 'undefined' ||\n    !process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/process-nextick-args/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://blues/./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/querystring-es3/decode.js?");

/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/querystring-es3/encode.js?");

/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.decode = exports.parse = __webpack_require__(/*! ./decode */ \"./node_modules/querystring-es3/decode.js\");\nexports.encode = exports.stringify = __webpack_require__(/*! ./encode */ \"./node_modules/querystring-es3/encode.js\");\n\n\n//# sourceURL=webpack://blues/./node_modules/querystring-es3/index.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/AsyncAlgorithm.js":
/*!*********************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/AsyncAlgorithm.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/rdf-canonize/lib/util.js\");\n\nmodule.exports = class AsyncAlgorithm {\n  constructor({\n    maxCallStackDepth = 500,\n    maxTotalCallStackDepth = 0xFFFFFFFF,\n    // milliseconds\n    timeSlice = 10\n  } = {}) {\n    this.schedule = {};\n    this.schedule.MAX_DEPTH = maxCallStackDepth;\n    this.schedule.MAX_TOTAL_DEPTH = maxTotalCallStackDepth;\n    this.schedule.depth = 0;\n    this.schedule.totalDepth = 0;\n    this.schedule.timeSlice = timeSlice;\n  }\n\n  // do some work in a time slice, but in serial\n  doWork(fn, callback) {\n    const schedule = this.schedule;\n\n    if(schedule.totalDepth >= schedule.MAX_TOTAL_DEPTH) {\n      return callback(new Error(\n        'Maximum total call stack depth exceeded; canonicalization aborting.'));\n    }\n\n    (function work() {\n      if(schedule.depth === schedule.MAX_DEPTH) {\n        // stack too deep, run on next tick\n        schedule.depth = 0;\n        schedule.running = false;\n        return util.nextTick(work);\n      }\n\n      // if not yet running, force run\n      const now = Date.now();\n      if(!schedule.running) {\n        schedule.start = Date.now();\n        schedule.deadline = schedule.start + schedule.timeSlice;\n      }\n\n      // TODO: should also include an estimate of expectedWorkTime\n      if(now < schedule.deadline) {\n        schedule.running = true;\n        schedule.depth++;\n        schedule.totalDepth++;\n        return fn((err, result) => {\n          schedule.depth--;\n          schedule.totalDepth--;\n          callback(err, result);\n        });\n      }\n\n      // not enough time left in this slice, run after letting browser\n      // do some other things\n      schedule.depth = 0;\n      schedule.running = false;\n      util.setImmediate(work);\n    })();\n  }\n\n  // asynchronously loop\n  forEach(iterable, fn, callback) {\n    const self = this;\n    let iterator;\n    let idx = 0;\n    let length;\n    if(Array.isArray(iterable)) {\n      length = iterable.length;\n      iterator = () => {\n        if(idx === length) {\n          return false;\n        }\n        iterator.value = iterable[idx++];\n        iterator.key = idx;\n        return true;\n      };\n    } else {\n      const keys = Object.keys(iterable);\n      length = keys.length;\n      iterator = () => {\n        if(idx === length) {\n          return false;\n        }\n        iterator.key = keys[idx++];\n        iterator.value = iterable[iterator.key];\n        return true;\n      };\n    }\n\n    (function iterate(err) {\n      if(err) {\n        return callback(err);\n      }\n      if(iterator()) {\n        return self.doWork(() => fn(iterator.value, iterator.key, iterate));\n      }\n      callback();\n    })();\n  }\n\n  // asynchronous waterfall\n  waterfall(fns, callback) {\n    const self = this;\n    self.forEach(\n      fns, (fn, idx, callback) => self.doWork(fn, callback), callback);\n  }\n\n  // asynchronous while\n  whilst(condition, fn, callback) {\n    const self = this;\n    (function loop(err) {\n      if(err) {\n        return callback(err);\n      }\n      if(!condition()) {\n        return callback();\n      }\n      self.doWork(fn, loop);\n    })();\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/AsyncAlgorithm.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/IdentifierIssuer.js":
/*!***********************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/IdentifierIssuer.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/rdf-canonize/lib/util.js\");\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   */\n  constructor(prefix) {\n    this.prefix = prefix;\n    this.counter = 0;\n    this.existing = {};\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n  clone() {\n    const copy = new IdentifierIssuer(this.prefix);\n    copy.counter = this.counter;\n    copy.existing = util.clone(this.existing);\n    return copy;\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    if(old && old in this.existing) {\n      return this.existing[old];\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter += 1;\n\n    // save mapping\n    if(old) {\n      this.existing[old] = identifier;\n    }\n\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n  hasId(old) {\n    return (old in this.existing);\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/IdentifierIssuer.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/MessageDigest-browser.js":
/*!****************************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/MessageDigest-browser.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst forge = __webpack_require__(/*! node-forge/lib/forge */ \"./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! node-forge/lib/md */ \"./node_modules/node-forge/lib/md.js\");\n__webpack_require__(/*! node-forge/lib/sha1 */ \"./node_modules/node-forge/lib/sha1.js\");\n__webpack_require__(/*! node-forge/lib/sha256 */ \"./node_modules/node-forge/lib/sha256.js\");\n\nmodule.exports = class MessageDigest {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param algorithm the algorithm to use.\n   */\n  constructor(algorithm) {\n    this.md = forge.md[algorithm].create();\n  }\n\n  update(msg) {\n    this.md.update(msg, 'utf8');\n  }\n\n  digest() {\n    return this.md.digest().toHex();\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/MessageDigest-browser.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/NQuads.js":
/*!*************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/NQuads.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst TERMS = ['subject', 'predicate', 'object', 'graph'];\nconst RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nconst RDF_LANGSTRING = RDF + 'langString';\nconst XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';\n\n// build regexes\nconst REGEX = {};\n(() => {\n  const iri = '(?:<([^:]+:[^>]*)>)';\n  // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL\n  const PN_CHARS_BASE =\n    'A-Z' + 'a-z' +\n    '\\u00C0-\\u00D6' +\n    '\\u00D8-\\u00F6' +\n    '\\u00F8-\\u02FF' +\n    '\\u0370-\\u037D' +\n    '\\u037F-\\u1FFF' +\n    '\\u200C-\\u200D' +\n    '\\u2070-\\u218F' +\n    '\\u2C00-\\u2FEF' +\n    '\\u3001-\\uD7FF' +\n    '\\uF900-\\uFDCF' +\n    '\\uFDF0-\\uFFFD';\n    // TODO:\n    //'\\u10000-\\uEFFFF';\n  const PN_CHARS_U =\n    PN_CHARS_BASE +\n    '_';\n  const PN_CHARS =\n    PN_CHARS_U +\n    '0-9' +\n    '-' +\n    '\\u00B7' +\n    '\\u0300-\\u036F' +\n    '\\u203F-\\u2040';\n  const BLANK_NODE_LABEL =\n    '(_:' +\n      '(?:[' + PN_CHARS_U + '0-9])' +\n      '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' +\n    ')';\n  const bnode = BLANK_NODE_LABEL;\n  const plain = '\"([^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*)\"';\n  const datatype = '(?:\\\\^\\\\^' + iri + ')';\n  const language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';\n  const literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';\n  const ws = '[ \\\\t]+';\n  const wso = '[ \\\\t]*';\n\n  // define quad part regexes\n  const subject = '(?:' + iri + '|' + bnode + ')' + ws;\n  const property = iri + ws;\n  const object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;\n  const graphName = '(?:\\\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\\\.))';\n\n  // end of line and empty regexes\n  REGEX.eoln = /(?:\\r\\n)|(?:\\n)|(?:\\r)/g;\n  REGEX.empty = new RegExp('^' + wso + '$');\n\n  // full quad regex\n  REGEX.quad = new RegExp(\n    '^' + wso + subject + property + object + graphName + wso + '$');\n})();\n\nmodule.exports = class NQuads {\n  /**\n   * Parses RDF in the form of N-Quads.\n   *\n   * @param input the N-Quads input to parse.\n   *\n   * @return an RDF dataset (an array of quads per http://rdf.js.org/).\n   */\n  static parse(input) {\n    // build RDF dataset\n    const dataset = [];\n\n    const graphs = {};\n\n    // split N-Quad input into lines\n    const lines = input.split(REGEX.eoln);\n    let lineNumber = 0;\n    for(const line of lines) {\n      lineNumber++;\n\n      // skip empty lines\n      if(REGEX.empty.test(line)) {\n        continue;\n      }\n\n      // parse quad\n      const match = line.match(REGEX.quad);\n      if(match === null) {\n        throw new Error('N-Quads parse error on line ' + lineNumber + '.');\n      }\n\n      // create RDF quad\n      const quad = {};\n\n      // get subject\n      if(match[1] !== undefined) {\n        quad.subject = {termType: 'NamedNode', value: match[1]};\n      } else {\n        quad.subject = {termType: 'BlankNode', value: match[2]};\n      }\n\n      // get predicate\n      quad.predicate = {termType: 'NamedNode', value: match[3]};\n\n      // get object\n      if(match[4] !== undefined) {\n        quad.object = {termType: 'NamedNode', value: match[4]};\n      } else if(match[5] !== undefined) {\n        quad.object = {termType: 'BlankNode', value: match[5]};\n      } else {\n        quad.object = {\n          termType: 'Literal',\n          value: undefined,\n          datatype: {\n            termType: 'NamedNode'\n          }\n        };\n        if(match[7] !== undefined) {\n          quad.object.datatype.value = match[7];\n        } else if(match[8] !== undefined) {\n          quad.object.datatype.value = RDF_LANGSTRING;\n          quad.object.language = match[8];\n        } else {\n          quad.object.datatype.value = XSD_STRING;\n        }\n        quad.object.value = _unescape(match[6]);\n      }\n\n      // get graph\n      if(match[9] !== undefined) {\n        quad.graph = {\n          termType: 'NamedNode',\n          value: match[9]\n        };\n      } else if(match[10] !== undefined) {\n        quad.graph = {\n          termType: 'BlankNode',\n          value: match[10]\n        };\n      } else {\n        quad.graph = {\n          termType: 'DefaultGraph',\n          value: ''\n        };\n      }\n\n      // only add quad if it is unique in its graph\n      if(!(quad.graph.value in graphs)) {\n        graphs[quad.graph.value] = [quad];\n        dataset.push(quad);\n      } else {\n        let unique = true;\n        const quads = graphs[quad.graph.value];\n        for(const q of quads) {\n          if(_compareTriples(q, quad)) {\n            unique = false;\n            break;\n          }\n        }\n        if(unique) {\n          quads.push(quad);\n          dataset.push(quad);\n        }\n      }\n    }\n\n    return dataset;\n  }\n\n  /**\n   * Converts an RDF dataset to N-Quads.\n   *\n   * @param dataset (array of quads) the RDF dataset to convert.\n   *\n   * @return the N-Quads string.\n   */\n  static serialize(dataset) {\n    if(!Array.isArray(dataset)) {\n      dataset = NQuads.legacyDatasetToQuads(dataset);\n    }\n    const quads = [];\n    for(const quad of dataset) {\n      quads.push(NQuads.serializeQuad(quad));\n    }\n    return quads.sort().join('');\n  }\n\n  /**\n   * Converts an RDF quad to an N-Quad string (a single quad).\n   *\n   * @param quad the RDF quad convert.\n   *\n   * @return the N-Quad string.\n   */\n  static serializeQuad(quad) {\n    const s = quad.subject;\n    const p = quad.predicate;\n    const o = quad.object;\n    const g = quad.graph;\n\n    let nquad = '';\n\n    // subject and predicate can only be NamedNode or BlankNode\n    [s, p].forEach(term => {\n      if(term.termType === 'NamedNode') {\n        nquad += '<' + term.value + '>';\n      } else {\n        nquad += term.value;\n      }\n      nquad += ' ';\n    });\n\n    // object is NamedNode, BlankNode, or Literal\n    if(o.termType === 'NamedNode') {\n      nquad += '<' + o.value + '>';\n    } else if(o.termType === 'BlankNode') {\n      nquad += o.value;\n    } else {\n      nquad += '\"' + _escape(o.value) + '\"';\n      if(o.datatype.value === RDF_LANGSTRING) {\n        if(o.language) {\n          nquad += '@' + o.language;\n        }\n      } else if(o.datatype.value !== XSD_STRING) {\n        nquad += '^^<' + o.datatype.value + '>';\n      }\n    }\n\n    // graph can only be NamedNode or BlankNode (or DefaultGraph, but that\n    // does not add to `nquad`)\n    if(g.termType === 'NamedNode') {\n      nquad += ' <' + g.value + '>';\n    } else if(g.termType === 'BlankNode') {\n      nquad += ' ' + g.value;\n    }\n\n    nquad += ' .\\n';\n    return nquad;\n  }\n\n  /**\n   * Converts a legacy-formatted dataset to an array of quads dataset per\n   * http://rdf.js.org/.\n   *\n   * @param dataset the legacy dataset to convert.\n   *\n   * @return the array of quads dataset.\n   */\n  static legacyDatasetToQuads(dataset) {\n    const quads = [];\n\n    const termTypeMap = {\n      'blank node': 'BlankNode',\n      'IRI': 'NamedNode',\n      'literal': 'Literal'\n    };\n\n    for(const graphName in dataset) {\n      const triples = dataset[graphName];\n      triples.forEach(triple => {\n        const quad = {};\n        for(const componentName in triple) {\n          const oldComponent = triple[componentName];\n          const newComponent = {\n            termType: termTypeMap[oldComponent.type],\n            value: oldComponent.value\n          };\n          if(newComponent.termType === 'Literal') {\n            newComponent.datatype = {\n              termType: 'NamedNode'\n            };\n            if('datatype' in oldComponent) {\n              newComponent.datatype.value = oldComponent.datatype;\n            }\n            if('language' in oldComponent) {\n              if(!('datatype' in oldComponent)) {\n                newComponent.datatype.value = RDF_LANGSTRING;\n              }\n              newComponent.language = oldComponent.language;\n            } else if(!('datatype' in oldComponent)) {\n              newComponent.datatype.value = XSD_STRING;\n            }\n          }\n          quad[componentName] = newComponent;\n        }\n        if(graphName === '@default') {\n          quad.graph = {\n            termType: 'DefaultGraph',\n            value: ''\n          };\n        } else {\n          quad.graph = {\n            termType: graphName.startsWith('_:') ? 'BlankNode' : 'NamedNode',\n            value: graphName\n          };\n        }\n        quads.push(quad);\n      });\n    }\n\n    return quads;\n  }\n};\n\n/**\n * Compares two RDF triples for equality.\n *\n * @param t1 the first triple.\n * @param t2 the second triple.\n *\n * @return true if the triples are the same, false if not.\n */\nfunction _compareTriples(t1, t2) {\n  for(const k in t1) {\n    if(t1[k].termType !== t2[k].termType || t1[k].value !== t2[k].value) {\n      return false;\n    }\n  }\n  if(t1.object.termType !== 'Literal') {\n    return true;\n  }\n  return (\n    (t1.object.datatype.termType === t2.object.datatype.termType) &&\n    (t1.object.datatype.value === t2.object.datatype.value) &&\n    (t1.object.language === t2.object.language)\n  );\n}\n\nconst _escapeRegex = /[\"\\\\\\n\\r]/g;\n/**\n * Escape string to N-Quads literal\n */\nfunction _escape(s) {\n  return s.replace(_escapeRegex, function(match) {\n    switch(match) {\n      case '\"': return '\\\\\"';\n      case '\\\\': return '\\\\\\\\';\n      case '\\n': return '\\\\n';\n      case '\\r': return '\\\\r';\n    }\n  });\n}\n\nconst _unescapeRegex =\n  /(?:\\\\([tbnrf\"'\\\\]))|(?:\\\\u([0-9A-Fa-f]{4}))|(?:\\\\U([0-9A-Fa-f]{8}))/g;\n/**\n * Unescape N-Quads literal to string\n */\nfunction _unescape(s) {\n  return s.replace(_unescapeRegex, function(match, code, u, U) {\n    if(code) {\n      switch(code) {\n        case 't': return '\\t';\n        case 'b': return '\\b';\n        case 'n': return '\\n';\n        case 'r': return '\\r';\n        case 'f': return '\\f';\n        case '\"': return '\"';\n        case '\\'': return '\\'';\n        case '\\\\': return '\\\\';\n      }\n    }\n    if(u) {\n      return String.fromCharCode(parseInt(u, 16));\n    }\n    if(U) {\n      // FIXME: support larger values\n      throw new Error('Unsupported U escape');\n    }\n  });\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/NQuads.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/Permutator.js":
/*!*****************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/Permutator.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n// TODO: convert to ES6 iterable\n\nmodule.exports = class Permutator {\n  /**\n   * A Permutator iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.list = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.left = {};\n    for(let i = 0; i < list.length; ++i) {\n      this.left[list[i]] = true;\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n  next() {\n    // copy current permutation\n    const rval = this.list.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = this.list.length;\n    for(let i = 0; i < length; ++i) {\n      const element = this.list[i];\n      const left = this.left[element];\n      if((k === null || element > k) &&\n        ((left && i > 0 && element > this.list[i - 1]) ||\n        (!left && i < (length - 1) && element > this.list[i + 1]))) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if(k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = this.left[k] ? pos - 1 : pos + 1;\n      this.list[pos] = this.list[swap];\n      this.list[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for(let i = 0; i < length; ++i) {\n        if(this.list[i] > k) {\n          this.left[this.list[i]] = !this.left[this.list[i]];\n        }\n      }\n    }\n\n    return rval;\n  }\n};\n\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/Permutator.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/URDNA2015.js":
/*!****************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/URDNA2015.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst AsyncAlgorithm = __webpack_require__(/*! ./AsyncAlgorithm */ \"./node_modules/rdf-canonize/lib/AsyncAlgorithm.js\");\nconst IdentifierIssuer = __webpack_require__(/*! ./IdentifierIssuer */ \"./node_modules/rdf-canonize/lib/IdentifierIssuer.js\");\nconst MessageDigest = __webpack_require__(/*! ./MessageDigest */ \"./node_modules/rdf-canonize/lib/MessageDigest-browser.js\");\nconst Permutator = __webpack_require__(/*! ./Permutator */ \"./node_modules/rdf-canonize/lib/Permutator.js\");\nconst NQuads = __webpack_require__(/*! ./NQuads */ \"./node_modules/rdf-canonize/lib/NQuads.js\");\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/rdf-canonize/lib/util.js\");\n\nconst POSITIONS = {subject: 's', object: 'o', graph: 'g'};\n\nmodule.exports = class URDNA2015 extends AsyncAlgorithm {\n  constructor(options) {\n    options = options || {};\n    super(options);\n    this.name = 'URDNA2015';\n    this.options = Object.assign({}, options);\n    this.blankNodeInfo = {};\n    this.hashToBlankNodes = {};\n    this.canonicalIssuer = new IdentifierIssuer('_:c14n');\n    this.hashAlgorithm = 'sha256';\n    this.quads;\n  }\n\n  // 4.4) Normalization Algorithm\n  main(dataset, callback) {\n    const self = this;\n    self.schedule.start = Date.now();\n    let result;\n    self.quads = dataset;\n\n    // 1) Create the normalization state.\n\n    // Note: Optimize by generating non-normalized blank node map concurrently.\n    const nonNormalized = {};\n\n    self.waterfall([\n      callback => {\n        // 2) For every quad in input dataset:\n        self.forEach(dataset, (quad, idx, callback) => {\n          // 2.1) For each blank node that occurs in the quad, add a reference\n          // to the quad using the blank node identifier in the blank node to\n          // quads map, creating a new entry if necessary.\n          self.forEachComponent(quad, component => {\n            if(component.termType !== 'BlankNode') {\n              return;\n            }\n            const id = component.value;\n            if(id in self.blankNodeInfo) {\n              self.blankNodeInfo[id].quads.push(quad);\n            } else {\n              nonNormalized[id] = true;\n              self.blankNodeInfo[id] = {quads: [quad]};\n            }\n          });\n\n          callback();\n        }, callback);\n      },\n      callback => {\n        // 3) Create a list of non-normalized blank node identifiers\n        // non-normalized identifiers and populate it using the keys from the\n        // blank node to quads map.\n        // Note: We use a map here and it was generated during step 2.\n\n        // 4) Initialize simple, a boolean flag, to true.\n        let simple = true;\n\n        // 5) While simple is true, issue canonical identifiers for blank nodes:\n        self.whilst(() => simple, callback => {\n          // 5.1) Set simple to false.\n          simple = false;\n\n          // 5.2) Clear hash to blank nodes map.\n          self.hashToBlankNodes = {};\n\n          self.waterfall([\n            callback => {\n              // 5.3) For each blank node identifier identifier in\n              // non-normalized identifiers:\n              self.forEach(nonNormalized, (value, id, callback) => {\n                // 5.3.1) Create a hash, hash, according to the Hash First\n                // Degree Quads algorithm.\n                self.hashFirstDegreeQuads(id, (err, hash) => {\n                  if(err) {\n                    return callback(err);\n                  }\n                  // 5.3.2) Add hash and identifier to hash to blank nodes map,\n                  // creating a new entry if necessary.\n                  if(hash in self.hashToBlankNodes) {\n                    self.hashToBlankNodes[hash].push(id);\n                  } else {\n                    self.hashToBlankNodes[hash] = [id];\n                  }\n                  callback();\n                });\n              }, callback);\n            },\n            callback => {\n              // 5.4) For each hash to identifier list mapping in hash to blank\n              // nodes map, lexicographically-sorted by hash:\n              const hashes = Object.keys(self.hashToBlankNodes).sort();\n              self.forEach(hashes, (hash, i, callback) => {\n                // 5.4.1) If the length of identifier list is greater than 1,\n                // continue to the next mapping.\n                const idList = self.hashToBlankNodes[hash];\n                if(idList.length > 1) {\n                  return callback();\n                }\n\n                // 5.4.2) Use the Issue Identifier algorithm, passing canonical\n                // issuer and the single blank node identifier in identifier\n                // list, identifier, to issue a canonical replacement identifier\n                // for identifier.\n                // TODO: consider changing `getId` to `issue`\n                const id = idList[0];\n                self.canonicalIssuer.getId(id);\n\n                // 5.4.3) Remove identifier from non-normalized identifiers.\n                delete nonNormalized[id];\n\n                // 5.4.4) Remove hash from the hash to blank nodes map.\n                delete self.hashToBlankNodes[hash];\n\n                // 5.4.5) Set simple to true.\n                simple = true;\n                callback();\n              }, callback);\n            }\n          ], callback);\n        }, callback);\n      },\n      callback => {\n        // 6) For each hash to identifier list mapping in hash to blank nodes\n        // map, lexicographically-sorted by hash:\n        const hashes = Object.keys(self.hashToBlankNodes).sort();\n        self.forEach(hashes, (hash, idx, callback) => {\n          // 6.1) Create hash path list where each item will be a result of\n          // running the Hash N-Degree Quads algorithm.\n          const hashPathList = [];\n\n          // 6.2) For each blank node identifier identifier in identifier list:\n          const idList = self.hashToBlankNodes[hash];\n          self.waterfall([\n            callback => {\n              self.forEach(idList, (id, idx, callback) => {\n                // 6.2.1) If a canonical identifier has already been issued for\n                // identifier, continue to the next identifier.\n                if(self.canonicalIssuer.hasId(id)) {\n                  return callback();\n                }\n\n                // 6.2.2) Create temporary issuer, an identifier issuer\n                // initialized with the prefix _:b.\n                const issuer = new IdentifierIssuer('_:b');\n\n                // 6.2.3) Use the Issue Identifier algorithm, passing temporary\n                // issuer and identifier, to issue a new temporary blank node\n                // identifier for identifier.\n                issuer.getId(id);\n\n                // 6.2.4) Run the Hash N-Degree Quads algorithm, passing\n                // temporary issuer, and append the result to the hash path\n                // list.\n                self.hashNDegreeQuads(id, issuer, (err, result) => {\n                  if(err) {\n                    return callback(err);\n                  }\n                  hashPathList.push(result);\n                  callback();\n                });\n              }, callback);\n            },\n            callback => {\n              // 6.3) For each result in the hash path list,\n              // lexicographically-sorted by the hash in result:\n              // TODO: use `String.localeCompare`?\n              hashPathList.sort((a, b) =>\n                (a.hash < b.hash) ? -1 : ((a.hash > b.hash) ? 1 : 0));\n              self.forEach(hashPathList, (result, idx, callback) => {\n                // 6.3.1) For each blank node identifier, existing identifier,\n                // that was issued a temporary identifier by identifier issuer\n                // in result, issue a canonical identifier, in the same order,\n                // using the Issue Identifier algorithm, passing canonical\n                // issuer and existing identifier.\n                for(const existing in result.issuer.existing) {\n                  self.canonicalIssuer.getId(existing);\n                }\n                callback();\n              }, callback);\n            }\n          ], callback);\n        }, callback);\n      }, callback => {\n        /* Note: At this point all blank nodes in the set of RDF quads have been\n        assigned canonical identifiers, which have been stored in the canonical\n        issuer. Here each quad is updated by assigning each of its blank nodes\n        its new identifier. */\n\n        // 7) For each quad, quad, in input dataset:\n        const normalized = [];\n        self.waterfall([\n          callback => {\n            self.forEach(self.quads, (quad, idx, callback) => {\n              // 7.1) Create a copy, quad copy, of quad and replace any existing\n              // blank node identifiers using the canonical identifiers\n              // previously issued by canonical issuer.\n              // Note: We optimize away the copy here.\n              self.forEachComponent(quad, component => {\n                if(component.termType === 'BlankNode' &&\n                  !component.value.startsWith(self.canonicalIssuer.prefix)) {\n                  component.value = self.canonicalIssuer.getId(component.value);\n                }\n              });\n              // 7.2) Add quad copy to the normalized dataset.\n              normalized.push(NQuads.serializeQuad(quad));\n              callback();\n            }, callback);\n          },\n          callback => {\n            // sort normalized output\n            normalized.sort();\n\n            // 8) Return the normalized dataset.\n            result = normalized.join('');\n            return callback();\n          }\n        ], callback);\n      }\n    ], err => callback(err, result));\n  }\n\n  // 4.6) Hash First Degree Quads\n  hashFirstDegreeQuads(id, callback) {\n    const self = this;\n\n    // return cached hash\n    const info = self.blankNodeInfo[id];\n    if('hash' in info) {\n      return callback(null, info.hash);\n    }\n\n    // 1) Initialize nquads to an empty list. It will be used to store quads in\n    // N-Quads format.\n    const nquads = [];\n\n    // 2) Get the list of quads quads associated with the reference blank node\n    // identifier in the blank node to quads map.\n    const quads = info.quads;\n\n    // 3) For each quad quad in quads:\n    self.forEach(quads, (quad, idx, callback) => {\n      // 3.1) Serialize the quad in N-Quads format with the following special\n      // rule:\n\n      // 3.1.1) If any component in quad is an blank node, then serialize it\n      // using a special identifier as follows:\n      const copy = {predicate: quad.predicate};\n      self.forEachComponent(quad, (component, key) => {\n        // 3.1.2) If the blank node's existing blank node identifier matches the\n        // reference blank node identifier then use the blank node identifier\n        // _:a, otherwise, use the blank node identifier _:z.\n        copy[key] = self.modifyFirstDegreeComponent(id, component, key);\n      });\n      nquads.push(NQuads.serializeQuad(copy));\n      callback();\n    }, err => {\n      if(err) {\n        return callback(err);\n      }\n      // 4) Sort nquads in lexicographical order.\n      nquads.sort();\n\n      // 5) Return the hash that results from passing the sorted, joined nquads\n      // through the hash algorithm.\n      const md = new MessageDigest(self.hashAlgorithm);\n      for(let i = 0; i < nquads.length; ++i) {\n        md.update(nquads[i]);\n      }\n      // TODO: represent as byte buffer instead to cut memory usage in half\n      info.hash = md.digest();\n      callback(null, info.hash);\n    });\n  }\n\n  // 4.7) Hash Related Blank Node\n  hashRelatedBlankNode(related, quad, issuer, position, callback) {\n    const self = this;\n\n    // 1) Set the identifier to use for related, preferring first the canonical\n    // identifier for related if issued, second the identifier issued by issuer\n    // if issued, and last, if necessary, the result of the Hash First Degree\n    // Quads algorithm, passing related.\n    let id;\n    self.waterfall([\n      callback => {\n        if(self.canonicalIssuer.hasId(related)) {\n          id = self.canonicalIssuer.getId(related);\n          return callback();\n        }\n        if(issuer.hasId(related)) {\n          id = issuer.getId(related);\n          return callback();\n        }\n        self.hashFirstDegreeQuads(related, (err, hash) => {\n          if(err) {\n            return callback(err);\n          }\n          id = hash;\n          callback();\n        });\n      }\n    ], err => {\n      if(err) {\n        return callback(err);\n      }\n\n      // 2) Initialize a string input to the value of position.\n      // Note: We use a hash object instead.\n      const md = new MessageDigest(self.hashAlgorithm);\n      md.update(position);\n\n      // 3) If position is not g, append <, the value of the predicate in quad,\n      // and > to input.\n      if(position !== 'g') {\n        md.update(self.getRelatedPredicate(quad));\n      }\n\n      // 4) Append identifier to input.\n      md.update(id);\n\n      // 5) Return the hash that results from passing input through the hash\n      // algorithm.\n      // TODO: represent as byte buffer instead to cut memory usage in half\n      return callback(null, md.digest());\n    });\n  }\n\n  // 4.8) Hash N-Degree Quads\n  hashNDegreeQuads(id, issuer, callback) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    // Note: 2) and 3) handled within `createHashToRelated`\n    let hashToRelated;\n    const md = new MessageDigest(self.hashAlgorithm);\n    self.waterfall([\n      callback => self.createHashToRelated(id, issuer, (err, result) => {\n        if(err) {\n          return callback(err);\n        }\n        hashToRelated = result;\n        callback();\n      }),\n      callback => {\n        // 4) Create an empty string, data to hash.\n        // Note: We created a hash object `md` above instead.\n\n        // 5) For each related hash to blank node list mapping in hash to\n        // related blank nodes map, sorted lexicographically by related hash:\n        const hashes = Object.keys(hashToRelated).sort();\n        self.forEach(hashes, (hash, idx, callback) => {\n          // 5.1) Append the related hash to the data to hash.\n          md.update(hash);\n\n          // 5.2) Create a string chosen path.\n          let chosenPath = '';\n\n          // 5.3) Create an unset chosen issuer variable.\n          let chosenIssuer;\n\n          // 5.4) For each permutation of blank node list:\n          const permutator = new Permutator(hashToRelated[hash]);\n          self.whilst(() => permutator.hasNext(), nextPermutation => {\n            const permutation = permutator.next();\n\n            // 5.4.1) Create a copy of issuer, issuer copy.\n            let issuerCopy = issuer.clone();\n\n            // 5.4.2) Create a string path.\n            let path = '';\n\n            // 5.4.3) Create a recursion list, to store blank node identifiers\n            // that must be recursively processed by this algorithm.\n            const recursionList = [];\n\n            self.waterfall([\n              callback => {\n                // 5.4.4) For each related in permutation:\n                self.forEach(permutation, (related, idx, callback) => {\n                  // 5.4.4.1) If a canonical identifier has been issued for\n                  // related, append it to path.\n                  if(self.canonicalIssuer.hasId(related)) {\n                    path += self.canonicalIssuer.getId(related);\n                  } else {\n                    // 5.4.4.2) Otherwise:\n                    // 5.4.4.2.1) If issuer copy has not issued an identifier\n                    // for related, append related to recursion list.\n                    if(!issuerCopy.hasId(related)) {\n                      recursionList.push(related);\n                    }\n                    // 5.4.4.2.2) Use the Issue Identifier algorithm, passing\n                    // issuer copy and related and append the result to path.\n                    path += issuerCopy.getId(related);\n                  }\n\n                  // 5.4.4.3) If chosen path is not empty and the length of path\n                  // is greater than or equal to the length of chosen path and\n                  // path is lexicographically greater than chosen path, then\n                  // skip to the next permutation.\n                  if(chosenPath.length !== 0 &&\n                    path.length >= chosenPath.length && path > chosenPath) {\n                    // FIXME: may cause inaccurate total depth calculation\n                    return nextPermutation();\n                  }\n                  callback();\n                }, callback);\n              },\n              callback => {\n                // 5.4.5) For each related in recursion list:\n                self.forEach(recursionList, (related, idx, callback) => {\n                  // 5.4.5.1) Set result to the result of recursively executing\n                  // the Hash N-Degree Quads algorithm, passing related for\n                  // identifier and issuer copy for path identifier issuer.\n                  self.hashNDegreeQuads(related, issuerCopy, (err, result) => {\n                    if(err) {\n                      return callback(err);\n                    }\n\n                    // 5.4.5.2) Use the Issue Identifier algorithm, passing\n                    // issuer copy and related and append the result to path.\n                    path += issuerCopy.getId(related);\n\n                    // 5.4.5.3) Append <, the hash in result, and > to path.\n                    path += '<' + result.hash + '>';\n\n                    // 5.4.5.4) Set issuer copy to the identifier issuer in\n                    // result.\n                    issuerCopy = result.issuer;\n\n                    // 5.4.5.5) If chosen path is not empty and the length of\n                    // path is greater than or equal to the length of chosen\n                    // path and path is lexicographically greater than chosen\n                    // path, then skip to the next permutation.\n                    if(chosenPath.length !== 0 &&\n                      path.length >= chosenPath.length && path > chosenPath) {\n                      // FIXME: may cause inaccurate total depth calculation\n                      return nextPermutation();\n                    }\n                    callback();\n                  });\n                }, callback);\n              },\n              callback => {\n                // 5.4.6) If chosen path is empty or path is lexicographically\n                // less than chosen path, set chosen path to path and chosen\n                // issuer to issuer copy.\n                if(chosenPath.length === 0 || path < chosenPath) {\n                  chosenPath = path;\n                  chosenIssuer = issuerCopy;\n                }\n                callback();\n              }\n            ], nextPermutation);\n          }, err => {\n            if(err) {\n              return callback(err);\n            }\n\n            // 5.5) Append chosen path to data to hash.\n            md.update(chosenPath);\n\n            // 5.6) Replace issuer, by reference, with chosen issuer.\n            issuer = chosenIssuer;\n            callback();\n          });\n        }, callback);\n      }\n    ], err => {\n      // 6) Return issuer and the hash that results from passing data to hash\n      // through the hash algorithm.\n      callback(err, {hash: md.digest(), issuer});\n    });\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    component.value = (component.value === id ? '_:a' : '_:z');\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return '<' + quad.predicate.value + '>';\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer, callback) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    self.forEach(quads, (quad, idx, callback) => {\n      // 3.1) For each component in quad, if component is the subject, object,\n      // and graph name and it is a blank node that is not identified by\n      // identifier:\n      self.forEach(quad, (component, key, callback) => {\n        if(key === 'predicate' ||\n          !(component.termType === 'BlankNode' && component.value !== id)) {\n          return callback();\n        }\n        // 3.1.1) Set hash to the result of the Hash Related Blank Node\n        // algorithm, passing the blank node identifier for component as\n        // related, quad, path identifier issuer as issuer, and position as\n        // either s, o, or g based on whether component is a subject, object,\n        // graph name, respectively.\n        const related = component.value;\n        const position = POSITIONS[key];\n        self.hashRelatedBlankNode(\n          related, quad, issuer, position, (err, hash) => {\n          if(err) {\n            return callback(err);\n          }\n          // 3.1.2) Add a mapping of hash to the blank node identifier for\n          // component to hash to related blank nodes map, adding an entry as\n          // necessary.\n          if(hash in hashToRelated) {\n            hashToRelated[hash].push(related);\n          } else {\n            hashToRelated[hash] = [related];\n          }\n          callback();\n        });\n      }, callback);\n    }, err => callback(err, hashToRelated));\n  }\n\n  // helper that iterates over quad components (skips predicate)\n  forEachComponent(quad, op) {\n    for(const key in quad) {\n      // skip `predicate`\n      if(key === 'predicate') {\n        continue;\n      }\n      op(quad[key], key, quad);\n    }\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/URDNA2015.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/URDNA2015Sync.js":
/*!********************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/URDNA2015Sync.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst IdentifierIssuer = __webpack_require__(/*! ./IdentifierIssuer */ \"./node_modules/rdf-canonize/lib/IdentifierIssuer.js\");\nconst MessageDigest = __webpack_require__(/*! ./MessageDigest */ \"./node_modules/rdf-canonize/lib/MessageDigest-browser.js\");\nconst Permutator = __webpack_require__(/*! ./Permutator */ \"./node_modules/rdf-canonize/lib/Permutator.js\");\nconst NQuads = __webpack_require__(/*! ./NQuads */ \"./node_modules/rdf-canonize/lib/NQuads.js\");\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/rdf-canonize/lib/util.js\");\n\nconst POSITIONS = {subject: 's', object: 'o', graph: 'g'};\n\nmodule.exports = class URDNA2015Sync {\n  constructor() {\n    this.name = 'URDNA2015';\n    this.blankNodeInfo = {};\n    this.hashToBlankNodes = {};\n    this.canonicalIssuer = new IdentifierIssuer('_:c14n');\n    this.hashAlgorithm = 'sha256';\n    this.quads;\n  }\n\n  // 4.4) Normalization Algorithm\n  main(dataset) {\n    const self = this;\n    self.quads = dataset;\n\n    // 1) Create the normalization state.\n\n    // Note: Optimize by generating non-normalized blank node map concurrently.\n    const nonNormalized = {};\n\n    // 2) For every quad in input dataset:\n    for(const quad of dataset) {\n      // 2.1) For each blank node that occurs in the quad, add a reference\n      // to the quad using the blank node identifier in the blank node to\n      // quads map, creating a new entry if necessary.\n      self.forEachComponent(quad, component => {\n        if(component.termType !== 'BlankNode') {\n          return;\n        }\n        const id = component.value;\n        if(id in self.blankNodeInfo) {\n          self.blankNodeInfo[id].quads.push(quad);\n        } else {\n          nonNormalized[id] = true;\n          self.blankNodeInfo[id] = {quads: [quad]};\n        }\n      });\n    }\n\n    // 3) Create a list of non-normalized blank node identifiers\n    // non-normalized identifiers and populate it using the keys from the\n    // blank node to quads map.\n    // Note: We use a map here and it was generated during step 2.\n\n    // 4) Initialize simple, a boolean flag, to true.\n    let simple = true;\n\n    // 5) While simple is true, issue canonical identifiers for blank nodes:\n    while(simple) {\n      // 5.1) Set simple to false.\n      simple = false;\n\n      // 5.2) Clear hash to blank nodes map.\n      self.hashToBlankNodes = {};\n\n      // 5.3) For each blank node identifier identifier in non-normalized\n      // identifiers:\n      for(const id in nonNormalized) {\n        // 5.3.1) Create a hash, hash, according to the Hash First Degree\n        // Quads algorithm.\n        const hash = self.hashFirstDegreeQuads(id);\n\n        // 5.3.2) Add hash and identifier to hash to blank nodes map,\n        // creating a new entry if necessary.\n        if(hash in self.hashToBlankNodes) {\n          self.hashToBlankNodes[hash].push(id);\n        } else {\n          self.hashToBlankNodes[hash] = [id];\n        }\n      }\n\n      // 5.4) For each hash to identifier list mapping in hash to blank\n      // nodes map, lexicographically-sorted by hash:\n      const hashes = Object.keys(self.hashToBlankNodes).sort();\n      for(let i = 0; i < hashes.length; ++i) {\n        // 5.4.1) If the length of identifier list is greater than 1,\n        // continue to the next mapping.\n        const hash = hashes[i];\n        const idList = self.hashToBlankNodes[hash];\n        if(idList.length > 1) {\n          continue;\n        }\n\n        // 5.4.2) Use the Issue Identifier algorithm, passing canonical\n        // issuer and the single blank node identifier in identifier\n        // list, identifier, to issue a canonical replacement identifier\n        // for identifier.\n        // TODO: consider changing `getId` to `issue`\n        const id = idList[0];\n        self.canonicalIssuer.getId(id);\n\n        // 5.4.3) Remove identifier from non-normalized identifiers.\n        delete nonNormalized[id];\n\n        // 5.4.4) Remove hash from the hash to blank nodes map.\n        delete self.hashToBlankNodes[hash];\n\n        // 5.4.5) Set simple to true.\n        simple = true;\n      }\n    }\n\n    // 6) For each hash to identifier list mapping in hash to blank nodes map,\n    // lexicographically-sorted by hash:\n    const hashes = Object.keys(self.hashToBlankNodes).sort();\n    for(let i = 0; i < hashes.length; ++i) {\n      // 6.1) Create hash path list where each item will be a result of\n      // running the Hash N-Degree Quads algorithm.\n      const hashPathList = [];\n\n      // 6.2) For each blank node identifier identifier in identifier list:\n      const hash = hashes[i];\n      const idList = self.hashToBlankNodes[hash];\n      for(let j = 0; j < idList.length; ++j) {\n        // 6.2.1) If a canonical identifier has already been issued for\n        // identifier, continue to the next identifier.\n        const id = idList[j];\n        if(self.canonicalIssuer.hasId(id)) {\n          continue;\n        }\n\n        // 6.2.2) Create temporary issuer, an identifier issuer\n        // initialized with the prefix _:b.\n        const issuer = new IdentifierIssuer('_:b');\n\n        // 6.2.3) Use the Issue Identifier algorithm, passing temporary\n        // issuer and identifier, to issue a new temporary blank node\n        // identifier for identifier.\n        issuer.getId(id);\n\n        // 6.2.4) Run the Hash N-Degree Quads algorithm, passing\n        // temporary issuer, and append the result to the hash path list.\n        const result = self.hashNDegreeQuads(id, issuer);\n        hashPathList.push(result);\n      }\n\n      // 6.3) For each result in the hash path list,\n      // lexicographically-sorted by the hash in result:\n      // TODO: use `String.localeCompare`?\n      hashPathList.sort((a, b) =>\n        (a.hash < b.hash) ? -1 : ((a.hash > b.hash) ? 1 : 0));\n      for(let j = 0; j < hashPathList.length; ++j) {\n        // 6.3.1) For each blank node identifier, existing identifier,\n        // that was issued a temporary identifier by identifier issuer\n        // in result, issue a canonical identifier, in the same order,\n        // using the Issue Identifier algorithm, passing canonical\n        // issuer and existing identifier.\n        const result = hashPathList[j];\n        for(const existing in result.issuer.existing) {\n          self.canonicalIssuer.getId(existing);\n        }\n      }\n    }\n\n    /* Note: At this point all blank nodes in the set of RDF quads have been\n    assigned canonical identifiers, which have been stored in the canonical\n    issuer. Here each quad is updated by assigning each of its blank nodes\n    its new identifier. */\n\n    // 7) For each quad, quad, in input dataset:\n    const normalized = [];\n    for(let i = 0; i < self.quads.length; ++i) {\n      // 7.1) Create a copy, quad copy, of quad and replace any existing\n      // blank node identifiers using the canonical identifiers\n      // previously issued by canonical issuer.\n      // Note: We optimize away the copy here.\n      const quad = self.quads[i];\n      self.forEachComponent(quad, component => {\n        if(component.termType === 'BlankNode' &&\n          !component.value.startsWith(self.canonicalIssuer.prefix)) {\n          component.value = self.canonicalIssuer.getId(component.value);\n        }\n      });\n      // 7.2) Add quad copy to the normalized dataset.\n      normalized.push(NQuads.serializeQuad(quad));\n    }\n\n    // sort normalized output\n    normalized.sort();\n\n    // 8) Return the normalized dataset.\n    return normalized.join('');\n  }\n\n  // 4.6) Hash First Degree Quads\n  hashFirstDegreeQuads(id) {\n    const self = this;\n\n    // return cached hash\n    const info = self.blankNodeInfo[id];\n    if('hash' in info) {\n      return info.hash;\n    }\n\n    // 1) Initialize nquads to an empty list. It will be used to store quads in\n    // N-Quads format.\n    const nquads = [];\n\n    // 2) Get the list of quads `quads` associated with the reference blank node\n    // identifier in the blank node to quads map.\n    const quads = info.quads;\n\n    // 3) For each quad `quad` in `quads`:\n    for(let i = 0; i < quads.length; ++i) {\n      const quad = quads[i];\n\n      // 3.1) Serialize the quad in N-Quads format with the following special\n      // rule:\n\n      // 3.1.1) If any component in quad is an blank node, then serialize it\n      // using a special identifier as follows:\n      const copy = {predicate: quad.predicate};\n      self.forEachComponent(quad, (component, key) => {\n        // 3.1.2) If the blank node's existing blank node identifier matches\n        // the reference blank node identifier then use the blank node\n        // identifier _:a, otherwise, use the blank node identifier _:z.\n        copy[key] = self.modifyFirstDegreeComponent(id, component, key);\n      });\n      nquads.push(NQuads.serializeQuad(copy));\n    }\n\n    // 4) Sort nquads in lexicographical order.\n    nquads.sort();\n\n    // 5) Return the hash that results from passing the sorted, joined nquads\n    // through the hash algorithm.\n    const md = new MessageDigest(self.hashAlgorithm);\n    for(let i = 0; i < nquads.length; ++i) {\n      md.update(nquads[i]);\n    }\n    // TODO: represent as byte buffer instead to cut memory usage in half\n    info.hash = md.digest();\n    return info.hash;\n  }\n\n  // 4.7) Hash Related Blank Node\n  hashRelatedBlankNode(related, quad, issuer, position) {\n    const self = this;\n\n    // 1) Set the identifier to use for related, preferring first the canonical\n    // identifier for related if issued, second the identifier issued by issuer\n    // if issued, and last, if necessary, the result of the Hash First Degree\n    // Quads algorithm, passing related.\n    let id;\n    if(self.canonicalIssuer.hasId(related)) {\n      id = self.canonicalIssuer.getId(related);\n    } else if(issuer.hasId(related)) {\n      id = issuer.getId(related);\n    } else {\n      id = self.hashFirstDegreeQuads(related);\n    }\n\n    // 2) Initialize a string input to the value of position.\n    // Note: We use a hash object instead.\n    const md = new MessageDigest(self.hashAlgorithm);\n    md.update(position);\n\n    // 3) If position is not g, append <, the value of the predicate in quad,\n    // and > to input.\n    if(position !== 'g') {\n      md.update(self.getRelatedPredicate(quad));\n    }\n\n    // 4) Append identifier to input.\n    md.update(id);\n\n    // 5) Return the hash that results from passing input through the hash\n    // algorithm.\n    // TODO: represent as byte buffer instead to cut memory usage in half\n    return md.digest();\n  }\n\n  // 4.8) Hash N-Degree Quads\n  hashNDegreeQuads(id, issuer) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    // Note: 2) and 3) handled within `createHashToRelated`\n    const md = new MessageDigest(self.hashAlgorithm);\n    const hashToRelated = self.createHashToRelated(id, issuer);\n\n    // 4) Create an empty string, data to hash.\n    // Note: We created a hash object `md` above instead.\n\n    // 5) For each related hash to blank node list mapping in hash to related\n    // blank nodes map, sorted lexicographically by related hash:\n    const hashes = Object.keys(hashToRelated).sort();\n    for(let i = 0; i < hashes.length; ++i) {\n      // 5.1) Append the related hash to the data to hash.\n      const hash = hashes[i];\n      md.update(hash);\n\n      // 5.2) Create a string chosen path.\n      let chosenPath = '';\n\n      // 5.3) Create an unset chosen issuer variable.\n      let chosenIssuer;\n\n      // 5.4) For each permutation of blank node list:\n      const permutator = new Permutator(hashToRelated[hash]);\n      while(permutator.hasNext()) {\n        const permutation = permutator.next();\n\n        // 5.4.1) Create a copy of issuer, issuer copy.\n        let issuerCopy = issuer.clone();\n\n        // 5.4.2) Create a string path.\n        let path = '';\n\n        // 5.4.3) Create a recursion list, to store blank node identifiers\n        // that must be recursively processed by this algorithm.\n        const recursionList = [];\n\n        // 5.4.4) For each related in permutation:\n        let nextPermutation = false;\n        for(let j = 0; j < permutation.length; ++j) {\n          // 5.4.4.1) If a canonical identifier has been issued for\n          // related, append it to path.\n          const related = permutation[j];\n          if(self.canonicalIssuer.hasId(related)) {\n            path += self.canonicalIssuer.getId(related);\n          } else {\n            // 5.4.4.2) Otherwise:\n            // 5.4.4.2.1) If issuer copy has not issued an identifier for\n            // related, append related to recursion list.\n            if(!issuerCopy.hasId(related)) {\n              recursionList.push(related);\n            }\n            // 5.4.4.2.2) Use the Issue Identifier algorithm, passing\n            // issuer copy and related and append the result to path.\n            path += issuerCopy.getId(related);\n          }\n\n          // 5.4.4.3) If chosen path is not empty and the length of path\n          // is greater than or equal to the length of chosen path and\n          // path is lexicographically greater than chosen path, then\n          // skip to the next permutation.\n          if(chosenPath.length !== 0 &&\n            path.length >= chosenPath.length && path > chosenPath) {\n            nextPermutation = true;\n            break;\n          }\n        }\n\n        if(nextPermutation) {\n          continue;\n        }\n\n        // 5.4.5) For each related in recursion list:\n        for(let j = 0; j < recursionList.length; ++j) {\n          // 5.4.5.1) Set result to the result of recursively executing\n          // the Hash N-Degree Quads algorithm, passing related for\n          // identifier and issuer copy for path identifier issuer.\n          const related = recursionList[j];\n          const result = self.hashNDegreeQuads(related, issuerCopy);\n\n          // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer\n          // copy and related and append the result to path.\n          path += issuerCopy.getId(related);\n\n          // 5.4.5.3) Append <, the hash in result, and > to path.\n          path += '<' + result.hash + '>';\n\n          // 5.4.5.4) Set issuer copy to the identifier issuer in\n          // result.\n          issuerCopy = result.issuer;\n\n          // 5.4.5.5) If chosen path is not empty and the length of path\n          // is greater than or equal to the length of chosen path and\n          // path is lexicographically greater than chosen path, then\n          // skip to the next permutation.\n          if(chosenPath.length !== 0 &&\n            path.length >= chosenPath.length && path > chosenPath) {\n            nextPermutation = true;\n            break;\n          }\n        }\n\n        if(nextPermutation) {\n          continue;\n        }\n\n        // 5.4.6) If chosen path is empty or path is lexicographically\n        // less than chosen path, set chosen path to path and chosen\n        // issuer to issuer copy.\n        if(chosenPath.length === 0 || path < chosenPath) {\n          chosenPath = path;\n          chosenIssuer = issuerCopy;\n        }\n      }\n\n      // 5.5) Append chosen path to data to hash.\n      md.update(chosenPath);\n\n      // 5.6) Replace issuer, by reference, with chosen issuer.\n      issuer = chosenIssuer;\n    }\n\n    // 6) Return issuer and the hash that results from passing data to hash\n    // through the hash algorithm.\n    return {hash: md.digest(), issuer};\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    component.value = (component.value === id ? '_:a' : '_:z');\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return '<' + quad.predicate.value + '>';\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    for(let i = 0; i < quads.length; ++i) {\n      // 3.1) For each component in quad, if component is the subject, object,\n      // and graph name and it is a blank node that is not identified by\n      // identifier:\n      const quad = quads[i];\n      for(const key in quad) {\n        const component = quad[key];\n        if(key === 'predicate' ||\n          !(component.termType === 'BlankNode' && component.value !== id)) {\n          continue;\n        }\n        // 3.1.1) Set hash to the result of the Hash Related Blank Node\n        // algorithm, passing the blank node identifier for component as\n        // related, quad, path identifier issuer as issuer, and position as\n        // either s, o, or g based on whether component is a subject, object,\n        // graph name, respectively.\n        const related = component.value;\n        const position = POSITIONS[key];\n        const hash = self.hashRelatedBlankNode(related, quad, issuer, position);\n\n        // 3.1.2) Add a mapping of hash to the blank node identifier for\n        // component to hash to related blank nodes map, adding an entry as\n        // necessary.\n        if(hash in hashToRelated) {\n          hashToRelated[hash].push(related);\n        } else {\n          hashToRelated[hash] = [related];\n        }\n      }\n    }\n\n    return hashToRelated;\n  }\n\n  // helper that iterates over quad components (skips predicate)\n  forEachComponent(quad, op) {\n    for(const key in quad) {\n      // skip `predicate`\n      if(key === 'predicate') {\n        continue;\n      }\n      op(quad[key], key, quad);\n    }\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/URDNA2015Sync.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/URGNA2012.js":
/*!****************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/URGNA2012.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst URDNA2015 = __webpack_require__(/*! ./URDNA2015 */ \"./node_modules/rdf-canonize/lib/URDNA2015.js\");\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/rdf-canonize/lib/util.js\");\n\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor(options) {\n    super(options);\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if(key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = (component.value === id ? '_:a' : '_:z');\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer, callback) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    self.forEach(quads, (quad, idx, callback) => {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        return callback();\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      self.hashRelatedBlankNode(\n        related, quad, issuer, position, (err, hash) => {\n        if(err) {\n          return callback(err);\n        }\n        if(hash in hashToRelated) {\n          hashToRelated[hash].push(related);\n        } else {\n          hashToRelated[hash] = [related];\n        }\n        callback();\n      });\n    }, err => callback(err, hashToRelated));\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/URGNA2012.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/URGNA2012Sync.js":
/*!********************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/URGNA2012Sync.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst URDNA2015Sync = __webpack_require__(/*! ./URDNA2015Sync */ \"./node_modules/rdf-canonize/lib/URDNA2015Sync.js\");\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/rdf-canonize/lib/util.js\");\n\nmodule.exports = class URDNA2012Sync extends URDNA2015Sync {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if(key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = (component.value === id ? '_:a' : '_:z');\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    for(let i = 0; i < quads.length; ++i) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      const quad = quads[i];\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = self.hashRelatedBlankNode(related, quad, issuer, position);\n      if(hash in hashToRelated) {\n        hashToRelated[hash].push(related);\n      } else {\n        hashToRelated[hash] = [related];\n      }\n    }\n\n    return hashToRelated;\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/URGNA2012Sync.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/rdf-canonize/lib/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2017 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/rdf-canonize/lib/util.js\");\nconst URDNA2015 = __webpack_require__(/*! ./URDNA2015 */ \"./node_modules/rdf-canonize/lib/URDNA2015.js\");\nconst URGNA2012 = __webpack_require__(/*! ./URGNA2012 */ \"./node_modules/rdf-canonize/lib/URGNA2012.js\");\nconst URDNA2015Sync = __webpack_require__(/*! ./URDNA2015Sync */ \"./node_modules/rdf-canonize/lib/URDNA2015Sync.js\");\nconst URGNA2012Sync = __webpack_require__(/*! ./URGNA2012Sync */ \"./node_modules/rdf-canonize/lib/URGNA2012Sync.js\");\n\n// optional native support\nlet rdfCanonizeNative;\ntry {\n  rdfCanonizeNative = __webpack_require__(/*! rdf-canonize-native */ 2);\n} catch(e) {}\n\nconst api = {};\nmodule.exports = api;\n\n// expose helpers\napi.NQuads = __webpack_require__(/*! ./NQuads */ \"./node_modules/rdf-canonize/lib/NQuads.js\");\napi.IdentifierIssuer = __webpack_require__(/*! ./IdentifierIssuer */ \"./node_modules/rdf-canonize/lib/IdentifierIssuer.js\");\n\n/**\n * Get or set native API.\n *\n * @param api the native API.\n *\n * @return the currently set native API.\n */\napi._rdfCanonizeNative = function(api) {\n  if(api) {\n    rdfCanonizeNative = api;\n  }\n  return rdfCanonizeNative;\n};\n\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n * @param [callback(err, canonical)] called once the operation completes.\n *\n * @return a Promise that resolves to the canonicalized RDF Dataset.\n */\napi.canonize = util.callbackify(async function(dataset, options) {\n  let callback;\n  const promise = new Promise((resolve, reject) => {\n    callback = (err, canonical) => {\n      if(err) {\n        return reject(err);\n      }\n\n      /*if(options.format === 'application/n-quads') {\n        canonical = canonical.join('');\n      }\n      canonical = _parseNQuads(canonical.join(''));*/\n\n      resolve(canonical);\n    };\n  });\n\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  // TODO: convert algorithms to Promise-based async\n  if(options.useNative) {\n    if(rdfCanonizeNative) {\n      rdfCanonizeNative.canonize(dataset, options, callback);\n    } else {\n      throw new Error('rdf-canonize-native not available');\n    }\n  } else {\n    if(options.algorithm === 'URDNA2015') {\n      new URDNA2015(options).main(dataset, callback);\n    } else if(options.algorithm === 'URGNA2012') {\n      new URGNA2012(options).main(dataset, callback);\n    } else if(!('algorithm' in options)) {\n      throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n    } else {\n      throw new Error(\n        'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n    }\n  }\n\n  return promise;\n});\n\n/**\n * Synchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return the RDF dataset in canonical form.\n */\napi.canonizeSync = function(dataset, options) {\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if(options.useNative) {\n    if(rdfCanonizeNative) {\n      return rdfCanonizeNative.canonizeSync(dataset, options);\n    }\n    throw new Error('rdf-canonize-native not available');\n  }\n  if(options.algorithm === 'URDNA2015') {\n    return new URDNA2015Sync(options).main(dataset);\n  } else if(options.algorithm === 'URGNA2012') {\n    return new URGNA2012Sync(options).main(dataset);\n  }\n  if(!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error(\n    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/index.js?");

/***/ }),

/***/ "./node_modules/rdf-canonize/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/rdf-canonize/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(setImmediate, process) {/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst api = {};\nmodule.exports = api;\n\n// define setImmediate and nextTick\n//// nextTick implementation with browser-compatible fallback ////\n// from https://github.com/caolan/async/blob/master/lib/async.js\n\n// capture the global reference to guard against fakeTimer mocks\nconst _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\nconst _delay = _setImmediate ?\n  // not a direct alias (for IE10 compatibility)\n  fn => _setImmediate(fn) :\n  fn => setTimeout(fn, 0);\n\nif(typeof process === 'object' && typeof process.nextTick === 'function') {\n  api.nextTick = process.nextTick;\n} else {\n  api.nextTick = _delay;\n}\napi.setImmediate = _setImmediate ? _delay : api.nextTick;\n\n/**\n * Clones an object, array, or string/number. If a typed JavaScript object\n * is given, such as a Date, it will be converted to a string.\n *\n * @param value the value to clone.\n *\n * @return the cloned value.\n */\napi.clone = function(value) {\n  if(value && typeof value === 'object') {\n    let rval;\n    if(Array.isArray(value)) {\n      rval = [];\n      for(let i = 0; i < value.length; ++i) {\n        rval[i] = api.clone(value[i]);\n      }\n    } else if(api.isObject(value)) {\n      rval = {};\n      for(const key in value) {\n        rval[key] = api.clone(value[key]);\n      }\n    } else {\n      rval = value.toString();\n    }\n    return rval;\n  }\n  return value;\n};\n\n/**\n * Returns true if the given value is an Object.\n *\n * @param v the value to check.\n *\n * @return true if the value is an Object, false if not.\n */\napi.isObject = v => Object.prototype.toString.call(v) === '[object Object]';\n\n/**\n * Returns true if the given value is undefined.\n *\n * @param v the value to check.\n *\n * @return true if the value is undefined, false if not.\n */\napi.isUndefined = v => typeof v === 'undefined';\n\napi.callbackify = fn => {\n  return async function(...args) {\n    const callback = args[args.length - 1];\n    if(typeof callback === 'function') {\n      args.pop();\n    }\n\n    let result;\n    try {\n      result = await fn.apply(null, args);\n    } catch(e) {\n      if(typeof callback === 'function') {\n        return _invokeCallback(callback, e);\n      }\n      throw e;\n    }\n\n    if(typeof callback === 'function') {\n      return _invokeCallback(callback, null, result);\n    }\n\n    return result;\n  };\n};\n\nfunction _invokeCallback(callback, err, result) {\n  try {\n    return callback(err, result);\n  } catch(unhandledError) {\n    // throw unhandled errors to prevent \"unhandled rejected promise\"\n    // and simulate what would have happened in a promiseless API\n    process.nextTick(() => {\n      throw unhandledError;\n    });\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/rdf-canonize/lib/util.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/relateurl/lib/constants.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports =\n{\n\t// Output\n\tABSOLUTE:      \"absolute\",\n\tPATH_RELATIVE: \"pathRelative\",\n\tROOT_RELATIVE: \"rootRelative\",\n\tSHORTEST:      \"shortest\"\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/constants.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/format.js":
/*!**********************************************!*\
  !*** ./node_modules/relateurl/lib/format.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar constants = __webpack_require__(/*! ./constants */ \"./node_modules/relateurl/lib/constants.js\");\n\n\n\nfunction formatAuth(urlObj, options)\n{\n\tif (urlObj.auth && !options.removeAuth && (urlObj.extra.relation.maximumHost || options.output===constants.ABSOLUTE))\n\t{\n\t\treturn urlObj.auth + \"@\";\n\t}\n\t\n\treturn \"\";\n}\n\n\n\nfunction formatHash(urlObj, options)\n{\n\treturn urlObj.hash ? urlObj.hash : \"\";\n}\n\n\n\nfunction formatHost(urlObj, options)\n{\n\tif (urlObj.host.full && (urlObj.extra.relation.maximumAuth || options.output===constants.ABSOLUTE))\n\t{\n\t\treturn urlObj.host.full;\n\t}\n\t\n\treturn \"\";\n}\n\n\n\nfunction formatPath(urlObj, options)\n{\n\tvar str = \"\";\n\t\n\tvar absolutePath = urlObj.path.absolute.string;\n\tvar relativePath = urlObj.path.relative.string;\n\tvar resource = showResource(urlObj, options);\n\t\n\tif (urlObj.extra.relation.maximumHost || options.output===constants.ABSOLUTE || options.output===constants.ROOT_RELATIVE)\n\t{\n\t\tstr = absolutePath;\n\t}\n\telse if (relativePath.length<=absolutePath.length && options.output===constants.SHORTEST || options.output===constants.PATH_RELATIVE)\n\t{\n\t\tstr = relativePath;\n\t\t\n\t\tif (str === \"\")\n\t\t{\n\t\t\tvar query = showQuery(urlObj,options) && !!getQuery(urlObj,options);\n\t\t\t\n\t\t\tif (urlObj.extra.relation.maximumPath && !resource)\n\t\t\t{\n\t\t\t\tstr = \"./\";\n\t\t\t}\n\t\t\telse if (urlObj.extra.relation.overridesQuery && !resource && !query)\n\t\t\t{\n\t\t\t\tstr = \"./\";\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tstr = absolutePath;\n\t}\n\t\n\tif ( str===\"/\" && !resource && options.removeRootTrailingSlash && (!urlObj.extra.relation.minimumPort || options.output===constants.ABSOLUTE) )\n\t{\n\t\tstr = \"\";\n\t}\n\t\n\treturn str;\n}\n\n\n\nfunction formatPort(urlObj, options)\n{\n\tif (urlObj.port && !urlObj.extra.portIsDefault && urlObj.extra.relation.maximumHost)\n\t{\n\t\treturn \":\" + urlObj.port;\n\t}\n\t\n\treturn \"\";\n}\n\n\n\nfunction formatQuery(urlObj, options)\n{\n\treturn showQuery(urlObj,options) ? getQuery(urlObj, options) : \"\";\n}\n\n\n\nfunction formatResource(urlObj, options)\n{\n\treturn showResource(urlObj,options) ? urlObj.resource : \"\";\n}\n\n\n\nfunction formatScheme(urlObj, options)\n{\n\tvar str = \"\";\n\t\n\tif (urlObj.extra.relation.maximumHost || options.output===constants.ABSOLUTE)\n\t{\n\t\tif (!urlObj.extra.relation.minimumScheme || !options.schemeRelative || options.output===constants.ABSOLUTE)\n\t\t{\n\t\t\tstr += urlObj.scheme + \"://\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr += \"//\";\n\t\t}\n\t}\n\t\n\treturn str;\n}\n\n\n\nfunction formatUrl(urlObj, options)\n{\n\tvar url = \"\";\n\t\n\turl += formatScheme(urlObj, options);\n\turl += formatAuth(urlObj, options);\n\turl += formatHost(urlObj, options);\n\turl += formatPort(urlObj, options);\n\turl += formatPath(urlObj, options);\n\turl += formatResource(urlObj, options);\n\turl += formatQuery(urlObj, options);\n\turl += formatHash(urlObj, options);\n\t\n\treturn url;\n}\n\n\n\nfunction getQuery(urlObj, options)\n{\n\tvar stripQuery = options.removeEmptyQueries && urlObj.extra.relation.minimumPort;\n\t\n\treturn urlObj.query.string[ stripQuery ? \"stripped\" : \"full\" ];\n}\n\n\n\nfunction showQuery(urlObj, options)\n{\n\treturn !urlObj.extra.relation.minimumQuery || options.output===constants.ABSOLUTE || options.output===constants.ROOT_RELATIVE;\n}\n\n\n\nfunction showResource(urlObj, options)\n{\n\tvar removeIndex = options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex;\n\tvar removeMatchingResource = urlObj.extra.relation.minimumResource && options.output!==constants.ABSOLUTE && options.output!==constants.ROOT_RELATIVE;\n\t\n\treturn !!urlObj.resource && !removeMatchingResource && !removeIndex;\n}\n\n\n\nmodule.exports = formatUrl;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/format.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/relateurl/lib/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar constants  = __webpack_require__(/*! ./constants */ \"./node_modules/relateurl/lib/constants.js\");\nvar formatUrl  = __webpack_require__(/*! ./format */ \"./node_modules/relateurl/lib/format.js\");\nvar getOptions = __webpack_require__(/*! ./options */ \"./node_modules/relateurl/lib/options.js\");\nvar objUtils   = __webpack_require__(/*! ./util/object */ \"./node_modules/relateurl/lib/util/object.js\");\nvar parseUrl   = __webpack_require__(/*! ./parse */ \"./node_modules/relateurl/lib/parse/index.js\");\nvar relateUrl  = __webpack_require__(/*! ./relate */ \"./node_modules/relateurl/lib/relate/index.js\");\n\n\n\nfunction RelateUrl(from, options)\n{\n\tthis.options = getOptions(options,\n\t{\n\t\tdefaultPorts: {ftp:21, http:80, https:443},\n\t\tdirectoryIndexes: [\"index.html\"],\n\t\tignore_www: false,\n\t\toutput: RelateUrl.SHORTEST,\n\t\trejectedSchemes: [\"data\",\"javascript\",\"mailto\"],\n\t\tremoveAuth: false,\n\t\tremoveDirectoryIndexes: true,\n\t\tremoveEmptyQueries: false,\n\t\tremoveRootTrailingSlash: true,\n\t\tschemeRelative: true,\n\t\tsite: undefined,\n\t\tslashesDenoteHost: true\n\t});\n\t\n\tthis.from = parseUrl.from(from, this.options, null);\n}\n\n\n\n/*\n\tUsage: instance=new RelateUrl(); instance.relate();\n*/\nRelateUrl.prototype.relate = function(from, to, options)\n{\n\t// relate(to,options)\n\tif ( objUtils.isPlainObject(to) )\n\t{\n\t\toptions = to;\n\t\tto = from;\n\t\tfrom = null;\n\t}\n\t// relate(to)\n\telse if (!to)\n\t{\n\t\tto = from;\n\t\tfrom = null;\n\t}\n\t\n\toptions = getOptions(options, this.options);\n\tfrom = from || options.site;\n\tfrom = parseUrl.from(from, options, this.from);\n\t\n\tif (!from || !from.href)\n\t{\n\t\tthrow new Error(\"from value not defined.\");\n\t}\n\telse if (from.extra.hrefInfo.minimumPathOnly)\n\t{\n\t\tthrow new Error(\"from value supplied is not absolute: \"+from.href);\n\t}\n\t\n\tto = parseUrl.to(to, options);\n\t\n\tif (to.valid===false) return to.href;\n\t\n\tto = relateUrl(from, to, options);\n\tto = formatUrl(to, options);\n\t\n\treturn to;\n}\n\n\n\n/*\n\tUsage: RelateUrl.relate();\n*/\nRelateUrl.relate = function(from, to, options)\n{\n\treturn new RelateUrl().relate(from, to, options);\n}\n\n\n\n// Make constants accessible from API\nobjUtils.shallowMerge(RelateUrl, constants);\n\n\n\nmodule.exports = RelateUrl;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/index.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/options.js":
/*!***********************************************!*\
  !*** ./node_modules/relateurl/lib/options.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar objUtils = __webpack_require__(/*! ./util/object */ \"./node_modules/relateurl/lib/util/object.js\");\n\n\n\nfunction getOptions(options, defaults)\n{\n\tif ( objUtils.isPlainObject(options) )\n\t{\n\t\tvar newOptions = {};\n\t\t\n\t\tfor (var i in defaults)\n\t\t{\n\t\t\tif ( defaults.hasOwnProperty(i) )\n\t\t\t{\n\t\t\t\tif (options[i] !== undefined)\n\t\t\t\t{\n\t\t\t\t\tnewOptions[i] = mergeOption(options[i], defaults[i]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewOptions[i] = defaults[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn newOptions;\n\t}\n\telse\n\t{\n\t\treturn defaults;\n\t}\n}\n\n\n\nfunction mergeOption(newValues, defaultValues)\n{\n\tif (defaultValues instanceof Object && newValues instanceof Object)\n\t{\n\t\tif (defaultValues instanceof Array && newValues instanceof Array)\n\t\t{\n\t\t\treturn defaultValues.concat(newValues);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn objUtils.shallowMerge(newValues, defaultValues);\n\t\t}\n\t}\n\t\n\treturn newValues;\n}\n\n\n\nmodule.exports = getOptions;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/options.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/parse/host.js":
/*!**************************************************!*\
  !*** ./node_modules/relateurl/lib/parse/host.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction parseHost(urlObj, options)\n{\n\t// TWEAK :: condition only for speed optimization\n\tif (options.ignore_www)\n\t{\n\t\tvar host = urlObj.host.full;\n\t\t\n\t\tif (host)\n\t\t{\n\t\t\tvar stripped = host;\n\t\t\t\n\t\t\tif (host.indexOf(\"www.\") === 0)\n\t\t\t{\n\t\t\t\tstripped = host.substr(4);\n\t\t\t}\n\t\t\t\n\t\t\turlObj.host.stripped = stripped;\n\t\t}\n\t}\n}\n\n\n\nmodule.exports = parseHost;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/parse/host.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/parse/hrefInfo.js":
/*!******************************************************!*\
  !*** ./node_modules/relateurl/lib/parse/hrefInfo.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction hrefInfo(urlObj)\n{\n\tvar minimumPathOnly     = (!urlObj.scheme && !urlObj.auth && !urlObj.host.full && !urlObj.port);\n\tvar minimumResourceOnly = (minimumPathOnly && !urlObj.path.absolute.string);\n\tvar minimumQueryOnly    = (minimumResourceOnly && !urlObj.resource);\n\tvar minimumHashOnly     = (minimumQueryOnly && !urlObj.query.string.full.length);\n\tvar empty               = (minimumHashOnly && !urlObj.hash);\n\t\n\turlObj.extra.hrefInfo.minimumPathOnly     = minimumPathOnly;\n\turlObj.extra.hrefInfo.minimumResourceOnly = minimumResourceOnly;\n\turlObj.extra.hrefInfo.minimumQueryOnly    = minimumQueryOnly;\n\turlObj.extra.hrefInfo.minimumHashOnly     = minimumHashOnly;\n\turlObj.extra.hrefInfo.empty = empty;\n}\n\n\n\nmodule.exports = hrefInfo;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/parse/hrefInfo.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/parse/index.js":
/*!***************************************************!*\
  !*** ./node_modules/relateurl/lib/parse/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar hrefInfo   = __webpack_require__(/*! ./hrefInfo */ \"./node_modules/relateurl/lib/parse/hrefInfo.js\");\nvar parseHost  = __webpack_require__(/*! ./host */ \"./node_modules/relateurl/lib/parse/host.js\");\nvar parsePath  = __webpack_require__(/*! ./path */ \"./node_modules/relateurl/lib/parse/path.js\");\nvar parsePort  = __webpack_require__(/*! ./port */ \"./node_modules/relateurl/lib/parse/port.js\");\nvar parseQuery = __webpack_require__(/*! ./query */ \"./node_modules/relateurl/lib/parse/query.js\");\nvar parseUrlString = __webpack_require__(/*! ./urlstring */ \"./node_modules/relateurl/lib/parse/urlstring.js\");\nvar pathUtils      = __webpack_require__(/*! ../util/path */ \"./node_modules/relateurl/lib/util/path.js\");\n\n\n\nfunction parseFromUrl(url, options, fallback)\n{\n\tif (url)\n\t{\n\t\tvar urlObj = parseUrl(url, options);\n\t\t\n\t\t// Because the following occurs in the relate stage for \"to\" URLs,\n\t\t// such had to be mostly duplicated here\n\t\t\n\t\tvar pathArray = pathUtils.resolveDotSegments(urlObj.path.absolute.array);\n\t\t\n\t\turlObj.path.absolute.array  = pathArray;\n\t\turlObj.path.absolute.string = \"/\" + pathUtils.join(pathArray);\n\t\t\n\t\treturn urlObj;\n\t}\n\telse\n\t{\n\t\treturn fallback;\n\t}\n}\n\n\n\nfunction parseUrl(url, options)\n{\n\tvar urlObj = parseUrlString(url, options);\n\t\n\tif (urlObj.valid===false) return urlObj;\n\t\n\tparseHost(urlObj, options);\n\tparsePort(urlObj, options);\n\tparsePath(urlObj, options);\n\tparseQuery(urlObj, options);\n\threfInfo(urlObj);\n\t\n\treturn urlObj;\n}\n\n\n\nmodule.exports =\n{\n\tfrom: parseFromUrl,\n\tto:   parseUrl\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/parse/index.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/parse/path.js":
/*!**************************************************!*\
  !*** ./node_modules/relateurl/lib/parse/path.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction isDirectoryIndex(resource, options)\n{\n\tvar verdict = false;\n\t\n\toptions.directoryIndexes.every( function(index)\n\t{\n\t\tif (index === resource)\n\t\t{\n\t\t\tverdict = true;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t});\n\t\n\treturn verdict;\n}\n\n\n\nfunction parsePath(urlObj, options)\n{\n\tvar path = urlObj.path.absolute.string;\n\t\n\tif (path)\n\t{\n\t\tvar lastSlash = path.lastIndexOf(\"/\");\n\t\t\n\t\tif (lastSlash > -1)\n\t\t{\n\t\t\tif (++lastSlash < path.length)\n\t\t\t{\n\t\t\t\tvar resource = path.substr(lastSlash);\n\t\t\t\t\n\t\t\t\tif (resource!==\".\" && resource!==\"..\")\n\t\t\t\t{\n\t\t\t\t\turlObj.resource = resource;\n\t\t\t\t\tpath = path.substr(0, lastSlash);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpath += \"/\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\turlObj.path.absolute.string = path;\n\t\t\turlObj.path.absolute.array = splitPath(path);\n\t\t}\n\t\telse if (path===\".\" || path===\"..\")\n\t\t{\n\t\t\t// \"..?var\", \"..#anchor\", etc ... not \"..index.html\"\n\t\t\tpath += \"/\";\n\t\t\t\n\t\t\turlObj.path.absolute.string = path;\n\t\t\turlObj.path.absolute.array = splitPath(path);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Resource-only\n\t\t\turlObj.resource = path;\n\t\t\turlObj.path.absolute.string = null;\n\t\t}\n\t\t\n\t\turlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);\n\t}\n\t// Else: query/hash-only or empty\n}\n\n\n\nfunction splitPath(path)\n{\n\t// TWEAK :: condition only for speed optimization\n\tif (path !== \"/\")\n\t{\n\t\tvar cleaned = [];\n\t\t\n\t\tpath.split(\"/\").forEach( function(dir)\n\t\t{\n\t\t\t// Cleanup -- splitting \"/dir/\" becomes [\"\",\"dir\",\"\"]\n\t\t\tif (dir !== \"\")\n\t\t\t{\n\t\t\t\tcleaned.push(dir);\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn cleaned;\n\t}\n\telse\n\t{\n\t\t// Faster to skip the above block and just create an array\n\t\treturn [];\n\t}\n}\n\n\n\nmodule.exports = parsePath;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/parse/path.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/parse/port.js":
/*!**************************************************!*\
  !*** ./node_modules/relateurl/lib/parse/port.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction parsePort(urlObj, options)\n{\n\tvar defaultPort = -1;\n\t\n\tfor (var i in options.defaultPorts)\n\t{\n\t\tif ( i===urlObj.scheme && options.defaultPorts.hasOwnProperty(i) )\n\t\t{\n\t\t\tdefaultPort = options.defaultPorts[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (defaultPort > -1)\n\t{\n\t\t// Force same type as urlObj.port\n\t\tdefaultPort = defaultPort.toString();\n\t\t\n\t\tif (urlObj.port === null)\n\t\t{\n\t\t\turlObj.port = defaultPort;\n\t\t}\n\t\t\n\t\turlObj.extra.portIsDefault = (urlObj.port === defaultPort);\n\t}\n}\n\n\n\nmodule.exports = parsePort;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/parse/port.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/parse/query.js":
/*!***************************************************!*\
  !*** ./node_modules/relateurl/lib/parse/query.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n\nfunction parseQuery(urlObj, options)\n{\n\turlObj.query.string.full = stringify(urlObj.query.object, false);\n\t\n\t// TWEAK :: condition only for speed optimization\n\tif (options.removeEmptyQueries)\n\t{\n\t\turlObj.query.string.stripped = stringify(urlObj.query.object, true);\n\t}\n}\n\n\n\nfunction stringify(queryObj, removeEmptyQueries)\n{\n\tvar count = 0;\n\tvar str = \"\";\n\t\n\tfor (var i in queryObj)\n\t{\n\t\tif ( i!==\"\" && hasOwnProperty.call(queryObj, i)===true )\n\t\t{\n\t\t\tvar value = queryObj[i];\n\t\t\t\n\t\t\tif (value !== \"\" || !removeEmptyQueries)\n\t\t\t{\n\t\t\t\tstr += (++count===1) ? \"?\" : \"&\";\n\t\t\t\t\n\t\t\t\ti = encodeURIComponent(i);\n\t\t\t\t\n\t\t\t\tif (value !== \"\")\n\t\t\t\t{\n\t\t\t\t\tstr += i +\"=\"+ encodeURIComponent(value).replace(/%20/g,\"+\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstr += i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn str;\n}\n\n\n\nmodule.exports = parseQuery;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/parse/query.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/parse/urlstring.js":
/*!*******************************************************!*\
  !*** ./node_modules/relateurl/lib/parse/urlstring.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _parseUrl = __webpack_require__(/*! url */ \"./node_modules/url/url.js\").parse;\n\n\n\n/*\n\tCustomize the URL object that Node generates\n\tbecause:\n\t\n\t* necessary data for later\n\t* urlObj.host is useless\n\t* urlObj.hostname is too long\n\t* urlObj.path is useless\n\t* urlObj.pathname is too long\n\t* urlObj.protocol is inaccurate; should be called \"scheme\"\n\t* urlObj.search is mostly useless\n*/\nfunction clean(urlObj)\n{\n\tvar scheme = urlObj.protocol;\n\t\n\tif (scheme)\n\t{\n\t\t// Remove \":\" suffix\n\t\tif (scheme.indexOf(\":\") === scheme.length-1)\n\t\t{\n\t\t\tscheme = scheme.substr(0, scheme.length-1);\n\t\t}\n\t}\n\t\n\turlObj.host =\n\t{\n\t\t// TODO :: unescape(encodeURIComponent(s)) ? ... http://ecmanaut.blogspot.ca/2006/07/encoding-decoding-utf8-in-javascript.html\n\t\tfull: urlObj.hostname,\n\t\tstripped: null\n\t};\n\t\n\turlObj.path =\n\t{\n\t\tabsolute:\n\t\t{\n\t\t\tarray: null,\n\t\t\tstring: urlObj.pathname\n\t\t},\n\t\trelative:\n\t\t{\n\t\t\tarray: null,\n\t\t\tstring: null\n\t\t}\n\t};\n\t\n\turlObj.query =\n\t{\n\t\tobject: urlObj.query,\n\t\tstring:\n\t\t{\n\t\t\tfull: null,\n\t\t\tstripped: null\n\t\t}\n\t};\n\t\n\turlObj.extra =\n\t{\n\t\threfInfo:\n\t\t{\n\t\t\tminimumPathOnly: null,\n\t\t\tminimumResourceOnly: null,\n\t\t\tminimumQueryOnly: null,\n\t\t\tminimumHashOnly: null,\n\t\t\tempty: null,\n\t\t\t\n\t\t\tseparatorOnlyQuery: urlObj.search===\"?\"\n\t\t},\n\t\tportIsDefault: null,\n\t\trelation:\n\t\t{\n\t\t\tmaximumScheme: null,\n\t\t\tmaximumAuth: null,\n\t\t\tmaximumHost: null,\n\t\t\tmaximumPort: null,\n\t\t\tmaximumPath: null,\n\t\t\tmaximumResource: null,\n\t\t\tmaximumQuery: null,\n\t\t\tmaximumHash: null,\n\t\t\t\n\t\t\tminimumScheme: null,\n\t\t\tminimumAuth: null,\n\t\t\tminimumHost: null,\n\t\t\tminimumPort: null,\n\t\t\tminimumPath: null,\n\t\t\tminimumResource: null,\n\t\t\tminimumQuery: null,\n\t\t\tminimumHash: null,\n\t\t\t\n\t\t\toverridesQuery: null\n\t\t},\n\t\tresourceIsIndex: null,\n\t\tslashes: urlObj.slashes\n\t};\n\t\n\turlObj.resource = null;\n\turlObj.scheme = scheme;\n\tdelete urlObj.hostname;\n\tdelete urlObj.pathname;\n\tdelete urlObj.protocol;\n\tdelete urlObj.search;\n\tdelete urlObj.slashes;\n\t\n\treturn urlObj;\n}\n\n\n\nfunction validScheme(url, options)\n{\n\tvar valid = true;\n\t\n\toptions.rejectedSchemes.every( function(rejectedScheme)\n\t{\n\t\tvalid = !(url.indexOf(rejectedScheme+\":\") === 0);\n\t\t\n\t\t// Break loop\n\t\treturn valid;\n\t});\n\t\n\treturn valid;\n}\n\n\n\nfunction parseUrlString(url, options)\n{\n\tif ( validScheme(url,options) )\n\t{\n\t\treturn clean( _parseUrl(url, true, options.slashesDenoteHost) );\n\t}\n\telse\n\t{\n\t\treturn {href:url, valid:false};\n\t}\n}\n\n\n\nmodule.exports = parseUrlString;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/parse/urlstring.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/relate/absolutize.js":
/*!*********************************************************!*\
  !*** ./node_modules/relateurl/lib/relate/absolutize.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar findRelation = __webpack_require__(/*! ./findRelation */ \"./node_modules/relateurl/lib/relate/findRelation.js\");\nvar objUtils     = __webpack_require__(/*! ../util/object */ \"./node_modules/relateurl/lib/util/object.js\");\nvar pathUtils    = __webpack_require__(/*! ../util/path */ \"./node_modules/relateurl/lib/util/path.js\");\n\n\n\nfunction absolutize(urlObj, siteUrlObj, options)\n{\n\tfindRelation.upToPath(urlObj, siteUrlObj, options);\n\t\n\t// Fill in relative URLs\n\tif (urlObj.extra.relation.minimumScheme) urlObj.scheme = siteUrlObj.scheme;\n\tif (urlObj.extra.relation.minimumAuth)   urlObj.auth   = siteUrlObj.auth;\n\tif (urlObj.extra.relation.minimumHost)   urlObj.host   = objUtils.clone(siteUrlObj.host);\n\tif (urlObj.extra.relation.minimumPort)   copyPort(urlObj, siteUrlObj);\n\tif (urlObj.extra.relation.minimumScheme) copyPath(urlObj, siteUrlObj);\n\t\n\t// Check remaining relativeness now that path has been copied and/or resolved\n\tfindRelation.pathOn(urlObj, siteUrlObj, options);\n\t\n\t// Fill in relative URLs\n\tif (urlObj.extra.relation.minimumResource) copyResource(urlObj, siteUrlObj);\n\tif (urlObj.extra.relation.minimumQuery)    urlObj.query = objUtils.clone(siteUrlObj.query);\n\tif (urlObj.extra.relation.minimumHash)     urlObj.hash  = siteUrlObj.hash;\n}\n\n\n\n/*\n\tGet an absolute path that's relative to site url.\n*/\nfunction copyPath(urlObj, siteUrlObj)\n{\n\tif (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly)\n\t{\n\t\tvar pathArray = urlObj.path.absolute.array;\n\t\tvar pathString = \"/\";\n\t\t\n\t\t// If not erroneous URL\n\t\tif (pathArray)\n\t\t{\n\t\t\t// If is relative path\n\t\t\tif (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf(\"/\")!==0)\n\t\t\t{\n\t\t\t\t// Append path to site path\n\t\t\t\tpathArray = siteUrlObj.path.absolute.array.concat(pathArray);\n\t\t\t}\n\t\t\t\n\t\t\tpathArray   = pathUtils.resolveDotSegments(pathArray);\n\t\t\tpathString += pathUtils.join(pathArray);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpathArray = [];\n\t\t}\n\t\t\n\t\turlObj.path.absolute.array  = pathArray;\n\t\turlObj.path.absolute.string = pathString;\n\t}\n\telse\n\t{\n\t\t// Resource-, query- or hash-only or empty\n\t\turlObj.path = objUtils.clone(siteUrlObj.path);\n\t}\n}\n\n\n\nfunction copyPort(urlObj, siteUrlObj)\n{\n\turlObj.port = siteUrlObj.port;\n\t\n\turlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;\n}\n\n\n\nfunction copyResource(urlObj, siteUrlObj)\n{\n\turlObj.resource = siteUrlObj.resource;\n\t\n\turlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;\n}\n\n\n\nmodule.exports = absolutize;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/relate/absolutize.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/relate/findRelation.js":
/*!***********************************************************!*\
  !*** ./node_modules/relateurl/lib/relate/findRelation.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction findRelation_upToPath(urlObj, siteUrlObj, options)\n{\n\t// Path- or root-relative URL\n\tvar pathOnly = urlObj.extra.hrefInfo.minimumPathOnly;\n\t\n\t// Matching scheme, scheme-relative or path-only\n\tvar minimumScheme = (urlObj.scheme===siteUrlObj.scheme || !urlObj.scheme);\n\t\n\t// Matching auth, ignoring auth or path-only\n\tvar minimumAuth = minimumScheme && (urlObj.auth===siteUrlObj.auth || options.removeAuth || pathOnly);\n\t\n\t// Matching host or path-only\n\tvar www = options.ignore_www ? \"stripped\" : \"full\";\n\tvar minimumHost = minimumAuth && (urlObj.host[www]===siteUrlObj.host[www] || pathOnly);\n\t\n\t// Matching port or path-only\n\tvar minimumPort = minimumHost && (urlObj.port===siteUrlObj.port || pathOnly);\n\t\n\turlObj.extra.relation.minimumScheme = minimumScheme;\n\turlObj.extra.relation.minimumAuth   = minimumAuth;\n\turlObj.extra.relation.minimumHost   = minimumHost;\n\turlObj.extra.relation.minimumPort   = minimumPort;\n\t\n\turlObj.extra.relation.maximumScheme = !minimumScheme || minimumScheme && !minimumAuth;\n\turlObj.extra.relation.maximumAuth   = !minimumScheme || minimumScheme && !minimumHost;\n\turlObj.extra.relation.maximumHost   = !minimumScheme || minimumScheme && !minimumPort;\n}\n\n\n\nfunction findRelation_pathOn(urlObj, siteUrlObj, options)\n{\n\tvar queryOnly = urlObj.extra.hrefInfo.minimumQueryOnly;\n\tvar hashOnly  = urlObj.extra.hrefInfo.minimumHashOnly;\n\tvar empty     = urlObj.extra.hrefInfo.empty;\t// not required, but self-documenting\n\t\n\t// From upToPath()\n\tvar minimumPort   = urlObj.extra.relation.minimumPort;\n\tvar minimumScheme = urlObj.extra.relation.minimumScheme;\n\t\n\t// Matching port and path\n\tvar minimumPath = minimumPort && urlObj.path.absolute.string===siteUrlObj.path.absolute.string;\n\t\n\t// Matching resource or query/hash-only or empty\n\tvar matchingResource = (urlObj.resource===siteUrlObj.resource || !urlObj.resource && siteUrlObj.extra.resourceIsIndex) || (options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex && !siteUrlObj.resource);\n\tvar minimumResource = minimumPath && (matchingResource || queryOnly || hashOnly || empty);\n\t\n\t// Matching query or hash-only/empty\n\tvar query = options.removeEmptyQueries ? \"stripped\" : \"full\";\n\tvar urlQuery = urlObj.query.string[query];\n\tvar siteUrlQuery = siteUrlObj.query.string[query];\n\tvar minimumQuery = (minimumResource && !!urlQuery && urlQuery===siteUrlQuery) || ((hashOnly || empty) && !urlObj.extra.hrefInfo.separatorOnlyQuery);\n\t\n\tvar minimumHash = minimumQuery && urlObj.hash===siteUrlObj.hash;\n\t\n\turlObj.extra.relation.minimumPath     = minimumPath;\n\turlObj.extra.relation.minimumResource = minimumResource;\n\turlObj.extra.relation.minimumQuery    = minimumQuery;\n\turlObj.extra.relation.minimumHash     = minimumHash;\n\t\n\turlObj.extra.relation.maximumPort     = !minimumScheme || minimumScheme && !minimumPath;\n\turlObj.extra.relation.maximumPath     = !minimumScheme || minimumScheme && !minimumResource;\n\turlObj.extra.relation.maximumResource = !minimumScheme || minimumScheme && !minimumQuery;\n\turlObj.extra.relation.maximumQuery    = !minimumScheme || minimumScheme && !minimumHash;\n\turlObj.extra.relation.maximumHash     = !minimumScheme || minimumScheme && !minimumHash;\t// there's nothing after hash, so it's the same as maximumQuery\n\t\n\t// Matching path and/or resource with existing but non-matching site query\n\turlObj.extra.relation.overridesQuery  = minimumPath && urlObj.extra.relation.maximumResource && !minimumQuery && !!siteUrlQuery;\n}\n\n\n\nmodule.exports =\n{\n\tpathOn:   findRelation_pathOn,\n\tupToPath: findRelation_upToPath\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/relate/findRelation.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/relate/index.js":
/*!****************************************************!*\
  !*** ./node_modules/relateurl/lib/relate/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar absolutize = __webpack_require__(/*! ./absolutize */ \"./node_modules/relateurl/lib/relate/absolutize.js\");\nvar relativize = __webpack_require__(/*! ./relativize */ \"./node_modules/relateurl/lib/relate/relativize.js\");\n\n\n\nfunction relateUrl(siteUrlObj, urlObj, options)\n{\n\tabsolutize(urlObj, siteUrlObj, options);\n\trelativize(urlObj, siteUrlObj, options);\n\t\n\treturn urlObj;\n}\n\n\n\nmodule.exports = relateUrl;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/relate/index.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/relate/relativize.js":
/*!*********************************************************!*\
  !*** ./node_modules/relateurl/lib/relate/relativize.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar pathUtils = __webpack_require__(/*! ../util/path */ \"./node_modules/relateurl/lib/util/path.js\");\n\n\n\n/*\n\tGet a path relative to the site path.\n*/\nfunction relatePath(absolutePath, siteAbsolutePath)\n{\n\tvar relativePath = [];\n\t\n\t// At this point, it's related to the host/port\n\tvar related = true;\n\tvar parentIndex = -1;\n\t\n\t// Find parents\n\tsiteAbsolutePath.forEach( function(siteAbsoluteDir, i)\n\t{\n\t\tif (related)\n\t\t{\n\t\t\tif (absolutePath[i] !== siteAbsoluteDir)\n\t\t\t{\n\t\t\t\trelated = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparentIndex = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!related)\n\t\t{\n\t\t\t// Up one level\n\t\t\trelativePath.push(\"..\");\n\t\t}\n\t});\n\t\n\t// Form path\n\tabsolutePath.forEach( function(dir, i)\n\t{\n\t\tif (i > parentIndex)\n\t\t{\n\t\t\trelativePath.push(dir);\n\t\t}\n\t});\n\t\n\treturn relativePath;\n}\n\n\n\nfunction relativize(urlObj, siteUrlObj, options)\n{\n\tif (urlObj.extra.relation.minimumScheme)\n\t{\n\t\tvar pathArray = relatePath(urlObj.path.absolute.array, siteUrlObj.path.absolute.array);\n\t\t\n\t\turlObj.path.relative.array  = pathArray;\n\t\turlObj.path.relative.string = pathUtils.join(pathArray);\n\t}\n}\n\n\n\nmodule.exports = relativize;\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/relate/relativize.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/util/object.js":
/*!***************************************************!*\
  !*** ./node_modules/relateurl/lib/util/object.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n\tDeep-clone an object.\n*/\nfunction clone(obj)\n{\n\tif (obj instanceof Object)\n\t{\n\t\tvar clonedObj = (obj instanceof Array) ? [] : {};\n\t\t\n\t\tfor (var i in obj)\n\t\t{\n\t\t\tif ( obj.hasOwnProperty(i) )\n\t\t\t{\n\t\t\t\tclonedObj[i] = clone( obj[i] );\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn clonedObj;\n\t}\n\t\n\treturn obj;\n}\n\n\n\n/*\n\thttps://github.com/jonschlinkert/is-plain-object\n*/\nfunction isPlainObject(obj)\n{\n\treturn !!obj && typeof obj===\"object\" && obj.constructor===Object;\n}\n\n\n\n/*\n\tShallow-merge two objects.\n*/\nfunction shallowMerge(target, source)\n{\n\tif (target instanceof Object && source instanceof Object)\n\t{\n\t\tfor (var i in source)\n\t\t{\n\t\t\tif ( source.hasOwnProperty(i) )\n\t\t\t{\n\t\t\t\ttarget[i] = source[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn target;\n}\n\n\n\nmodule.exports =\n{\n\tclone: clone,\n\tisPlainObject: isPlainObject,\n\tshallowMerge: shallowMerge\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/util/object.js?");

/***/ }),

/***/ "./node_modules/relateurl/lib/util/path.js":
/*!*************************************************!*\
  !*** ./node_modules/relateurl/lib/util/path.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction joinPath(pathArray)\n{\n\tif (pathArray.length > 0)\n\t{\n\t\treturn pathArray.join(\"/\") + \"/\";\n\t}\n\telse\n\t{\n\t\treturn \"\";\n\t}\n}\n\n\n\nfunction resolveDotSegments(pathArray)\n{\n\tvar pathAbsolute = [];\n\t\n\tpathArray.forEach( function(dir)\n\t{\n\t\tif (dir !== \"..\")\n\t\t{\n\t\t\tif (dir !== \".\")\n\t\t\t{\n\t\t\t\tpathAbsolute.push(dir);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Remove parent\n\t\t\tif (pathAbsolute.length > 0)\n\t\t\t{\n\t\t\t\tpathAbsolute.splice(pathAbsolute.length-1, 1);\n\t\t\t}\n\t\t}\n\t});\n\t\n\treturn pathAbsolute;\n}\n\n\n\nmodule.exports =\n{\n\tjoin: joinPath,\n\tresolveDotSegments: resolveDotSegments\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/relateurl/lib/util/path.js?");

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/safe-buffer/index.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\ninherits(Stream, EE);\nStream.Readable = __webpack_require__(/*! readable-stream/readable.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/readable-browser.js\");\nStream.Writable = __webpack_require__(/*! readable-stream/writable.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/writable-browser.js\");\nStream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/duplex-browser.js\");\nStream.Transform = __webpack_require__(/*! readable-stream/transform.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/transform.js\");\nStream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/passthrough.js\");\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/index.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/duplex-browser.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/duplex-browser.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js\");\n\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/duplex-browser.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nvar Readable = __webpack_require__(/*! ./_stream_readable */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_readable.js\");\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_writable.js\");\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_passthrough.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n\n\nmodule.exports = PassThrough;\n\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_transform.js\");\n\n/*<replacement>*/\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_passthrough.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_readable.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_readable.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/stream-browserify/node_modules/safe-buffer/index.js\").Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = __webpack_require__(/*! util */ 0);\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/BufferList.js\");\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_readable.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_transform.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_transform.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n\n\nmodule.exports = Transform;\n\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js\");\n\n/*<replacement>*/\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_transform.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_writable.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_writable.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: __webpack_require__(/*! util-deprecate */ \"./node_modules/util-deprecate/browser.js\")\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/stream-browserify/node_modules/safe-buffer/index.js\").Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js\");\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_writable.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/stream-browserify/node_modules/safe-buffer/index.js\").Buffer;\nvar util = __webpack_require__(/*! util */ 1);\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/BufferList.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/destroy.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams/stream-browser.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/passthrough.js":
/*!************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/passthrough.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./readable */ \"./node_modules/stream-browserify/node_modules/readable-stream/readable-browser.js\").PassThrough\n\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/passthrough.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/readable-browser.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/readable-browser.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_readable.js\");\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_writable.js\");\nexports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_duplex.js\");\nexports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_transform.js\");\nexports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_passthrough.js\");\n\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/readable-browser.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/transform.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/transform.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./readable */ \"./node_modules/stream-browserify/node_modules/readable-stream/readable-browser.js\").Transform\n\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/transform.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/readable-stream/writable-browser.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/readable-stream/writable-browser.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/stream-browserify/node_modules/readable-stream/lib/_stream_writable.js\");\n\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/readable-stream/writable-browser.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/node_modules/safe-buffer/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/stream-browserify/node_modules/safe-buffer/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//# sourceURL=webpack://blues/./node_modules/stream-browserify/node_modules/safe-buffer/index.js?");

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n\n//# sourceURL=webpack://blues/./node_modules/string_decoder/lib/string_decoder.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/uri-template-lite/index.js":
/*!*************************************************!*\
  !*** ./node_modules/uri-template-lite/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n\n/**\n * @version    19.12.0\n * @author     Lauri Rooden <lauri@rooden.ee>\n * @license    MIT License\n */\n\n\n\n!function(URI) {\n\t\"use strict\";\n\n\t/**\n\t * URI Template\n\t * @see http://tools.ietf.org/html/rfc6570\n\t */\n\n\tvar RESERVED = /[!'()]/g\n\t// /[[\\]:\\/!#$&()*+,;='?@]/g\n\t, SEPARATORS = {\"\": \",\", \"+\": \",\", \"#\": \",\", \"?\": \"&\"}\n\t, escapeRe = /[$-\\/?[-^{|}]/g\n\t, expandRe = /\\{([#&+.\\/;?]?)((?:[\\w%.]+(\\*|:\\d+)?,?)+)\\}/g\n\t, parseRe  = RegExp(expandRe.source + \"|.[^{]*?\", \"g\")\n\n\t/*** EXPAND ***/\n\tfunction encodeNormal(val) {\n\t\treturn encodeURIComponent(val).replace(RESERVED, escape)\n\t}\n\n\tfunction notNull(s) {\n\t\treturn s != null\n\t}\n\n\tfunction mapCleanJoin(arr, mapFn, joinStr) {\n\t\tarr = arr.map(mapFn).filter(notNull)\n\t\treturn arr.length && arr.join(joinStr)\n\t}\n\n\tfunction expand(template, data) {\n\t\treturn template.replace(expandRe, function(_, op, vals) {\n\t\t\tvar sep = SEPARATORS[op] || op\n\t\t\t, named = sep == \";\" || sep == \"&\"\n\t\t\t, enc = op && sep == \",\" ? encodeURI : encodeNormal\n\t\t\t, out = mapCleanJoin(vals.split(\",\"), function(_name) {\n\t\t\t\tvar mod = _name.split(/[*:]/)\n\t\t\t\t, name = mod[0]\n\t\t\t\t, val = data[name]\n\n\t\t\t\tif (val == null) return\n\n\t\t\t\tif (typeof val == \"object\") {\n\t\t\t\t\tmod = name != _name\n\t\t\t\t\tif (Array.isArray(val)) {\n\t\t\t\t\t\tval = mapCleanJoin(val, enc, mod ? named ? sep + name + \"=\" : sep : \",\" )\n\t\t\t\t\t} else {\n\t\t\t\t\t\tval = mapCleanJoin(Object.keys(val), function(key) {\n\t\t\t\t\t\t\treturn enc(key) + (mod ? \"=\" : \",\") + enc(val[key])\n\t\t\t\t\t\t}, mod && (named || sep == \"/\") ? sep : \",\")\n\t\t\t\t\t\tif (mod) named = 0\n\t\t\t\t\t}\n\t\t\t\t\tif (!val) return\n\t\t\t\t} else {\n\t\t\t\t\tval = enc(mod[1] ? val.slice(0, mod[1]) : val)\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\tnamed ?\n\t\t\t\t\tname + (val || sep == \"&\" ? \"=\" + val : val) :\n\t\t\t\t\tval\n\t\t\t\t)\n\t\t\t}, sep)\n\n\t\t\treturn out || out === \"\" ? (op != \"+\" ? op + out : out) : \"\"\n\t\t}\n\t)}\n\n\tURI.expand = expand\n\t/**/\n\n\tURI.Template = function Template(template) {\n\t\tvar self = this\n\t\t//if (!(self instanceof Template)) return new Template(template)\n\t\t/*** PARSE ***/\n\t\t, pos = 0\n\t\t, lengths = {}\n\t\t, fnStr = \"\"\n\t\t, reStr = \"^\" + template.replace(parseRe, function(_, op, vals) {\n\t\t\tif (!vals) return escapeRegExp(_)\n\n\t\t\tvar sep = SEPARATORS[op] || op\n\t\t\t, named = sep == \";\" || sep == \"&\"\n\t\t\t, reGroup = vals.split(\",\").map(function(_name) {\n\t\t\t\tvar mod = _name.split(/[*:]/)\n\t\t\t\t, name = mod[0]\n\t\t\t\t, re = (lengths[name] || \"(\") + \".*?)\"\n\n\t\t\t\tpos++\n\t\t\t\t//console.log(\"KEY\", arguments)\n\t\t\t\tif (mod[1]) {\n\t\t\t\t\tre = \"((?:%..|.){1,\" + mod[1] + \"})\"\n\t\t\t\t\tlengths[name] = \"(\\\\\" + pos\n\t\t\t\t}\n\t\t\t\t//TODO: decodeURIComponent throws an Error on invalid input, add try-catch\n\t\t\t\tfnStr += \"t=($[\" + pos + \"]||'').split('\" + sep + \"').map(decodeURIComponent);\"\n\t\t\t\tfnStr += \"o[\\\"\" + name + \"\\\"]=t.length>1?t:t[0];\"\n\t\t\t\treturn (\n\t\t\t\t\tnamed ?\n\t\t\t\t\tescapeRegExp(name) + \"(?:=\" + re + \")?\" :\n\t\t\t\t\tsep == \"&\" ?\n\t\t\t\t\tescapeRegExp(name + \"=\") + re :\n\t\t\t\t\tre\n\t\t\t\t)\n\t\t\t}).join(escapeRegExp(sep))\n\t\t\treturn (op != \"+\" ? escapeRegExp(op) + reGroup : reGroup)\n\n\t\t}) + \"$\"\n\t\t, re = RegExp(reStr)\n\t\t, fn = Function(\"$\", \"var t,o={};\" + fnStr + \"return o\")\n\t\tself.template = template\n\t\tself.match = function(uri) {\n\t\t\tvar match = re.exec(uri)\n\t\t\treturn match && fn(match)\n\t\t}\n\n\t\tfunction escapeRegExp(string) {\n\t\t\treturn string.replace(escapeRe, \"\\\\$&\")\n\t\t}\n\t\t/**/\n\t\t/*** EXPAND ***/\n\t\tself.expand = expand.bind(self, template)\n\t\t/**/\n\t}\n\n// `this` is `exports` in NodeJS and `window` in browser.\n}(this.URI || (this.URI = {}));\n\n\n\n//# sourceURL=webpack://blues/./node_modules/uri-template-lite/index.js?");

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar punycode = __webpack_require__(/*! punycode */ \"./node_modules/node-libs-browser/node_modules/punycode/punycode.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/url/util.js\");\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = __webpack_require__(/*! querystring */ \"./node_modules/querystring-es3/index.js\");\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/url/url.js?");

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n\n\n//# sourceURL=webpack://blues/./node_modules/url/util.js?");

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/util-deprecate/browser.js?");

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//# sourceURL=webpack://blues/./node_modules/util/support/isBufferBrowser.js?");

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://blues/./node_modules/util/util.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://blues/(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack://blues/(webpack)/buildin/module.js?");

/***/ }),

/***/ "./util/blueprint.js":
/*!***************************!*\
  !*** ./util/blueprint.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function BlueprintFunctions (fileSystem) {\n\nconst Path = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\nconst Fetch = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/browser.js\");\nconst N3 = __webpack_require__(/*! n3 */ \"./node_modules/n3/src/index.js\");\nconst { DataFactory } = N3;\nconst { namedNode, literal, defaultGraph, quad } = DataFactory;\nconst C = __webpack_require__(/*! ./constants */ \"./util/constants.js\");\nconst UriTemplate = __webpack_require__(/*! uri-template-lite */ \"./node_modules/uri-template-lite/index.js\").URI.Template;\nconst ShExCore = __webpack_require__(/*! @shexjs/core */ \"./node_modules/@shexjs/core/shex-core.js\")\nconst ShExParser = __webpack_require__(/*! @shexjs/parser */ \"./node_modules/@shexjs/parser/shex-parser.js\")\nconst RExtra = __webpack_require__(/*! ../util/rdf-extra */ \"./util/rdf-extra.js\")\n\nclass Mutex {\n  constructor() {\n    this._locking = Promise.resolve();\n    this._locks = 0;\n  }\n\n  lock () {\n    this._locks += 1;\n    let unlockNext;\n    let willLock = new Promise(resolve => unlockNext = () => {\n      this._locks -= 1;\n      resolve();\n    });\n    let willUnlock = this._locking.then(() => unlockNext);\n    this._locking = this._locking.then(() => willLock);\n    return willUnlock;\n  }\n}\n\n\n/** ManagedContainer - an LDPC with blueprints\n */\nclass ManagedContainer {\n  constructor (url, title, blueprintUrl, blueprintInstancePath) {\n    if (!(url instanceof URL))\n      throw Error(`url ${url} must be an instance of URL`);\n    if (!(url.pathname.endsWith('/')))\n      throw Error(`url ${url} must end with '/'`);\n    if (url.pathname.endsWith('//'))\n      throw Error(`url ${url} ends with '//'`);\n    if (blueprintUrl && !(blueprintUrl instanceof URL))\n      throw Error(`blueprintUrl ${blueprintUrl} must be an instance of URL`);\n    this.url = url;\n    this.prefixes = {};\n    this._mutex = new Mutex()\n    this.graph = new N3.Store();\n    this.subdirs = [];\n\n    this.finish = async () => {\n      // if (!await fileSystem.exists(this.path)) \\__ %%1: yields so even in one thread, someone else can always mkdir first\n      //   await fileSystem.mkdir(this.path);     /   Solid needs a transactions so folks don't trump each other's Containers\n      const unlock = await this._mutex.lock();\n      const [newDir, containerGraph] = await fileSystem.ensureContainer(this.url, this.prefixes, title);\n      this.graph.addQuads(containerGraph.getQuads());\n      if (newDir && blueprintUrl) {\n        const c = containerText(title, blueprintUrl, blueprintInstancePath, this.prefixes);\n        const s = await RExtra.parseTurtle(c, this.url, this.prefixes)\n        this.graph.addQuads(s.getQuads());\n        await fileSystem.writeContainer(this.graph, this.url, this.prefixes);\n      }\n      unlock();\n      return /*this*/ new Promise((acc, rej) => { // !!DELME sleep for a bit to surface bugs\n        setTimeout(() => {\n          acc(this)\n        }, 20);\n      });\n\n      function containerText (title, blueprintUrl, blueprintInstancePath, prefixes) {\n        return `\n@prefix dcterms: <http://purl.org/dc/terms/>.\n@prefix ldp: <http://www.w3.org/ns/ldp#>.\n@prefix foot: <${C.ns_foot}>.\n\n<>\n   foot:blueprintRoot <${blueprintUrl.href}> ;\n   foot:blueprintInstancePath \"${blueprintInstancePath}\" ;\n   foot:blueprintInstanceRoot <${Path.relative(blueprintInstancePath, '')}> .\n`\n      }\n\n    }\n  }\n\n  async write () {\n    const unlock = await this._mutex.lock();\n    await fileSystem.writeContainer(this.graph, this.url, this.prefixes).then(\n      x => { unlock(); return x; },\n      e => /* istanbul ignore next */ { unlock(); throw e; }\n    );\n    return this\n  }\n\n  async remove () {\n    const unlock = await this._mutex.lock();\n    return fileSystem.removeContainer(this.url).then(\n      x => { unlock(); return x; },\n      e => /* istanbul ignore next */ { unlock(); throw e; }\n    );\n  }\n\n  addSubdirs (addUs) {\n    this.subdirs.push(...addUs);\n    return this\n  }\n\n  async merge (payload, base) {\n    // istanbul ignore next\n    const g2 = payload instanceof N3.Store ? payload : await RExtra.parseTurtle(payload, base, this.prefixes);\n    this.graph.addQuads(g2.getQuads());\n    return this\n  }\n\n  addMember (location, blueprintUrl) {\n    this.graph.addQuad(namedNode(this.url.href), namedNode(C.ns_ldp + 'contains'), namedNode(location));\n    return this\n  }\n\n  removeMember (location, blueprintUrl) {\n    this.graph.removeQuad(namedNode(this.url.href), namedNode(C.ns_ldp + 'contains'), namedNode(location));\n    return this\n  }\n\n  indexInstalledBlueprint (location, blueprintUrl) {\n    this.graph.addQuad(namedNode(location), namedNode(C.ns_foot + 'blueprintRoot'), namedNode(blueprintUrl.href));\n    this.prefixes['foot'] = C.ns_foot;\n    return this\n  }\n\n  reuseBlueprint (blueprint) {\n    const q = expectOne(this.graph, null, namedNode(C.ns_foot + 'blueprintRoot'), namedNode(blueprint.url.href), true);\n    return q ? q.subject.value : null;\n  }\n\n  async getRootedBlueprint (cacheDir) {\n    const path = expectOne(this.graph, namedNode(this.url.href), namedNode(C.ns_foot + 'blueprintInstancePath'), null).object.value;\n    const root = expectOne(this.graph, namedNode(this.url.href), namedNode(C.ns_foot + 'blueprintRoot'), null).object.value;\n    return new RemoteBlueprint(new URL(root), cacheDir, path.split(/\\//))\n  }\n}\n\nclass RemoteResource {\n  constructor (url, cacheDir) {\n    if (!(url instanceof URL)) throw Error(`url ${url} must be an instance of URL`);\n    this.url = url;\n    this.prefixes = {};\n    this.graph = null;\n    this.cacheDir = cacheDir;\n    this.cachePath = Path.join('/', cacheDir, cacheName(url.href));\n  }\n\n  async fetch () {\n    let text, mediaType;\n    if (!await fileSystem.exists(new URL(this.cachePath, this.url))) {\n      // The first time this url was seen, put the mime type and payload in the cache.\n\n      const resp = await Fetch(this.url.href);\n      if (!resp.ok)\n        throw await RExtra.makeHttpError('GET', this.url.href, 'schema', resp);\n      text = await resp.text();\n      mediaType = resp.headers.get('content-type').split(/ *;/)[0];\n\n      // Is there any real return on treating the cacheDir as a Container?\n      await fileSystem.write(new URL(this.cachePath, this.url), `${mediaType}\\n\\n${text}`);\n    } else {\n      // Pull mime type and payload from cache.\n\n      const cache = await fileSystem.read(new URL(this.cachePath, this.url));\n      [mediaType, text] = cache.match(/([^\\n]+)\\n\\n(.*)/s).slice(1);\n    }\n    /* istanbul ignore next */switch (mediaType) {\n      case 'application/ld+json':\n      // parse the JSON-LD into n-triples\n      this.graph = await RExtra.parseJsonLd(text, this.url);\n      break;\n      case 'text/turtle':\n      /* istanbul ignore next */this.graph = await RExtra.parseTurtle (text, this.url, this.prefixes);\n      /* istanbul ignore next */break;\n      /* istanbul ignore next */\n      default:\n      throw Error(`unknown media type ${mediaType} when parsing ${this.url.href}`)\n    }\n    return this\n  }\n}\n\n/** reference to a blueprint stored remotely\n *\n * @param url: URL string locating blueprint\n * @param path: refer to a specific node in the blueprint hierarchy\n *\n * A blueprint has contents:\n *     [] a rdf:BlueprintRoot, ldp:BasicContainer ; foot:contents\n *\n * The contents may be ldp:Resources:\n *         [ a ldp:Resource ;\n *           foot:uriTemplate \"{labelName}.ttl\" ;\n *           foot:shape gh:LabelShape ] ],\n * or ldp:Containers, which may either have\n * n nested static directories:\n *         [ a ldp:BasicContainer ;\n *           rdfs:label \"repos\" ;\n *           foot:contents ... ] ,\n *         [ a ldp:BasicContainer ;\n *           rdfs:label \"users\" ;\n *           foot:contents ... ]\n * or one dynamically-named member:\n *         [ a ldp:BasicContainer ;\n *           foot:uriTemplate \"{userName}\" ;\n *           foot:shape gh:PersonShape ;\n *           foot:contents ]\n */\nclass RemoteBlueprint extends RemoteResource {\n  constructor (url, cacheDir, path = []) {\n    super(url, cacheDir);\n    this.path = path\n  }\n\n  /** getRdfRoot - Walk through the path elements to find the target node.\n   */\n  getRdfRoot () {\n    return this.path.reduce((node, name) => {\n      if (name === '.')\n        return node;\n      // Get the contents of the node being examined\n      const cqz = this.graph.getQuads(node, namedNode(C.ns_foot + 'contents'), null);\n      // Find the element which either\n      return cqz.find(\n        q =>\n          // matches the current label in the path\n        this.graph.getQuads(q.object, namedNode(C.ns_rdfs + 'label'), literal(name)).length === 1\n          ||\n          // or has a uriTemplate (so it should be the sole element in the contents)\n        this.graph.getQuads(q.object, namedNode(C.ns_foot + 'uriTemplate'), null).length === 1\n      ).object\n    }, namedNode(this.url.href));\n  }\n\n  /** firstChild - return the first contents.\n   * @returns: { type, name, uriTemplate, shape, contents }\n   */\n  matchingStep (blueprintNode, slug) {\n    const contents = this.graph.getQuads(blueprintNode, namedNode(C.ns_foot + 'contents'))\n          .map(q => q.object);\n    const choices = contents\n          .filter(\n            step => !slug ||\n              new UriTemplate(\n                this.graph.getQuads(step, namedNode(C.ns_foot + 'uriTemplate'))\n                  .map(q2 => q2.object.value)[0]\n              ).match(slug)\n          );\n    if (choices.length === 0)\n      throw new RExtra.UriTemplateMatchError(slug, [], `No match in ${contents.map(t => t.value).join(', ')}`);\n    /* istanbul ignore if */\n    if (choices.length > 1) // @@ Could have been caught by static analysis of blueprint.\n      throw new RExtra.UriTemplateMatchError(slug, [], `Ambiguous match against ${contents.map(t => t.value).join(', ')}`);\n    const g = this.graph;\n    const typeNode = obj('type')\n    const ret = {\n      node: choices[0],\n      typeNode: typeNode,\n      name: obj('name'),\n      uriTemplate: obj('uriTemplate'),\n      shape: obj('shape'),\n      contents: this.graph.getQuads(choices[0], C.ns_foot + 'contents', null).map(t => t.object)\n    };\n    /* istanbul ignore else */ if (typeNode)\n      ret.type = typeNode.value.replace(C.ns_ldp, '');\n    return ret;\n\n    function obj (property) {\n      const q = expectOne(g, choices[0], namedNode(C.ns_foot + property), null, true);\n      return q ? q.object : null;\n    }\n  }\n\n\n  /** instantiateStatic - make all containers implied by the blueprint.\n   * @param {RDFJS.Store} blueprintGraph - context blueprint in an RDF Store.\n   * @param {RDFJS node} stepNode - subject of ldp:contents arcs of the LDP-Cs to be created.\n   * @param {URL} rootUrl - root of the resource hierarchy (path === '/')\n   * @param {string} resourcePath - filesystem path, e.g. \"Share/AppStore1/repos/someOrg/someRepo\"\n   * @param {URL} blueprintUrl - URL of context blueprint\n   * @param {string} pathWithinBlueprint. e.g. \"repos/someOrg/someRepo\"\n   */\n  async instantiateStatic (stepNode, rootUrl, resourcePath, pathWithinBlueprint, parent) {\n    const ret = await new ManagedContainer(new URL(resourcePath, rootUrl),\n                                           `index for nested resource ${pathWithinBlueprint}`,\n                                           this.url, pathWithinBlueprint).finish();\n    try {\n      parent.addMember(ret.url.href, stepNode.url);\n      ret.addSubdirs(await Promise.all(this.graph.getQuads(stepNode, C.ns_foot + 'contents', null).map(async t => {\n        const nested = t.object;\n        const labelT = expectOne(this.graph, nested, namedNode(C.ns_rdfs + 'label'), null, true);\n        if (!labelT)\n          return;\n        const toAdd = labelT.object.value;\n        const step = new RemoteBlueprint(this.url, this.cacheDir, Path.join(pathWithinBlueprint, toAdd));\n        step.graph = this.graph;\n        return await step.instantiateStatic(nested, rootUrl, Path.join(resourcePath, toAdd, '/'), step.path, ret);\n      })));\n      parent.write(); // returns a promise\n      return ret\n    } catch (e) {\n      await ret.remove(); // remove the Container\n      parent.removeMember(ret.url.href, stepNode.url);\n      if (e instanceof RExtra.ManagedError)\n        throw e;\n      throw new RExtra.BlueprintStructureError(rootUrl.href, e.message);\n    }\n  }\n\n  async validate (shape, mediaType, text, base, node) {\n    const prefixes = {};\n    const payloadGraph = mediaType === 'text/turtle'\n          ? await RExtra.parseTurtle(text, base, prefixes)\n          : await RExtra.parseJsonLd(text, base);\n\n    // shape is a URL with a fragement. shapeBase is that URL without the fragment.\n    const shapeBase = new URL(shape);\n    shapeBase.hash = '';\n    let schemaResp = await Fetch(shapeBase); // throws if unresolvable\n    if (!schemaResp.ok) // throws on 404\n      throw new RExtra.NotFoundError(shape, 'schema', await schemaResp.text())\n    const schemaType = schemaResp.headers.get('content-type');\n    const schemaPrefixes = {}\n    const schema = ShExParser.construct(shapeBase.href, schemaPrefixes, {})\n          .parse(await schemaResp.text());\n    const v = ShExCore.Validator.construct(schema);\n    // console.warn(JSON.stringify(payloadGraph.getQuads(), null, 2))\n    let res\n    try {\n      res = v.validate(ShExCore.Util.makeN3DB(payloadGraph), node, shape);\n    } catch (e) {\n      throw new RExtra.MissingShapeError(shape, e.message);\n    }\n    if ('errors' in res) {\n      // We could log this helpful server-side debugging info:\n      //   console.warn(ShExCore.Util.errsToSimple(res).join('\\n'));\n      //   console.warn(`<${node}>@<${shape}>`);\n      //   console.warn(payloadGraph.getQuads().map(q => (['subject', 'predicate', 'object']).map(pos => q[pos].value).join(' ')).join('\\n'));\n      throw new RExtra.ValidationError(node, shape, ShExCore.Util.errsToSimple(res).join('\\n'));\n    }\n  }\n}\n\nfunction parseInstatiationPayload (graph) {\n  const stomped = expectOne(graph, null, namedNode(C.ns_ldp + 'app'), null).object;\n  const name = expectOne(graph, stomped, namedNode(C.ns_ldp + 'name'), null).object;\n  return {\n    stomped: stomped.value,\n    name: name.value\n  };\n}\n\n\n/** Utility functions and classes visible only in this module\n */\n\nfunction expectOne (g, s, p, o, nullable = false) {\n\n  // Throw if s, p or o is an invalid query parameter.\n  // This is fussier than N3.js.\n  const rendered = ([s, p, o]).map(RExtra.renderRdfTerm).join(' ')\n\n  const res = g.getQuads(s, p, o);\n  if (res.length === 0) {\n    if (nullable)\n      return null;\n    throw Error(`no matches for { ${rendered} }`);\n  }\n  if (res.length > 1)\n    throw Error(`expected one answer to { ${rendered} }; got ${res.length}`);\n  return res[0];\n}\n\nfunction cacheName (url) {\n  return url.replace(/[^a-zA-Z0-9_-]/g, '');\n}\n\n  const fsHash = fileSystem.hashCode();\n  if (BlueprintFunctions[fsHash])\n    return BlueprintFunctions[fsHash];\n\n  return BlueprintFunctions[fsHash] = {\n    remoteBlueprint: RemoteBlueprint,\n    managedContainer: ManagedContainer,\n    parseInstatiationPayload\n  }\n}\n\nmodule.exports = BlueprintFunctions;\n\n\n//# sourceURL=webpack://blues/./util/blueprint.js?");

/***/ }),

/***/ "./util/constants.js":
/*!***************************!*\
  !*** ./util/constants.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  ns_ldp: 'http://www.w3.org/ns/ldp#',\n  ns_rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n  ns_rdfs: 'http://www.w3.org/2000/01/rdf-schema#',\n  ns_foot: 'http://www.w3.org/ns/blueprints#',\n  ns_xsd: 'http://www.w3.org/2001/XMLSchema#',\n  ns_dc: 'http://purl.org/dc/terms/',\n};\n\n\n\n//# sourceURL=webpack://blues/./util/constants.js?");

/***/ }),

/***/ "./util/rdf-extra.js":
/*!***************************!*\
  !*** ./util/rdf-extra.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const N3 = __webpack_require__(/*! n3 */ \"./node_modules/n3/src/index.js\");\nconst { DataFactory } = N3;\nconst { namedNode, literal, defaultGraph, quad } = DataFactory;\nconst Relateurl = __webpack_require__(/*! relateurl */ \"./node_modules/relateurl/lib/index.js\");\nconst Jsonld = __webpack_require__(/*! jsonld */ \"./node_modules/jsonld/lib/jsonld.js\");\n\nfunction parseRdf (body, base, contentType) {\n  if (!(base instanceof URL)) throw Error(`base ${base} must be an instance of URL`)\n  return contentType === 'application/ld+json'\n    ? parseJsonLd(body, base, {})\n    : parseTurtle(body, base, {});\n}\n\nfunction parseTurtleSync (text, base, prefixes) {\n  if (!(base instanceof URL)) throw Error(`base ${base} must be an instance of URL`)\n  return new N3.Parser({baseIRI: base.href, blankNodePrefix: \"\", format: \"text/turtle\"}).parse(text);\n}\n\nasync function parseTurtle (text, base, prefixes) {\n  if (!(base instanceof URL)) throw Error(`base ${base} must be an instance of URL`)\n  const store = new N3.Store();\n  return await new Promise((resolve, reject) => {\n    new N3.Parser({baseIRI: base.href, blankNodePrefix: \"\", format: \"text/turtle\"}).\n      parse(text,\n            function (error, triple, newPrefixes) {\n              if (prefixes) {\n                Object.assign(prefixes, newPrefixes)\n              }\n              if (error) {\n                reject(error);\n              } else if (triple) {\n                store.addQuad(triple);\n              } else {\n                resolve(store);\n              }\n            })\n  }).catch(e => {\n    throw new ParserError(e, text);\n  });\n}\n\nfunction serializeTurtleSync (graph, base, prefixes) {\n  if (!(base instanceof URL)) throw Error(`base ${base} must be an instance of URL`)\n  // Create RegExp to test for matching namespaces\n  // Is this faster than !Object.values(prefixes).find(ns => q[t].value.startsWith(ns) ?\n  const p = new RegExp('^(?:' + Object.values(prefixes).map(\n    ns => ns.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n  ).map(\n    nsr => '(?:' + nsr + ')'\n  ).join('|') + ')')\n\n  const writer = new N3.Writer({ prefixes });\n  writer.addQuads((graph.constructor === Array ? graph : graph.getQuads()).map(q => {\n    const terms = ['subject', 'object'];\n    terms.forEach(t => {\n      if (q[t].termType === 'NamedNode' // term is an IRI\n          && !q[t].value.match(p))      // no applicable prefix\n      {\n        const old = q[t]\n        q[t] = namedNode(Relateurl.relate(base.href, q[t].value))\n        // This tests to make sure the URL is valid\n        // c.f. https://github.com/stevenvachon/relateurl/issues/28\n        try {\n          const effective = new URL(q[t].value, base).href;\n          if (old.value !== effective)\n            throw new Error(`${old.value} !== ${effective}`);\n        } catch (e) {\n          throw Error(`Relateurl.relate(${base.href}, ${old.value}) => \"${q[t].value}\" failed: ${e}`)\n        }\n      }\n    });\n    return q\n  }));\n  let text\n  writer.end((error, result) => {\n    if (error)\n      throw Error(error);\n    else\n      text = result\n  });\n  return text;\n}\n\nasync function serializeTurtle (graph, base, prefixes) {\n  if (!(base instanceof URL)) throw Error(`base ${base} must be an instance of URL`)\n  // Create RegExp to test for matching namespaces\n  // Is this faster than !Object.values(prefixes).find(ns => q[t].value.startsWith(ns) ?\n  const p = new RegExp('^(?:' + Object.values(prefixes).map(\n    ns => ns.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n  ).map(\n    nsr => '(?:' + nsr + ')'\n  ).join('|') + ')')\n\n  return await new Promise((resolve, reject) => {\n    const writer = new N3.Writer({ prefixes });\n    writer.addQuads((graph.constructor === Array ? graph : graph.getQuads()).map(q => {\n      const terms = ['subject', 'object'];\n      terms.forEach(t => {\n        if (q[t].termType === 'NamedNode' // term is an IRI\n            && !q[t].value.match(p))      // no applicable prefix\n          q[t] = namedNode(Relateurl.relate(base.href, q[t].value, { output: Relateurl.ROOT_PATH_RELATIVE }))\n      });\n      return q\n    }));\n    writer.end((error, result) => {\n      if (error)\n        reject(error);\n      else\n        resolve(result)\n    });\n  })\n}\n\nasync function parseJsonLd (text, base) {\n  if (!(base instanceof URL)) throw Error(`base ${base} must be an instance of URL`)\n  try {\n    const qz = await Jsonld.toRDF(JSON.parse(text), {format: \"application/nquads\", base: base.href});\n    // I think future minor versions will return an RDFJS list of quads.\n    return parseTurtle(qz, base);\n  } catch(e) {\n    throw new ParserError(e, text)\n  }\n}\n\n/** ManagedError - set of errors that Blueprints are expected to return.\n */\nclass ManagedError extends Error {\n  constructor (message, status) {\n    super(message);\n    this.name = 'Managed';\n    this.status = status;\n  }\n}\n\n/** ParserError - adds context to jsonld.js and N3.js parse errors.\n */\nclass ParserError extends ManagedError {\n  constructor (e, text) {\n    let message = e.message;\n    if ('context' in e) { // N3.Parser().parse()\n      const c = e.context;\n      const lines = text.split(/\\n/);\n      message = `${e.message}\\n  line: ${lines[c.line-1]}\\n  context: ${JSON.stringify(c)}`;\n    }\n    if ('details' in e) { // Jsonld.expand()\n      const d = e.details;\n      message = `${e.message}\\n  details: ${JSON.stringify(d)}`;\n    }\n    super(message, 422);\n    this.name = e.name;\n  }\n}\n\n/** NotFoundError - HTTP resource not found.\n */\nclass NotFoundError extends ManagedError {\n  constructor (resource, role, text) {\n    let message = `${role} ${resource} not found`;\n    super(message, 424);\n    this.name = 'NotFound';\n    this.text = text;\n  }\n}\n\n/** MiscHttpError - HTTP operation failed.\n */\nclass MiscHttpError extends ManagedError {\n  constructor (operation, resource, role, status, statusText, text) {\n    let message = `${operation} ${role} ${resource} failed with ${status} ${statusText}`;\n    super(message, 424);\n    this.name = 'NotFound';\n    this.text = text;\n  }\n}\n\n/** makeHttpError - decide between NotFound and MiscHttp error.\n */\nasync function makeHttpError (operation, resource, role, resp) {\n  switch (resp.status) {\n  case 404: return new NotFoundError(resource, role, (await resp.text()).substr(0, 80))\n  default: return new MiscHttpError(operation, resource, role, resp.status, resp.statusText, (await resp.text()).substr(0, 80))\n  }\n}\n\n/** MissingShapeError - shape was not found in schema.\n */\nclass MissingShapeError extends ManagedError {\n  constructor (shape, text) {\n    let message = `shape ${shape} not found`;\n    super(message, 424);\n    this.name = 'MissingShape';\n    this.text = text;\n  }\n}\n\n/** BlueprintStructureError - badly-formed Blueprint.\n */\nclass BlueprintStructureError extends ManagedError {\n  constructor (blueprint, text) {\n    let message = `Badly-structured blueprint ${blueprint}${text ? ': ' + text : ''}`;\n    super(message, 424);\n    this.name = 'BlueprintStructure';\n    this.text = text;\n  }\n}\n\n/** ValidationError - node did not validate as shape.\n */\nclass ValidationError extends ManagedError {\n  constructor (node, shape, text) {\n    let message = `<${node}> did not validate as <${shape}>:\\n` + text;\n    super(message, 422);\n    this.name = 'Validation';\n    this.node = node;\n    this.shape = shape;\n    this.text = text;\n  }\n}\n\n/** UriTemplateMatchError - no supplied Uri template matched string.\n */\nclass UriTemplateMatchError extends ManagedError {\n  constructor (string, templates, text) {\n    let message = `Failed to match \"${string}\"${templates ? JSON.stringify(templates) : ''}${text ? ': ' + text : ''}`;\n    super(message, 422);\n    this.name = 'UriTemplateMatchError';\n    this.templates = templates;\n    this.text = text;\n  }\n}\n\n// good-enough rendering for terms.\nfunction renderRdfTerm (t) {\n  return t === null ? '_'\n  // : typeof t === 'string' ? `<${t}>` disabled even though N3.js allows bare IRIs.\n    : t.termType === 'NamedNode' ? `<${t.value}>`\n    : t.termType === 'BlankNode' ? `_:${t.value}`\n    : t.termType === 'Literal' ? `\"${t.value.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`\n    : (() => { throw Error(`${t} is not an RDFJS term`) })();\n}\n\nmodule.exports = {\n  parseRdf,\n  parseTurtleSync,\n  parseTurtle,\n  serializeTurtleSync,\n  serializeTurtle,\n  parseJsonLd,\n  ManagedError,\n  ParserError,\n  NotFoundError,\n  MiscHttpError,\n  makeHttpError,\n  MissingShapeError,\n  BlueprintStructureError,\n  ValidationError,\n  UriTemplateMatchError,\n  renderRdfTerm,\n};\n\n\n//# sourceURL=webpack://blues/./util/rdf-extra.js?");

/***/ }),

/***/ "./webapp/index.js":
/*!*************************!*\
  !*** ./webapp/index.js ***!
  \*************************/
/*! exports provided: Blueprints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Blueprints\", function() { return Blueprints; });\n// module.exports = window.blueprints = require('./util/blueprint.js')\n\nconst Blueprints = __webpack_require__(/*! ../util/blueprint.js */ \"./util/blueprint.js\")\n\n\n\n//# sourceURL=webpack://blues/./webapp/index.js?");

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack://blues/util_(ignored)?");

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack://blues/util_(ignored)?");

/***/ }),

/***/ 2:
/*!*************************************!*\
  !*** rdf-canonize-native (ignored) ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack://blues/rdf-canonize-native_(ignored)?");

/***/ }),

/***/ 3:
/*!************************!*\
  !*** xmldom (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack://blues/xmldom_(ignored)?");

/***/ }),

/***/ 4:
/*!*************************!*\
  !*** request (ignored) ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack://blues/request_(ignored)?");

/***/ }),

/***/ 5:
/*!**********************!*\
  !*** http (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack://blues/http_(ignored)?");

/***/ })

/******/ });